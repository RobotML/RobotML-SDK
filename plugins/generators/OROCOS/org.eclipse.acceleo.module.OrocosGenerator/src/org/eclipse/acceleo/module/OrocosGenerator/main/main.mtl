[comment encoding = UTF-8 /]
[module main('http://www.eclipse.org/uml2/3.0.0/UML','http://Papyrus/RobotML/1')/]


[import org::eclipse::robotml::generators::acceleo::mmqueries::GeneralQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::ArchitectureQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DataTypeQueries /]
[import org::eclipse::acceleo::module::OrocosGenerator::mmqueries::OrocosQueries /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_orocos_component_hpp /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_orocos_component_cpp /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_orocos_component_lua /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_orocos_interface_hpp /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_cpp_Types /]

[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_config_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_mapping_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_manifest_xml /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_makefile_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_ops_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_FSM /]

[template public generateOROCOS(model : Model)] 
[comment @main/]
[comment][generateElement(model)/][/comment]
[if (isRootModel(model))]
	[generateConfigFile(model)/]
	[generateOpsFile(model)/]
    [generateCppTypes(model)/]
[/if]

[generateManifestFile(model)/]
[generateMakefile(model)/]

[comment] 
	Generate Orocos components: 
		- CPP & HPP
		- LUA 
[/comment]
[for (elt: NamedElement | getComponentModels(model))]	
	[let c : Class = elt.oclAsType(Class)]
		[if (not isActuator(c)) and (not isSensor(c) and (not isEnvironment(c)) and (not isRobot(c)))]
			[if (hasStateMachine(c))]
				[generateOrocosComponentLua(c, model)/]				
			[else]
			[if(isMacroComponent(c) = false)] 
					[generateOrocosComponentHpp(c, model)/]
					[generateOrocosComponentCpp(c, model)/]				
			[/if]
		[/if]
		[/if]
	[/let]
[/for]

[for (interface : Interface | getRobotMLInterfaces(model))]	
	[generateOrocosInterfaceHpp(interface,model)/]
[/for]

[comment]
For generating xml file	
[generateMappingFile(rootModel)/]
[/comment]


[/template]
