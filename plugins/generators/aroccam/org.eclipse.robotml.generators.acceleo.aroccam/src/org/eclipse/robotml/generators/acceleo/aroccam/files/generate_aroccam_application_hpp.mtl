[comment encoding = UTF-8 /]
[module generate_aroccam_application_hpp('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::eclipse::robotml::generators::acceleo::mmqueries::ArchitectureQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DataTypeQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DeploymentQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::GeneralQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::FSMQueries /]
[import org::eclipse::robotml::generators::acceleo::aroccam::files::generate_aroccam_component_hpp /]
[import org::eclipse::robotml::generators::acceleo::aroccam::files::generate_aroccam_component_cpp /]

[template public generateAroccamApplicationHpp(model : Model)]

[file ('src/' + model.name + 'Application/' + model.name + 'Application.hpp', false, 'UTF-8')]
#ifndef __EFFIBOX_[model.name/]Application_HPP__
#define __EFFIBOX_[model.name/]Application_HPP__

//effibox
#include <effibox/application/application.hpp>

//local includes
#include "Datatypes/all.hpp"

[comment] Includes sub-components (which has been allocated to aroccam) [/comment]
[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and inst.isAllocatedTo('allocate to aroccam'))]
#include "[p.type.oclAsType(Class).getStereotype()/]/[p.type.name/]/[p.type.name/].hpp"
		[/if]
	[/let]
[/for]

class [model.name/]Application: public Application
{
	APPLICATION_DECLARATION([model.name/]Application)

public:
	void initialization(const std::string & inParameters);
	void finalization();

	//cameras event callbacks
	[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
		[let p: Property = getInstance(model, inst)]
			[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('CameraSystem'))]
	void frame[p.name/](const effibox::FramePtr & f);
			[/if]
		[/let]
	[/for]

	//rangefinder event callbacks
	[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
		[let p: Property = getInstance(model, inst)]
			[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('LidarSystem'))]
	void frame[p.name/](const effibox::FramePtr & f);
			[/if]
		[/let]
	[/for]

	//gps events callbacks
	[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
		[let p: Property = getInstance(model, inst)]
			[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('GPSSystem'))]
	void frame[p.name/]_GGA(const effibox::FramePtr & f);
			[/if]
		[/let]
	[/for]

	//odometry events callbacks
	[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
		[let p: Property = getInstance(model, inst)]
			[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('OdometrySystem'))]
	void frame[p.name/]_genericodometry(const effibox::FramePtr & f);
			[/if]
		[/let]
	[/for]

	//imu events callbacks
	[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
		[let p: Property = getInstance(model, inst)]
			[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('InertialMeasurementUnitSystem'))]
	void frame[p.name/]_GLOBAL(const effibox::FramePtr & f);
			[/if]
		[/let]
	[/for]

	void frameError(const effibox::FramePtr & f);

	//sub-components
	[comment] Generate components in deployment plan which has been allocated to aroccam [/comment]
	[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
		[let p: Property = getInstance(model, inst)]
			[if (p.isProperty() and inst.isAllocatedTo('allocate to aroccam'))]
	[p.type.name/] [p.name/];
			[/if]
		[/let]
	[/for]
};

#endif
[/file]

[/template]
