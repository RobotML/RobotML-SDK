/*
* generated by Xtext
*/

package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AthenaDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cLanguagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLanguagesLanguageDeclarationParserRuleCall_1_0 = (RuleCall)cLanguagesAssignment_1.eContents().get(0);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesDataTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Assignment cValiditiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValiditiesValidityFunctionDeclarationParserRuleCall_3_0 = (RuleCall)cValiditiesAssignment_3.eContents().get(0);
		private final Assignment cImportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportsImportParserRuleCall_4_0 = (RuleCall)cImportsAssignment_4.eContents().get(0);
		private final Assignment cFunctionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionsFunctionDeclarationParserRuleCall_5_0 = (RuleCall)cFunctionsAssignment_5.eContents().get(0);
		private final Assignment cImportsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cImportsImportParserRuleCall_6_0 = (RuleCall)cImportsAssignment_6.eContents().get(0);
		private final Assignment cProcessingsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cProcessingsProcessingDeclarationParserRuleCall_7_0 = (RuleCall)cProcessingsAssignment_7.eContents().get(0);
		private final Assignment cImportsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cImportsImportParserRuleCall_8_0 = (RuleCall)cImportsAssignment_8.eContents().get(0);
		private final Assignment cPrototypesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPrototypesPrototypeDeclarationParserRuleCall_9_0 = (RuleCall)cPrototypesAssignment_9.eContents().get(0);
		private final Assignment cImportsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cImportsImportParserRuleCall_10_0 = (RuleCall)cImportsAssignment_10.eContents().get(0);
		private final Assignment cWrappersAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWrappersWrapperDeclarationParserRuleCall_11_0 = (RuleCall)cWrappersAssignment_11.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		///// Projet complet
		//////////////////////////////////////////////////////////////////////////////////////////
		//Project:
		//	imports+=Import* languages+=LanguageDeclaration* types+=DataType* validities+=validityFunctionDeclaration*
		//	imports+=Import* functions+=functionDeclaration* imports+=Import* processings+=ProcessingDeclaration* imports+=Import*
		//	prototypes+=prototypeDeclaration* imports+=Import* wrappers+=wrapperDeclaration*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* languages+=LanguageDeclaration* types+=DataType* validities+=validityFunctionDeclaration*
		//imports+=Import* functions+=functionDeclaration* imports+=Import* processings+=ProcessingDeclaration* imports+=Import*
		//prototypes+=prototypeDeclaration* imports+=Import* wrappers+=wrapperDeclaration*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//languages+=LanguageDeclaration*
		public Assignment getLanguagesAssignment_1() { return cLanguagesAssignment_1; }

		//LanguageDeclaration
		public RuleCall getLanguagesLanguageDeclarationParserRuleCall_1_0() { return cLanguagesLanguageDeclarationParserRuleCall_1_0; }

		//types+=DataType*
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//DataType
		public RuleCall getTypesDataTypeParserRuleCall_2_0() { return cTypesDataTypeParserRuleCall_2_0; }

		//validities+=validityFunctionDeclaration*
		public Assignment getValiditiesAssignment_3() { return cValiditiesAssignment_3; }

		//validityFunctionDeclaration
		public RuleCall getValiditiesValidityFunctionDeclarationParserRuleCall_3_0() { return cValiditiesValidityFunctionDeclarationParserRuleCall_3_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_4() { return cImportsAssignment_4; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_0() { return cImportsImportParserRuleCall_4_0; }

		//functions+=functionDeclaration*
		public Assignment getFunctionsAssignment_5() { return cFunctionsAssignment_5; }

		//functionDeclaration
		public RuleCall getFunctionsFunctionDeclarationParserRuleCall_5_0() { return cFunctionsFunctionDeclarationParserRuleCall_5_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_6() { return cImportsAssignment_6; }

		//Import
		public RuleCall getImportsImportParserRuleCall_6_0() { return cImportsImportParserRuleCall_6_0; }

		//processings+=ProcessingDeclaration*
		public Assignment getProcessingsAssignment_7() { return cProcessingsAssignment_7; }

		//ProcessingDeclaration
		public RuleCall getProcessingsProcessingDeclarationParserRuleCall_7_0() { return cProcessingsProcessingDeclarationParserRuleCall_7_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_8() { return cImportsAssignment_8; }

		//Import
		public RuleCall getImportsImportParserRuleCall_8_0() { return cImportsImportParserRuleCall_8_0; }

		//prototypes+=prototypeDeclaration*
		public Assignment getPrototypesAssignment_9() { return cPrototypesAssignment_9; }

		//prototypeDeclaration
		public RuleCall getPrototypesPrototypeDeclarationParserRuleCall_9_0() { return cPrototypesPrototypeDeclarationParserRuleCall_9_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_10() { return cImportsAssignment_10; }

		//Import
		public RuleCall getImportsImportParserRuleCall_10_0() { return cImportsImportParserRuleCall_10_0; }

		//wrappers+=wrapperDeclaration*
		public Assignment getWrappersAssignment_11() { return cWrappersAssignment_11; }

		//wrapperDeclaration
		public RuleCall getWrappersWrapperDeclarationParserRuleCall_11_0() { return cWrappersWrapperDeclarationParserRuleCall_11_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		////
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class LanguageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		///// LANGAGES ET TYPES DE DONNEES
		//////////////////////////////////////////////////////////////////////////////////////////
		//// Declaration d'un langage
		//LanguageDeclaration:
		//	"language" name=ID;
		public ParserRule getRule() { return rule; }

		//"language" name=ID
		public Group getGroup() { return cGroup; }

		//"language"
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefineTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVectorTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMapTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStructTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnionTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// DataTypes
		//DataType:
		//	basicType | defineType | arrayType | vectorType | mapType | structType | unionType;
		public ParserRule getRule() { return rule; }

		//basicType | defineType | arrayType | vectorType | mapType | structType | unionType
		public Alternatives getAlternatives() { return cAlternatives; }

		//basicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//defineType
		public RuleCall getDefineTypeParserRuleCall_1() { return cDefineTypeParserRuleCall_1; }

		//arrayType
		public RuleCall getArrayTypeParserRuleCall_2() { return cArrayTypeParserRuleCall_2; }

		//vectorType
		public RuleCall getVectorTypeParserRuleCall_3() { return cVectorTypeParserRuleCall_3; }

		//mapType
		public RuleCall getMapTypeParserRuleCall_4() { return cMapTypeParserRuleCall_4; }

		//structType
		public RuleCall getStructTypeParserRuleCall_5() { return cStructTypeParserRuleCall_5; }

		//unionType
		public RuleCall getUnionTypeParserRuleCall_6() { return cUnionTypeParserRuleCall_6; }
	}

	public class DefineTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "defineType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypenameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypenameDataTypeCrossReference_3_0 = (CrossReference)cTypenameAssignment_3.eContents().get(0);
		private final RuleCall cTypenameDataTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypenameDataTypeCrossReference_3_0.eContents().get(1);
		
		//// Define
		//defineType:
		//	"define" name=ID "is" typename=[DataType];
		public ParserRule getRule() { return rule; }

		//"define" name=ID "is" typename=[DataType]
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//typename=[DataType]
		public Assignment getTypenameAssignment_3() { return cTypenameAssignment_3; }

		//[DataType]
		public CrossReference getTypenameDataTypeCrossReference_3_0() { return cTypenameDataTypeCrossReference_3_0; }

		//ID
		public RuleCall getTypenameDataTypeIDTerminalRuleCall_3_0_1() { return cTypenameDataTypeIDTerminalRuleCall_3_0_1; }
	}

	public class ValidityFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "validityFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypenameDataTypeCrossReference_1_0 = (CrossReference)cTypenameAssignment_1.eContents().get(0);
		private final RuleCall cTypenameDataTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypenameDataTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cFctNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFctNameIDTerminalRuleCall_2_0 = (RuleCall)cFctNameAssignment_2.eContents().get(0);
		
		//// Validity function Declaration
		//validityFunctionDeclaration:
		//	"validity" typename=[DataType] fctName=ID;
		public ParserRule getRule() { return rule; }

		//"validity" typename=[DataType] fctName=ID
		public Group getGroup() { return cGroup; }

		//"validity"
		public Keyword getValidityKeyword_0() { return cValidityKeyword_0; }

		//typename=[DataType]
		public Assignment getTypenameAssignment_1() { return cTypenameAssignment_1; }

		//[DataType]
		public CrossReference getTypenameDataTypeCrossReference_1_0() { return cTypenameDataTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypenameDataTypeIDTerminalRuleCall_1_0_1() { return cTypenameDataTypeIDTerminalRuleCall_1_0_1; }

		//fctName=ID
		public Assignment getFctNameAssignment_2() { return cFctNameAssignment_2; }

		//ID
		public RuleCall getFctNameIDTerminalRuleCall_2_0() { return cFctNameIDTerminalRuleCall_2_0; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "basicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBeginParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIncludesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIncludesIncludeDeclParserRuleCall_3_0 = (RuleCall)cIncludesAssignment_3.eContents().get(0);
		private final Assignment cLanguagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLanguagesLanguageDeclParserRuleCall_4_0 = (RuleCall)cLanguagesAssignment_4.eContents().get(0);
		private final Assignment cCastsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCastsLexicalCastDeclParserRuleCall_5_0 = (RuleCall)cCastsAssignment_5.eContents().get(0);
		private final RuleCall cEndParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//// Basic Type declaration
		//basicType:
		//	"basic" name=ID begin includes+=includeDecl* languages+=languageDecl+ casts+=lexicalCastDecl* end;
		public ParserRule getRule() { return rule; }

		//"basic" name=ID begin includes+=includeDecl* languages+=languageDecl+ casts+=lexicalCastDecl* end
		public Group getGroup() { return cGroup; }

		//"basic"
		public Keyword getBasicKeyword_0() { return cBasicKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//begin
		public RuleCall getBeginParserRuleCall_2() { return cBeginParserRuleCall_2; }

		//includes+=includeDecl*
		public Assignment getIncludesAssignment_3() { return cIncludesAssignment_3; }

		//includeDecl
		public RuleCall getIncludesIncludeDeclParserRuleCall_3_0() { return cIncludesIncludeDeclParserRuleCall_3_0; }

		//languages+=languageDecl+
		public Assignment getLanguagesAssignment_4() { return cLanguagesAssignment_4; }

		//languageDecl
		public RuleCall getLanguagesLanguageDeclParserRuleCall_4_0() { return cLanguagesLanguageDeclParserRuleCall_4_0; }

		//casts+=lexicalCastDecl*
		public Assignment getCastsAssignment_5() { return cCastsAssignment_5; }

		//lexicalCastDecl
		public RuleCall getCastsLexicalCastDeclParserRuleCall_5_0() { return cCastsLexicalCastDeclParserRuleCall_5_0; }

		//end
		public RuleCall getEndParserRuleCall_6() { return cEndParserRuleCall_6; }
	}

	public class IncludeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "includeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLangLanguageDeclarationCrossReference_1_0 = (CrossReference)cLangAssignment_1.eContents().get(0);
		private final RuleCall cLangLanguageDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cLangLanguageDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIncludeNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIncludeNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cIncludeNameAssignment_3.eContents().get(0);
		
		//// Include Declaration for Basic Types
		//includeDecl:
		//	"include" lang=[LanguageDeclaration] ":" includeName=STRING;
		public ParserRule getRule() { return rule; }

		//"include" lang=[LanguageDeclaration] ":" includeName=STRING
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//lang=[LanguageDeclaration]
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }

		//[LanguageDeclaration]
		public CrossReference getLangLanguageDeclarationCrossReference_1_0() { return cLangLanguageDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getLangLanguageDeclarationIDTerminalRuleCall_1_0_1() { return cLangLanguageDeclarationIDTerminalRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//includeName=STRING
		public Assignment getIncludeNameAssignment_3() { return cIncludeNameAssignment_3; }

		//STRING
		public RuleCall getIncludeNameSTRINGTerminalRuleCall_3_0() { return cIncludeNameSTRINGTerminalRuleCall_3_0; }
	}

	public class LanguageDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "languageDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLangLanguageDeclarationCrossReference_1_0 = (CrossReference)cLangAssignment_1.eContents().get(0);
		private final RuleCall cLangLanguageDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cLangLanguageDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransSTRINGTerminalRuleCall_3_0 = (RuleCall)cTransAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//// Language Declaration for Basic Types
		//languageDecl:
		//	"language" lang=[LanguageDeclaration] ":" trans=STRING "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//"language" lang=[LanguageDeclaration] ":" trans=STRING "=" value=STRING
		public Group getGroup() { return cGroup; }

		//"language"
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }

		//lang=[LanguageDeclaration]
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }

		//[LanguageDeclaration]
		public CrossReference getLangLanguageDeclarationCrossReference_1_0() { return cLangLanguageDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getLangLanguageDeclarationIDTerminalRuleCall_1_0_1() { return cLangLanguageDeclarationIDTerminalRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//trans=STRING
		public Assignment getTransAssignment_3() { return cTransAssignment_3; }

		//STRING
		public RuleCall getTransSTRINGTerminalRuleCall_3_0() { return cTransSTRINGTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=STRING
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_0() { return cValueSTRINGTerminalRuleCall_5_0; }
	}

	public class LexicalCastDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lexicalCastDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLexicalCastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLangLanguageDeclarationCrossReference_1_0 = (CrossReference)cLangAssignment_1.eContents().get(0);
		private final RuleCall cLangLanguageDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cLangLanguageDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCastAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCastSTRINGTerminalRuleCall_3_0 = (RuleCall)cCastAssignment_3.eContents().get(0);
		
		//// Lexical cast declaration
		//lexicalCastDecl:
		//	"lexicalCast" lang=[LanguageDeclaration] ":" cast=STRING;
		public ParserRule getRule() { return rule; }

		//"lexicalCast" lang=[LanguageDeclaration] ":" cast=STRING
		public Group getGroup() { return cGroup; }

		//"lexicalCast"
		public Keyword getLexicalCastKeyword_0() { return cLexicalCastKeyword_0; }

		//lang=[LanguageDeclaration]
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }

		//[LanguageDeclaration]
		public CrossReference getLangLanguageDeclarationCrossReference_1_0() { return cLangLanguageDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getLangLanguageDeclarationIDTerminalRuleCall_1_0_1() { return cLangLanguageDeclarationIDTerminalRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//cast=STRING
		public Assignment getCastAssignment_3() { return cCastAssignment_3; }

		//STRING
		public RuleCall getCastSTRINGTerminalRuleCall_3_0() { return cCastSTRINGTerminalRuleCall_3_0; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypenameDataTypeCrossReference_2_0 = (CrossReference)cTypenameAssignment_2.eContents().get(0);
		private final RuleCall cTypenameDataTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypenameDataTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIndicesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIndicesIndexParserRuleCall_6_0 = (RuleCall)cIndicesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cComaParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cIndicesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cIndicesIndexParserRuleCall_7_1_0 = (RuleCall)cIndicesAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Array Parameter Declaration
		//arrayType:
		//	"array" "<" typename=[DataType] ">" name=ID "[" indices+=index (coma indices+=index)* "]";
		public ParserRule getRule() { return rule; }

		//"array" "<" typename=[DataType] ">" name=ID "[" indices+=index (coma indices+=index)* "]"
		public Group getGroup() { return cGroup; }

		//"array"
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//typename=[DataType]
		public Assignment getTypenameAssignment_2() { return cTypenameAssignment_2; }

		//[DataType]
		public CrossReference getTypenameDataTypeCrossReference_2_0() { return cTypenameDataTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypenameDataTypeIDTerminalRuleCall_2_0_1() { return cTypenameDataTypeIDTerminalRuleCall_2_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//indices+=index
		public Assignment getIndicesAssignment_6() { return cIndicesAssignment_6; }

		//index
		public RuleCall getIndicesIndexParserRuleCall_6_0() { return cIndicesIndexParserRuleCall_6_0; }

		//(coma indices+=index)*
		public Group getGroup_7() { return cGroup_7; }

		//coma
		public RuleCall getComaParserRuleCall_7_0() { return cComaParserRuleCall_7_0; }

		//indices+=index
		public Assignment getIndicesAssignment_7_1() { return cIndicesAssignment_7_1; }

		//index
		public RuleCall getIndicesIndexParserRuleCall_7_1_0() { return cIndicesIndexParserRuleCall_7_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class VectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "vectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypenameDataTypeCrossReference_2_0 = (CrossReference)cTypenameAssignment_2.eContents().get(0);
		private final RuleCall cTypenameDataTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypenameDataTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//// Vector Parameter Declaration
		//vectorType:
		//	"vector" "<" typename=[DataType] ">" name=ID;
		public ParserRule getRule() { return rule; }

		//"vector" "<" typename=[DataType] ">" name=ID
		public Group getGroup() { return cGroup; }

		//"vector"
		public Keyword getVectorKeyword_0() { return cVectorKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//typename=[DataType]
		public Assignment getTypenameAssignment_2() { return cTypenameAssignment_2; }

		//[DataType]
		public CrossReference getTypenameDataTypeCrossReference_2_0() { return cTypenameDataTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypenameDataTypeIDTerminalRuleCall_2_0_1() { return cTypenameDataTypeIDTerminalRuleCall_2_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}

	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeytypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cKeytypeDataTypeCrossReference_2_0 = (CrossReference)cKeytypeAssignment_2.eContents().get(0);
		private final RuleCall cKeytypeDataTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cKeytypeDataTypeCrossReference_2_0.eContents().get(1);
		private final RuleCall cComaParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cValtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cValtypeDataTypeCrossReference_4_0 = (CrossReference)cValtypeAssignment_4.eContents().get(0);
		private final RuleCall cValtypeDataTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cValtypeDataTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		
		//// Map Parameter Declaration
		//mapType:
		//	"map" "<" keytype=[DataType] coma valtype=[DataType] ">" name=ID;
		public ParserRule getRule() { return rule; }

		//"map" "<" keytype=[DataType] coma valtype=[DataType] ">" name=ID
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//keytype=[DataType]
		public Assignment getKeytypeAssignment_2() { return cKeytypeAssignment_2; }

		//[DataType]
		public CrossReference getKeytypeDataTypeCrossReference_2_0() { return cKeytypeDataTypeCrossReference_2_0; }

		//ID
		public RuleCall getKeytypeDataTypeIDTerminalRuleCall_2_0_1() { return cKeytypeDataTypeIDTerminalRuleCall_2_0_1; }

		//coma
		public RuleCall getComaParserRuleCall_3() { return cComaParserRuleCall_3; }

		//valtype=[DataType]
		public Assignment getValtypeAssignment_4() { return cValtypeAssignment_4; }

		//[DataType]
		public CrossReference getValtypeDataTypeCrossReference_4_0() { return cValtypeDataTypeCrossReference_4_0; }

		//ID
		public RuleCall getValtypeDataTypeIDTerminalRuleCall_4_0_1() { return cValtypeDataTypeIDTerminalRuleCall_4_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
	}

	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "structType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndicesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndicesIndexParserRuleCall_2_1_0 = (RuleCall)cIndicesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cComaParserRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cIndicesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIndicesIndexParserRuleCall_2_2_1_0 = (RuleCall)cIndicesAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cBeginParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersStructElementParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// Structured Type
		//structType:
		//	"struct" name=ID ("<" indices+=index (coma indices+=index)* ">")? begin parameters+=structElement+ end;
		public ParserRule getRule() { return rule; }

		//"struct" name=ID ("<" indices+=index (coma indices+=index)* ">")? begin parameters+=structElement+ end
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<" indices+=index (coma indices+=index)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//indices+=index
		public Assignment getIndicesAssignment_2_1() { return cIndicesAssignment_2_1; }

		//index
		public RuleCall getIndicesIndexParserRuleCall_2_1_0() { return cIndicesIndexParserRuleCall_2_1_0; }

		//(coma indices+=index)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//coma
		public RuleCall getComaParserRuleCall_2_2_0() { return cComaParserRuleCall_2_2_0; }

		//indices+=index
		public Assignment getIndicesAssignment_2_2_1() { return cIndicesAssignment_2_2_1; }

		//index
		public RuleCall getIndicesIndexParserRuleCall_2_2_1_0() { return cIndicesIndexParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//begin
		public RuleCall getBeginParserRuleCall_3() { return cBeginParserRuleCall_3; }

		//parameters+=structElement+
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//structElement
		public RuleCall getParametersStructElementParserRuleCall_4_0() { return cParametersStructElementParserRuleCall_4_0; }

		//end
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
	}

	public class StructElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "structElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypenameDataTypeCrossReference_0_0 = (CrossReference)cTypenameAssignment_0.eContents().get(0);
		private final RuleCall cTypenameDataTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypenameDataTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesIndexParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cComaParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cIndicesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndicesIndexParserRuleCall_1_2_1_0 = (RuleCall)cIndicesAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasInitValueAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasInitValueEqualsSignKeyword_3_0_0 = (Keyword)cHasInitValueAssignment_3_0.eContents().get(0);
		private final Assignment cInitValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cInitValueAssignment_3_1.eContents().get(0);
		
		//// Simple Parameter Declaration
		//structElement:
		//	typename=[DataType] ("<" indices+=index (coma indices+=index)* ">")? name=ID (hasInitValue?="=" initValue=STRING)?;
		public ParserRule getRule() { return rule; }

		//typename=[DataType] ("<" indices+=index (coma indices+=index)* ">")? name=ID (hasInitValue?="=" initValue=STRING)?
		public Group getGroup() { return cGroup; }

		//typename=[DataType]
		public Assignment getTypenameAssignment_0() { return cTypenameAssignment_0; }

		//[DataType]
		public CrossReference getTypenameDataTypeCrossReference_0_0() { return cTypenameDataTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypenameDataTypeIDTerminalRuleCall_0_0_1() { return cTypenameDataTypeIDTerminalRuleCall_0_0_1; }

		//("<" indices+=index (coma indices+=index)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//indices+=index
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }

		//index
		public RuleCall getIndicesIndexParserRuleCall_1_1_0() { return cIndicesIndexParserRuleCall_1_1_0; }

		//(coma indices+=index)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//coma
		public RuleCall getComaParserRuleCall_1_2_0() { return cComaParserRuleCall_1_2_0; }

		//indices+=index
		public Assignment getIndicesAssignment_1_2_1() { return cIndicesAssignment_1_2_1; }

		//index
		public RuleCall getIndicesIndexParserRuleCall_1_2_1_0() { return cIndicesIndexParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(hasInitValue?="=" initValue=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//hasInitValue?="="
		public Assignment getHasInitValueAssignment_3_0() { return cHasInitValueAssignment_3_0; }

		//"="
		public Keyword getHasInitValueEqualsSignKeyword_3_0_0() { return cHasInitValueEqualsSignKeyword_3_0_0; }

		//initValue=STRING
		public Assignment getInitValueAssignment_3_1() { return cInitValueAssignment_3_1; }

		//STRING
		public RuleCall getInitValueSTRINGTerminalRuleCall_3_1_0() { return cInitValueSTRINGTerminalRuleCall_3_1_0; }
	}

	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDimAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDimIDTerminalRuleCall_0_0 = (RuleCall)cDimAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cHasValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cHasValueEqualsSignKeyword_1_0_0 = (Keyword)cHasValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//index:
		//	dim=ID (hasValue?="=" value=INT)?;
		public ParserRule getRule() { return rule; }

		//dim=ID (hasValue?="=" value=INT)?
		public Group getGroup() { return cGroup; }

		//dim=ID
		public Assignment getDimAssignment_0() { return cDimAssignment_0; }

		//ID
		public RuleCall getDimIDTerminalRuleCall_0_0() { return cDimIDTerminalRuleCall_0_0; }

		//(hasValue?="=" value=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//hasValue?="="
		public Assignment getHasValueAssignment_1_0() { return cHasValueAssignment_1_0; }

		//"="
		public Keyword getHasValueEqualsSignKeyword_1_0_0() { return cHasValueEqualsSignKeyword_1_0_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
	}

	public class UnionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBeginParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cElementsDataTypeCrossReference_3_0 = (CrossReference)cElementsAssignment_3.eContents().get(0);
		private final RuleCall cElementsDataTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cElementsDataTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cComaParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cElementsDataTypeCrossReference_4_1_0 = (CrossReference)cElementsAssignment_4_1.eContents().get(0);
		private final RuleCall cElementsDataTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cElementsDataTypeCrossReference_4_1_0.eContents().get(1);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// Structured Type
		//unionType:
		//	"union" name=ID begin elements+=[DataType] (coma elements+=[DataType])+ end;
		public ParserRule getRule() { return rule; }

		//"union" name=ID begin elements+=[DataType] (coma elements+=[DataType])+ end
		public Group getGroup() { return cGroup; }

		//"union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//begin
		public RuleCall getBeginParserRuleCall_2() { return cBeginParserRuleCall_2; }

		//elements+=[DataType]
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//[DataType]
		public CrossReference getElementsDataTypeCrossReference_3_0() { return cElementsDataTypeCrossReference_3_0; }

		//ID
		public RuleCall getElementsDataTypeIDTerminalRuleCall_3_0_1() { return cElementsDataTypeIDTerminalRuleCall_3_0_1; }

		//(coma elements+=[DataType])+
		public Group getGroup_4() { return cGroup_4; }

		//coma
		public RuleCall getComaParserRuleCall_4_0() { return cComaParserRuleCall_4_0; }

		//elements+=[DataType]
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }

		//[DataType]
		public CrossReference getElementsDataTypeCrossReference_4_1_0() { return cElementsDataTypeCrossReference_4_1_0; }

		//ID
		public RuleCall getElementsDataTypeIDTerminalRuleCall_4_1_0_1() { return cElementsDataTypeIDTerminalRuleCall_4_1_0_1; }

		//end
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
	}

	public class FuncProcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncProc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessingDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		///// DECLARATION DE FONCTIONS
		//////////////////////////////////////////////////////////////////////////////////////////
		//FuncProc:
		//	functionDeclaration | ProcessingDeclaration;
		public ParserRule getRule() { return rule; }

		//functionDeclaration | ProcessingDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//functionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_0() { return cFunctionDeclarationParserRuleCall_0; }

		//ProcessingDeclaration
		public RuleCall getProcessingDeclarationParserRuleCall_1() { return cProcessingDeclarationParserRuleCall_1; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLangAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLangLanguageDeclarationCrossReference_3_0 = (CrossReference)cLangAssignment_3.eContents().get(0);
		private final RuleCall cLangLanguageDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cLangLanguageDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cOpenParParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cArgsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArgsArgumentsDeclarationParserRuleCall_6_0 = (RuleCall)cArgsAssignment_6.eContents().get(0);
		private final RuleCall cCloseParParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//// function
		//functionDeclaration:
		//	"function" name=ID "<" lang=[LanguageDeclaration] ">" openPar args=argumentsDeclaration? closePar;
		public ParserRule getRule() { return rule; }

		//"function" name=ID "<" lang=[LanguageDeclaration] ">" openPar args=argumentsDeclaration? closePar
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//lang=[LanguageDeclaration]
		public Assignment getLangAssignment_3() { return cLangAssignment_3; }

		//[LanguageDeclaration]
		public CrossReference getLangLanguageDeclarationCrossReference_3_0() { return cLangLanguageDeclarationCrossReference_3_0; }

		//ID
		public RuleCall getLangLanguageDeclarationIDTerminalRuleCall_3_0_1() { return cLangLanguageDeclarationIDTerminalRuleCall_3_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//openPar
		public RuleCall getOpenParParserRuleCall_5() { return cOpenParParserRuleCall_5; }

		//args=argumentsDeclaration?
		public Assignment getArgsAssignment_6() { return cArgsAssignment_6; }

		//argumentsDeclaration
		public RuleCall getArgsArgumentsDeclarationParserRuleCall_6_0() { return cArgsArgumentsDeclarationParserRuleCall_6_0; }

		//closePar
		public RuleCall getCloseParParserRuleCall_7() { return cCloseParParserRuleCall_7; }
	}

	public class ArgumentsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "argumentsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		
		//argumentsDeclaration:
		//	arguments+=arg arguments+=arg*;
		public ParserRule getRule() { return rule; }

		//arguments+=arg arguments+=arg*
		public Group getGroup() { return cGroup; }

		//arguments+=arg
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//arg
		public RuleCall getArgumentsArgParserRuleCall_0_0() { return cArgumentsArgParserRuleCall_0_0; }

		//arguments+=arg*
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//arg
		public RuleCall getArgumentsArgParserRuleCall_1_0() { return cArgumentsArgParserRuleCall_1_0; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModifierAlternatives_0_0 = (Alternatives)cModifierAssignment_0.eContents().get(0);
		private final Keyword cModifierInoutKeyword_0_0_0 = (Keyword)cModifierAlternatives_0_0.eContents().get(0);
		private final Keyword cModifierInKeyword_0_0_1 = (Keyword)cModifierAlternatives_0_0.eContents().get(1);
		private final Keyword cModifierOutKeyword_0_0_2 = (Keyword)cModifierAlternatives_0_0.eContents().get(2);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeDataTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeDataTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeDataTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// function parameter declaration
		//arg:
		//	modifier=("inout" | "in" | "out") type=[DataType] name=ID?;
		public ParserRule getRule() { return rule; }

		//modifier=("inout" | "in" | "out") type=[DataType] name=ID?
		public Group getGroup() { return cGroup; }

		//modifier=("inout" | "in" | "out")
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//"inout" | "in" | "out"
		public Alternatives getModifierAlternatives_0_0() { return cModifierAlternatives_0_0; }

		//"inout"
		public Keyword getModifierInoutKeyword_0_0_0() { return cModifierInoutKeyword_0_0_0; }

		//"in"
		public Keyword getModifierInKeyword_0_0_1() { return cModifierInKeyword_0_0_1; }

		//"out"
		public Keyword getModifierOutKeyword_0_0_2() { return cModifierOutKeyword_0_0_2; }

		//type=[DataType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[DataType]
		public CrossReference getTypeDataTypeCrossReference_1_0() { return cTypeDataTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeDataTypeIDTerminalRuleCall_1_0_1() { return cTypeDataTypeIDTerminalRuleCall_1_0_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ProcessingDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessingDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOpenParParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsArgumentsDeclarationParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final RuleCall cCloseParParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cBeginParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cLocalParametersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLocalParametersLocalParameterDeclarationParserRuleCall_6_0 = (RuleCall)cLocalParametersAssignment_6.eContents().get(0);
		private final Assignment cLocalEventsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLocalEventsLocalEventDeclarationParserRuleCall_7_0 = (RuleCall)cLocalEventsAssignment_7.eContents().get(0);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final RuleCall cEndParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		///// TRAITEMENTS
		//////////////////////////////////////////////////////////////////////////////////////////
		//// processing
		//ProcessingDeclaration:
		//	"processing" name=ID openPar args=argumentsDeclaration? closePar begin localParameters+=localParameterDeclaration*
		//	localEvents+=localEventDeclaration* statements+=statement* end;
		public ParserRule getRule() { return rule; }

		//"processing" name=ID openPar args=argumentsDeclaration? closePar begin localParameters+=localParameterDeclaration*
		//localEvents+=localEventDeclaration* statements+=statement* end
		public Group getGroup() { return cGroup; }

		//"processing"
		public Keyword getProcessingKeyword_0() { return cProcessingKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//openPar
		public RuleCall getOpenParParserRuleCall_2() { return cOpenParParserRuleCall_2; }

		//args=argumentsDeclaration?
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }

		//argumentsDeclaration
		public RuleCall getArgsArgumentsDeclarationParserRuleCall_3_0() { return cArgsArgumentsDeclarationParserRuleCall_3_0; }

		//closePar
		public RuleCall getCloseParParserRuleCall_4() { return cCloseParParserRuleCall_4; }

		//begin
		public RuleCall getBeginParserRuleCall_5() { return cBeginParserRuleCall_5; }

		//localParameters+=localParameterDeclaration*
		public Assignment getLocalParametersAssignment_6() { return cLocalParametersAssignment_6; }

		//localParameterDeclaration
		public RuleCall getLocalParametersLocalParameterDeclarationParserRuleCall_6_0() { return cLocalParametersLocalParameterDeclarationParserRuleCall_6_0; }

		//localEvents+=localEventDeclaration*
		public Assignment getLocalEventsAssignment_7() { return cLocalEventsAssignment_7; }

		//localEventDeclaration
		public RuleCall getLocalEventsLocalEventDeclarationParserRuleCall_7_0() { return cLocalEventsLocalEventDeclarationParserRuleCall_7_0; }

		//statements+=statement*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_8_0() { return cStatementsStatementParserRuleCall_8_0; }

		//end
		public RuleCall getEndParserRuleCall_9() { return cEndParserRuleCall_9; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Assignment cCallAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCallAlternatives_0 = (Alternatives)cCallAssignment.eContents().get(0);
		private final RuleCall cCallFunctionCallParserRuleCall_0_0 = (RuleCall)cCallAlternatives_0.eContents().get(0);
		private final RuleCall cCallWhileblockParserRuleCall_0_1 = (RuleCall)cCallAlternatives_0.eContents().get(1);
		private final RuleCall cCallIfblockParserRuleCall_0_2 = (RuleCall)cCallAlternatives_0.eContents().get(2);
		
		//statement:
		//	call=(functionCall | whileblock | ifblock);
		public ParserRule getRule() { return rule; }

		//call=(functionCall | whileblock | ifblock)
		public Assignment getCallAssignment() { return cCallAssignment; }

		//functionCall | whileblock | ifblock
		public Alternatives getCallAlternatives_0() { return cCallAlternatives_0; }

		//functionCall
		public RuleCall getCallFunctionCallParserRuleCall_0_0() { return cCallFunctionCallParserRuleCall_0_0; }

		//whileblock
		public RuleCall getCallWhileblockParserRuleCall_0_1() { return cCallWhileblockParserRuleCall_0_1; }

		//ifblock
		public RuleCall getCallIfblockParserRuleCall_0_2() { return cCallIfblockParserRuleCall_0_2; }
	}

	public class LocalParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "localParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeDataTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeDataTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeDataTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasValueAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasValueEqualsSignKeyword_3_0_0 = (Keyword)cHasValueAssignment_3_0.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//// processing local declaration
		//localParameterDeclaration:
		//	"parameter" type=[DataType] name=ID (hasValue?="=" value=STRING)?;
		public ParserRule getRule() { return rule; }

		//"parameter" type=[DataType] name=ID (hasValue?="=" value=STRING)?
		public Group getGroup() { return cGroup; }

		//"parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//type=[DataType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[DataType]
		public CrossReference getTypeDataTypeCrossReference_1_0() { return cTypeDataTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeDataTypeIDTerminalRuleCall_1_0_1() { return cTypeDataTypeIDTerminalRuleCall_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(hasValue?="=" value=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//hasValue?="="
		public Assignment getHasValueAssignment_3_0() { return cHasValueAssignment_3_0; }

		//"="
		public Keyword getHasValueEqualsSignKeyword_3_0_0() { return cHasValueEqualsSignKeyword_3_0_0; }

		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
	}

	public class LocalEventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "localEventDeclaration");
		private final RuleCall cEventDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Event
		//localEventDeclaration:
		//	eventDeclaration;
		public ParserRule getRule() { return rule; }

		//eventDeclaration
		public RuleCall getEventDeclarationParserRuleCall() { return cEventDeclarationParserRuleCall; }
	}

	public class IfblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ifblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventNameLocalEventDeclarationCrossReference_1_0 = (CrossReference)cEventNameAssignment_1.eContents().get(0);
		private final RuleCall cEventNameLocalEventDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cEventNameLocalEventDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBeginParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cIfBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfBlocksStatementParserRuleCall_4_0 = (RuleCall)cIfBlocksAssignment_4.eContents().get(0);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHasElseAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cHasElseElseKeyword_6_0_0 = (Keyword)cHasElseAssignment_6_0.eContents().get(0);
		private final RuleCall cBeginParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cElseBlocksAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cElseBlocksStatementParserRuleCall_6_2_0 = (RuleCall)cElseBlocksAssignment_6_2.eContents().get(0);
		private final RuleCall cEndParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		
		//// "if then else" block
		//ifblock:
		//	"if" eventName=[localEventDeclaration] "then" begin ifBlocks+=statement+ end (hasElse?="else" begin
		//	elseBlocks+=statement+ end)?;
		public ParserRule getRule() { return rule; }

		//"if" eventName=[localEventDeclaration] "then" begin ifBlocks+=statement+ end (hasElse?="else" begin
		//elseBlocks+=statement+ end)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//eventName=[localEventDeclaration]
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }

		//[localEventDeclaration]
		public CrossReference getEventNameLocalEventDeclarationCrossReference_1_0() { return cEventNameLocalEventDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getEventNameLocalEventDeclarationIDTerminalRuleCall_1_0_1() { return cEventNameLocalEventDeclarationIDTerminalRuleCall_1_0_1; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//begin
		public RuleCall getBeginParserRuleCall_3() { return cBeginParserRuleCall_3; }

		//ifBlocks+=statement+
		public Assignment getIfBlocksAssignment_4() { return cIfBlocksAssignment_4; }

		//statement
		public RuleCall getIfBlocksStatementParserRuleCall_4_0() { return cIfBlocksStatementParserRuleCall_4_0; }

		//end
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }

		//(hasElse?="else" begin elseBlocks+=statement+ end)?
		public Group getGroup_6() { return cGroup_6; }

		//hasElse?="else"
		public Assignment getHasElseAssignment_6_0() { return cHasElseAssignment_6_0; }

		//"else"
		public Keyword getHasElseElseKeyword_6_0_0() { return cHasElseElseKeyword_6_0_0; }

		//begin
		public RuleCall getBeginParserRuleCall_6_1() { return cBeginParserRuleCall_6_1; }

		//elseBlocks+=statement+
		public Assignment getElseBlocksAssignment_6_2() { return cElseBlocksAssignment_6_2; }

		//statement
		public RuleCall getElseBlocksStatementParserRuleCall_6_2_0() { return cElseBlocksStatementParserRuleCall_6_2_0; }

		//end
		public RuleCall getEndParserRuleCall_6_3() { return cEndParserRuleCall_6_3; }
	}

	public class WhileblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "whileblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventNameLocalEventDeclarationCrossReference_1_0 = (CrossReference)cEventNameAssignment_1.eContents().get(0);
		private final RuleCall cEventNameLocalEventDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cEventNameLocalEventDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBeginParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksStatementParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// "while evt do ... end" block 
		//whileblock:
		//	"while" eventName=[localEventDeclaration] "do" begin blocks+=statement+ end;
		public ParserRule getRule() { return rule; }

		//"while" eventName=[localEventDeclaration] "do" begin blocks+=statement+ end
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//eventName=[localEventDeclaration]
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }

		//[localEventDeclaration]
		public CrossReference getEventNameLocalEventDeclarationCrossReference_1_0() { return cEventNameLocalEventDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getEventNameLocalEventDeclarationIDTerminalRuleCall_1_0_1() { return cEventNameLocalEventDeclarationIDTerminalRuleCall_1_0_1; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//begin
		public RuleCall getBeginParserRuleCall_3() { return cBeginParserRuleCall_3; }

		//blocks+=statement+
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//statement
		public RuleCall getBlocksStatementParserRuleCall_4_0() { return cBlocksStatementParserRuleCall_4_0; }

		//end
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameFuncProcCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameFuncProcIDTerminalRuleCall_1_0_1 = (RuleCall)cNameFuncProcCrossReference_1_0.eContents().get(1);
		private final RuleCall cOpenParParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsFargParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cComaParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsFargParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cCloseParParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// processing function call
		//functionCall:
		//	"execute" name=[FuncProc] openPar (arguments+=farg (coma arguments+=farg)*)? closePar;
		public ParserRule getRule() { return rule; }

		//"execute" name=[FuncProc] openPar (arguments+=farg (coma arguments+=farg)*)? closePar
		public Group getGroup() { return cGroup; }

		//"execute"
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }

		//name=[FuncProc]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[FuncProc]
		public CrossReference getNameFuncProcCrossReference_1_0() { return cNameFuncProcCrossReference_1_0; }

		//ID
		public RuleCall getNameFuncProcIDTerminalRuleCall_1_0_1() { return cNameFuncProcIDTerminalRuleCall_1_0_1; }

		//openPar
		public RuleCall getOpenParParserRuleCall_2() { return cOpenParParserRuleCall_2; }

		//(arguments+=farg (coma arguments+=farg)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=farg
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//farg
		public RuleCall getArgumentsFargParserRuleCall_3_0_0() { return cArgumentsFargParserRuleCall_3_0_0; }

		//(coma arguments+=farg)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//coma
		public RuleCall getComaParserRuleCall_3_1_0() { return cComaParserRuleCall_3_1_0; }

		//arguments+=farg
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//farg
		public RuleCall getArgumentsFargParserRuleCall_3_1_1_0() { return cArgumentsFargParserRuleCall_3_1_1_0; }

		//closePar
		public RuleCall getCloseParParserRuleCall_4() { return cCloseParParserRuleCall_4; }
	}

	public class PrototypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "prototypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrototypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypePrototypeDeclarationCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypePrototypeDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypePrototypeDeclarationCrossReference_2_1_0.eContents().get(1);
		private final RuleCall cBeginParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionsArchitectureElementParserRuleCall_4_0 = (RuleCall)cDefinitionsAssignment_4.eContents().get(0);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		///// ARCHITECTURE
		//////////////////////////////////////////////////////////////////////////////////////////
		//// prototype
		//prototypeDeclaration:
		//	"prototype" name=ID ("is" superType=[prototypeDeclaration])? begin definitions+=architectureElement* end;
		public ParserRule getRule() { return rule; }

		//"prototype" name=ID ("is" superType=[prototypeDeclaration])? begin definitions+=architectureElement* end
		public Group getGroup() { return cGroup; }

		//"prototype"
		public Keyword getPrototypeKeyword_0() { return cPrototypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("is" superType=[prototypeDeclaration])?
		public Group getGroup_2() { return cGroup_2; }

		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }

		//superType=[prototypeDeclaration]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[prototypeDeclaration]
		public CrossReference getSuperTypePrototypeDeclarationCrossReference_2_1_0() { return cSuperTypePrototypeDeclarationCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypePrototypeDeclarationIDTerminalRuleCall_2_1_0_1() { return cSuperTypePrototypeDeclarationIDTerminalRuleCall_2_1_0_1; }

		//begin
		public RuleCall getBeginParserRuleCall_3() { return cBeginParserRuleCall_3; }

		//definitions+=architectureElement*
		public Assignment getDefinitionsAssignment_4() { return cDefinitionsAssignment_4; }

		//architectureElement
		public RuleCall getDefinitionsArchitectureElementParserRuleCall_4_0() { return cDefinitionsArchitectureElementParserRuleCall_4_0; }

		//end
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
	}

	public class ArchitectureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "architectureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStatesetDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInstanceDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInteractionDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSignalDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// Elements pouvant composer un prototype
		//architectureElement:
		//	parameterDeclaration | referenceDeclaration | eventDeclaration | statesetDeclaration | instanceDeclaration |
		//	interactionDeclaration | signalDeclaration;
		public ParserRule getRule() { return rule; }

		//parameterDeclaration | referenceDeclaration | eventDeclaration | statesetDeclaration | instanceDeclaration |
		//interactionDeclaration | signalDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//parameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_0() { return cParameterDeclarationParserRuleCall_0; }

		//referenceDeclaration
		public RuleCall getReferenceDeclarationParserRuleCall_1() { return cReferenceDeclarationParserRuleCall_1; }

		//eventDeclaration
		public RuleCall getEventDeclarationParserRuleCall_2() { return cEventDeclarationParserRuleCall_2; }

		//statesetDeclaration
		public RuleCall getStatesetDeclarationParserRuleCall_3() { return cStatesetDeclarationParserRuleCall_3; }

		//instanceDeclaration
		public RuleCall getInstanceDeclarationParserRuleCall_4() { return cInstanceDeclarationParserRuleCall_4; }

		//interactionDeclaration
		public RuleCall getInteractionDeclarationParserRuleCall_5() { return cInteractionDeclarationParserRuleCall_5; }

		//signalDeclaration
		public RuleCall getSignalDeclarationParserRuleCall_6() { return cSignalDeclarationParserRuleCall_6; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Signal
		//signalDeclaration:
		//	"signal" name=ID;
		public ParserRule getRule() { return rule; }

		//"signal" name=ID
		public Group getGroup() { return cGroup; }

		//"signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EventDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eventDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionsEventConditionParserRuleCall_3_0 = (RuleCall)cConditionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cComaParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cConditionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionsEventConditionParserRuleCall_4_1_0 = (RuleCall)cConditionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Evenement
		//eventDeclaration:
		//	"event" name=ID "{" conditions+=eventCondition (coma conditions+=eventCondition)* "}";
		public ParserRule getRule() { return rule; }

		//"event" name=ID "{" conditions+=eventCondition (coma conditions+=eventCondition)* "}"
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//conditions+=eventCondition
		public Assignment getConditionsAssignment_3() { return cConditionsAssignment_3; }

		//eventCondition
		public RuleCall getConditionsEventConditionParserRuleCall_3_0() { return cConditionsEventConditionParserRuleCall_3_0; }

		//(coma conditions+=eventCondition)*
		public Group getGroup_4() { return cGroup_4; }

		//coma
		public RuleCall getComaParserRuleCall_4_0() { return cComaParserRuleCall_4_0; }

		//conditions+=eventCondition
		public Assignment getConditionsAssignment_4_1() { return cConditionsAssignment_4_1; }

		//eventCondition
		public RuleCall getConditionsEventConditionParserRuleCall_4_1_0() { return cConditionsEventConditionParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EventConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eventCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftPartIDTerminalRuleCall_0_0 = (RuleCall)cLeftPartAssignment_0.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCondAlternatives_1_0 = (Alternatives)cCondAssignment_1.eContents().get(0);
		private final Keyword cCondEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cCondAlternatives_1_0.eContents().get(0);
		private final Keyword cCondGreaterThanSignEqualsSignKeyword_1_0_1 = (Keyword)cCondAlternatives_1_0.eContents().get(1);
		private final Keyword cCondLessThanSignEqualsSignKeyword_1_0_2 = (Keyword)cCondAlternatives_1_0.eContents().get(2);
		private final Keyword cCondLessThanSignKeyword_1_0_3 = (Keyword)cCondAlternatives_1_0.eContents().get(3);
		private final Keyword cCondGreaterThanSignKeyword_1_0_4 = (Keyword)cCondAlternatives_1_0.eContents().get(4);
		private final Keyword cCondPercentSignPercentSignKeyword_1_0_5 = (Keyword)cCondAlternatives_1_0.eContents().get(5);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRightPartIAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRightPartIIDTerminalRuleCall_2_0_0 = (RuleCall)cRightPartIAssignment_2_0.eContents().get(0);
		private final Assignment cRightPartNAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cRightPartNINTTerminalRuleCall_2_1_0 = (RuleCall)cRightPartNAssignment_2_1.eContents().get(0);
		private final Assignment cRightPartSAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cRightPartSSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cRightPartSAssignment_2_2.eContents().get(0);
		
		//// Conditions
		//eventCondition:
		//	leftPart=ID cond=("==" | ">=" | "<=" | "<" | ">" | "%%") (rightPartI=ID | rightPartN=INT | rightPartS=STRING);
		public ParserRule getRule() { return rule; }

		//leftPart=ID cond=("==" | ">=" | "<=" | "<" | ">" | "%%") (rightPartI=ID | rightPartN=INT | rightPartS=STRING)
		public Group getGroup() { return cGroup; }

		//leftPart=ID
		public Assignment getLeftPartAssignment_0() { return cLeftPartAssignment_0; }

		//ID
		public RuleCall getLeftPartIDTerminalRuleCall_0_0() { return cLeftPartIDTerminalRuleCall_0_0; }

		//cond=("==" | ">=" | "<=" | "<" | ">" | "%%")
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//"==" | ">=" | "<=" | "<" | ">" | "%%"
		public Alternatives getCondAlternatives_1_0() { return cCondAlternatives_1_0; }

		//"=="
		public Keyword getCondEqualsSignEqualsSignKeyword_1_0_0() { return cCondEqualsSignEqualsSignKeyword_1_0_0; }

		//">="
		public Keyword getCondGreaterThanSignEqualsSignKeyword_1_0_1() { return cCondGreaterThanSignEqualsSignKeyword_1_0_1; }

		//"<="
		public Keyword getCondLessThanSignEqualsSignKeyword_1_0_2() { return cCondLessThanSignEqualsSignKeyword_1_0_2; }

		//"<"
		public Keyword getCondLessThanSignKeyword_1_0_3() { return cCondLessThanSignKeyword_1_0_3; }

		//">"
		public Keyword getCondGreaterThanSignKeyword_1_0_4() { return cCondGreaterThanSignKeyword_1_0_4; }

		//"%%"
		public Keyword getCondPercentSignPercentSignKeyword_1_0_5() { return cCondPercentSignPercentSignKeyword_1_0_5; }

		//rightPartI=ID | rightPartN=INT | rightPartS=STRING
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//rightPartI=ID
		public Assignment getRightPartIAssignment_2_0() { return cRightPartIAssignment_2_0; }

		//ID
		public RuleCall getRightPartIIDTerminalRuleCall_2_0_0() { return cRightPartIIDTerminalRuleCall_2_0_0; }

		//rightPartN=INT
		public Assignment getRightPartNAssignment_2_1() { return cRightPartNAssignment_2_1; }

		//INT
		public RuleCall getRightPartNINTTerminalRuleCall_2_1_0() { return cRightPartNINTTerminalRuleCall_2_1_0; }

		//rightPartS=STRING
		public Assignment getRightPartSAssignment_2_2() { return cRightPartSAssignment_2_2; }

		//STRING
		public RuleCall getRightPartSSTRINGTerminalRuleCall_2_2_0() { return cRightPartSSTRINGTerminalRuleCall_2_2_0; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeNameDataTypeCrossReference_1_0 = (CrossReference)cTypeNameAssignment_1.eContents().get(0);
		private final RuleCall cTypeNameDataTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeNameDataTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cHasNbWAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cHasNbWNumberSignKeyword_2_0_0 = (Keyword)cHasNbWAssignment_2_0.eContents().get(0);
		private final RuleCall cOpenParParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cNbwAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNbwINTTerminalRuleCall_2_2_0 = (RuleCall)cNbwAssignment_2_2.eContents().get(0);
		private final RuleCall cCloseParParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Assignment cHasInfiniteWriterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHasInfiniteWriterExclamationMarkKeyword_3_0 = (Keyword)cHasInfiniteWriterAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cHasValueAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final Keyword cHasValueEqualsSignKeyword_5_0_0_0 = (Keyword)cHasValueAssignment_5_0_0.eContents().get(0);
		private final Assignment cValueAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_0_1_0 = (RuleCall)cValueAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cHasConfigAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Keyword cHasConfigEqualsSignKeyword_5_1_0_0 = (Keyword)cHasConfigAssignment_5_1_0.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cAlternatives_5.eContents().get(2);
		private final Assignment cHasConfigWithDefaultValueAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final Keyword cHasConfigWithDefaultValueEqualsSignKeyword_5_2_0_0 = (Keyword)cHasConfigWithDefaultValueAssignment_5_2_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Assignment cValueAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_2_2_0 = (RuleCall)cValueAssignment_5_2_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_2_3 = (Keyword)cGroup_5_2.eContents().get(3);
		
		//// parameter
		//parameterDeclaration:
		//	"parameter" typeName=[DataType] (hasNbW?="#" openPar nbw=INT closePar)? hasInfiniteWriter?="!"? name=ID (hasValue?="="
		//	value=STRING | hasConfig?="=" "<>" | hasConfigWithDefaultValue?="=" "<" value=STRING ">")?;
		public ParserRule getRule() { return rule; }

		//"parameter" typeName=[DataType] (hasNbW?="#" openPar nbw=INT closePar)? hasInfiniteWriter?="!"? name=ID (hasValue?="="
		//value=STRING | hasConfig?="=" "<>" | hasConfigWithDefaultValue?="=" "<" value=STRING ">")?
		public Group getGroup() { return cGroup; }

		//"parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//typeName=[DataType]
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//[DataType]
		public CrossReference getTypeNameDataTypeCrossReference_1_0() { return cTypeNameDataTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeNameDataTypeIDTerminalRuleCall_1_0_1() { return cTypeNameDataTypeIDTerminalRuleCall_1_0_1; }

		//(hasNbW?="#" openPar nbw=INT closePar)?
		public Group getGroup_2() { return cGroup_2; }

		//hasNbW?="#"
		public Assignment getHasNbWAssignment_2_0() { return cHasNbWAssignment_2_0; }

		//"#"
		public Keyword getHasNbWNumberSignKeyword_2_0_0() { return cHasNbWNumberSignKeyword_2_0_0; }

		//openPar
		public RuleCall getOpenParParserRuleCall_2_1() { return cOpenParParserRuleCall_2_1; }

		//nbw=INT
		public Assignment getNbwAssignment_2_2() { return cNbwAssignment_2_2; }

		//INT
		public RuleCall getNbwINTTerminalRuleCall_2_2_0() { return cNbwINTTerminalRuleCall_2_2_0; }

		//closePar
		public RuleCall getCloseParParserRuleCall_2_3() { return cCloseParParserRuleCall_2_3; }

		//hasInfiniteWriter?="!"?
		public Assignment getHasInfiniteWriterAssignment_3() { return cHasInfiniteWriterAssignment_3; }

		//"!"
		public Keyword getHasInfiniteWriterExclamationMarkKeyword_3_0() { return cHasInfiniteWriterExclamationMarkKeyword_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//(hasValue?="=" value=STRING | hasConfig?="=" "<>" | hasConfigWithDefaultValue?="=" "<" value=STRING ">")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//hasValue?="=" value=STRING
		public Group getGroup_5_0() { return cGroup_5_0; }

		//hasValue?="="
		public Assignment getHasValueAssignment_5_0_0() { return cHasValueAssignment_5_0_0; }

		//"="
		public Keyword getHasValueEqualsSignKeyword_5_0_0_0() { return cHasValueEqualsSignKeyword_5_0_0_0; }

		//value=STRING
		public Assignment getValueAssignment_5_0_1() { return cValueAssignment_5_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_0_1_0() { return cValueSTRINGTerminalRuleCall_5_0_1_0; }

		//hasConfig?="=" "<>"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//hasConfig?="="
		public Assignment getHasConfigAssignment_5_1_0() { return cHasConfigAssignment_5_1_0; }

		//"="
		public Keyword getHasConfigEqualsSignKeyword_5_1_0_0() { return cHasConfigEqualsSignKeyword_5_1_0_0; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_5_1_1() { return cLessThanSignGreaterThanSignKeyword_5_1_1; }

		//hasConfigWithDefaultValue?="=" "<" value=STRING ">"
		public Group getGroup_5_2() { return cGroup_5_2; }

		//hasConfigWithDefaultValue?="="
		public Assignment getHasConfigWithDefaultValueAssignment_5_2_0() { return cHasConfigWithDefaultValueAssignment_5_2_0; }

		//"="
		public Keyword getHasConfigWithDefaultValueEqualsSignKeyword_5_2_0_0() { return cHasConfigWithDefaultValueEqualsSignKeyword_5_2_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_5_2_1() { return cLessThanSignKeyword_5_2_1; }

		//value=STRING
		public Assignment getValueAssignment_5_2_2() { return cValueAssignment_5_2_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_2_2_0() { return cValueSTRINGTerminalRuleCall_5_2_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_2_3() { return cGreaterThanSignKeyword_5_2_3; }
	}

	public class StatesetDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statesetDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateDeclarationParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final RuleCall cComaParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateDeclarationParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cComaParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cStatesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStatesStateDeclarationParserRuleCall_6_1_0 = (RuleCall)cStatesAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cInitAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cInitStateDeclarationCrossReference_9_0 = (CrossReference)cInitAssignment_9.eContents().get(0);
		private final RuleCall cInitStateDeclarationIDTerminalRuleCall_9_0_1 = (RuleCall)cInitStateDeclarationCrossReference_9_0.eContents().get(1);
		private final RuleCall cBeginParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Assignment cTransitionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cTransitionsTransitionDeclarationParserRuleCall_11_0 = (RuleCall)cTransitionsAssignment_11.eContents().get(0);
		private final RuleCall cEndParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//// stateset 
		//statesetDeclaration:
		//	"stateset" name=ID "{" states+=stateDeclaration coma states+=stateDeclaration (coma states+=stateDeclaration)* "}" "="
		//	init=[stateDeclaration] begin transitions+=transitionDeclaration* end;
		public ParserRule getRule() { return rule; }

		//"stateset" name=ID "{" states+=stateDeclaration coma states+=stateDeclaration (coma states+=stateDeclaration)* "}" "="
		//init=[stateDeclaration] begin transitions+=transitionDeclaration* end
		public Group getGroup() { return cGroup; }

		//"stateset"
		public Keyword getStatesetKeyword_0() { return cStatesetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//states+=stateDeclaration
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//stateDeclaration
		public RuleCall getStatesStateDeclarationParserRuleCall_3_0() { return cStatesStateDeclarationParserRuleCall_3_0; }

		//coma
		public RuleCall getComaParserRuleCall_4() { return cComaParserRuleCall_4; }

		//states+=stateDeclaration
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }

		//stateDeclaration
		public RuleCall getStatesStateDeclarationParserRuleCall_5_0() { return cStatesStateDeclarationParserRuleCall_5_0; }

		//(coma states+=stateDeclaration)*
		public Group getGroup_6() { return cGroup_6; }

		//coma
		public RuleCall getComaParserRuleCall_6_0() { return cComaParserRuleCall_6_0; }

		//states+=stateDeclaration
		public Assignment getStatesAssignment_6_1() { return cStatesAssignment_6_1; }

		//stateDeclaration
		public RuleCall getStatesStateDeclarationParserRuleCall_6_1_0() { return cStatesStateDeclarationParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//init=[stateDeclaration]
		public Assignment getInitAssignment_9() { return cInitAssignment_9; }

		//[stateDeclaration]
		public CrossReference getInitStateDeclarationCrossReference_9_0() { return cInitStateDeclarationCrossReference_9_0; }

		//ID
		public RuleCall getInitStateDeclarationIDTerminalRuleCall_9_0_1() { return cInitStateDeclarationIDTerminalRuleCall_9_0_1; }

		//begin
		public RuleCall getBeginParserRuleCall_10() { return cBeginParserRuleCall_10; }

		//transitions+=transitionDeclaration*
		public Assignment getTransitionsAssignment_11() { return cTransitionsAssignment_11; }

		//transitionDeclaration
		public RuleCall getTransitionsTransitionDeclarationParserRuleCall_11_0() { return cTransitionsTransitionDeclarationParserRuleCall_11_0; }

		//end
		public RuleCall getEndParserRuleCall_12() { return cEndParserRuleCall_12; }
	}

	public class StateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stateDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////
		//stateDeclaration:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TransitionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "transitionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromIDTerminalRuleCall_2_0 = (RuleCall)cFromAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToIDTerminalRuleCall_4_0 = (RuleCall)cToAssignment_4.eContents().get(0);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEvtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEvtIDTerminalRuleCall_6_0 = (RuleCall)cEvtAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cRaiseAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cRaiseRaiseKeyword_7_0_0 = (Keyword)cRaiseAssignment_7_0.eContents().get(0);
		private final Assignment cSigAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSigIDTerminalRuleCall_7_1_0 = (RuleCall)cSigAssignment_7_1.eContents().get(0);
		
		//// Transition
		//transitionDeclaration:
		//	"transition" "from" from=ID "to" to=ID "on" evt=ID (raise?="raise" sig=ID)?;
		public ParserRule getRule() { return rule; }

		//"transition" "from" from=ID "to" to=ID "on" evt=ID (raise?="raise" sig=ID)?
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//from=ID
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }

		//ID
		public RuleCall getFromIDTerminalRuleCall_2_0() { return cFromIDTerminalRuleCall_2_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//to=ID
		public Assignment getToAssignment_4() { return cToAssignment_4; }

		//ID
		public RuleCall getToIDTerminalRuleCall_4_0() { return cToIDTerminalRuleCall_4_0; }

		//"on"
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }

		//evt=ID
		public Assignment getEvtAssignment_6() { return cEvtAssignment_6; }

		//ID
		public RuleCall getEvtIDTerminalRuleCall_6_0() { return cEvtIDTerminalRuleCall_6_0; }

		//(raise?="raise" sig=ID)?
		public Group getGroup_7() { return cGroup_7; }

		//raise?="raise"
		public Assignment getRaiseAssignment_7_0() { return cRaiseAssignment_7_0; }

		//"raise"
		public Keyword getRaiseRaiseKeyword_7_0_0() { return cRaiseRaiseKeyword_7_0_0; }

		//sig=ID
		public Assignment getSigAssignment_7_1() { return cSigAssignment_7_1; }

		//ID
		public RuleCall getSigIDTerminalRuleCall_7_1_0() { return cSigIDTerminalRuleCall_7_1_0; }
	}

	public class InstanceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "instanceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeNamePrototypeDeclarationCrossReference_1_0 = (CrossReference)cTypeNameAssignment_1.eContents().get(0);
		private final RuleCall cTypeNamePrototypeDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeNamePrototypeDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cINHIBITKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// instance
		//instanceDeclaration:
		//	"instance" typeName=[prototypeDeclaration] "[]"? name=ID "INHIBIT"?;
		public ParserRule getRule() { return rule; }

		//"instance" typeName=[prototypeDeclaration] "[]"? name=ID "INHIBIT"?
		public Group getGroup() { return cGroup; }

		//"instance"
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//typeName=[prototypeDeclaration]
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//[prototypeDeclaration]
		public CrossReference getTypeNamePrototypeDeclarationCrossReference_1_0() { return cTypeNamePrototypeDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getTypeNamePrototypeDeclarationIDTerminalRuleCall_1_0_1() { return cTypeNamePrototypeDeclarationIDTerminalRuleCall_1_0_1; }

		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2() { return cLeftSquareBracketRightSquareBracketKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"INHIBIT"?
		public Keyword getINHIBITKeyword_4() { return cINHIBITKeyword_4; }
	}

	public class InteractionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cWwhenAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cWwhenWhenKeyword_0_0_0 = (Keyword)cWwhenAssignment_0_0.eContents().get(0);
		private final RuleCall cOpenParParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cStatesetAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStatesetIDTerminalRuleCall_0_2_0 = (RuleCall)cStatesetAssignment_0_2.eContents().get(0);
		private final Keyword cColonColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cWstateAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cWstateIDTerminalRuleCall_0_4_0 = (RuleCall)cWstateAssignment_0_4.eContents().get(0);
		private final RuleCall cCloseParParserRuleCall_0_5 = (RuleCall)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIifAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIifIfKeyword_1_0_0 = (Keyword)cIifAssignment_1_0.eContents().get(0);
		private final RuleCall cOpenParParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cEventAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEventIDTerminalRuleCall_1_2_0 = (RuleCall)cEventAssignment_1_2.eContents().get(0);
		private final RuleCall cCloseParParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cBeginParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIcallsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIcallsInteractionCallParserRuleCall_3_0 = (RuleCall)cIcallsAssignment_3.eContents().get(0);
		private final Keyword cINHIBITKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// interaction
		//interactionDeclaration:
		//	(wwhen?="when" openPar stateset=ID "::" wstate=ID closePar)? (iif?="if" openPar event=ID closePar)? begin
		//	icalls+=interactionCall+ "INHIBIT"? end;
		public ParserRule getRule() { return rule; }

		//(wwhen?="when" openPar stateset=ID "::" wstate=ID closePar)? (iif?="if" openPar event=ID closePar)? begin
		//icalls+=interactionCall+ "INHIBIT"? end
		public Group getGroup() { return cGroup; }

		//(wwhen?="when" openPar stateset=ID "::" wstate=ID closePar)?
		public Group getGroup_0() { return cGroup_0; }

		//wwhen?="when"
		public Assignment getWwhenAssignment_0_0() { return cWwhenAssignment_0_0; }

		//"when"
		public Keyword getWwhenWhenKeyword_0_0_0() { return cWwhenWhenKeyword_0_0_0; }

		//openPar
		public RuleCall getOpenParParserRuleCall_0_1() { return cOpenParParserRuleCall_0_1; }

		//stateset=ID
		public Assignment getStatesetAssignment_0_2() { return cStatesetAssignment_0_2; }

		//ID
		public RuleCall getStatesetIDTerminalRuleCall_0_2_0() { return cStatesetIDTerminalRuleCall_0_2_0; }

		//"::"
		public Keyword getColonColonKeyword_0_3() { return cColonColonKeyword_0_3; }

		//wstate=ID
		public Assignment getWstateAssignment_0_4() { return cWstateAssignment_0_4; }

		//ID
		public RuleCall getWstateIDTerminalRuleCall_0_4_0() { return cWstateIDTerminalRuleCall_0_4_0; }

		//closePar
		public RuleCall getCloseParParserRuleCall_0_5() { return cCloseParParserRuleCall_0_5; }

		//(iif?="if" openPar event=ID closePar)?
		public Group getGroup_1() { return cGroup_1; }

		//iif?="if"
		public Assignment getIifAssignment_1_0() { return cIifAssignment_1_0; }

		//"if"
		public Keyword getIifIfKeyword_1_0_0() { return cIifIfKeyword_1_0_0; }

		//openPar
		public RuleCall getOpenParParserRuleCall_1_1() { return cOpenParParserRuleCall_1_1; }

		//event=ID
		public Assignment getEventAssignment_1_2() { return cEventAssignment_1_2; }

		//ID
		public RuleCall getEventIDTerminalRuleCall_1_2_0() { return cEventIDTerminalRuleCall_1_2_0; }

		//closePar
		public RuleCall getCloseParParserRuleCall_1_3() { return cCloseParParserRuleCall_1_3; }

		//begin
		public RuleCall getBeginParserRuleCall_2() { return cBeginParserRuleCall_2; }

		//icalls+=interactionCall+
		public Assignment getIcallsAssignment_3() { return cIcallsAssignment_3; }

		//interactionCall
		public RuleCall getIcallsInteractionCallParserRuleCall_3_0() { return cIcallsInteractionCallParserRuleCall_3_0; }

		//"INHIBIT"?
		public Keyword getINHIBITKeyword_4() { return cINHIBITKeyword_4; }

		//end
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
	}

	public class InteractionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFctNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFctNameFuncProcCrossReference_1_0 = (CrossReference)cFctNameAssignment_1.eContents().get(0);
		private final RuleCall cFctNameFuncProcIDTerminalRuleCall_1_0_1 = (RuleCall)cFctNameFuncProcCrossReference_1_0.eContents().get(1);
		private final RuleCall cOpenParParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsFargParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cComaParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsFargParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cCloseParParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////
		//interactionCall:
		//	"interaction" fctName=[FuncProc] openPar (arguments+=farg (coma arguments+=farg)*)? closePar;
		public ParserRule getRule() { return rule; }

		//"interaction" fctName=[FuncProc] openPar (arguments+=farg (coma arguments+=farg)*)? closePar
		public Group getGroup() { return cGroup; }

		//"interaction"
		public Keyword getInteractionKeyword_0() { return cInteractionKeyword_0; }

		//fctName=[FuncProc]
		public Assignment getFctNameAssignment_1() { return cFctNameAssignment_1; }

		//[FuncProc]
		public CrossReference getFctNameFuncProcCrossReference_1_0() { return cFctNameFuncProcCrossReference_1_0; }

		//ID
		public RuleCall getFctNameFuncProcIDTerminalRuleCall_1_0_1() { return cFctNameFuncProcIDTerminalRuleCall_1_0_1; }

		//openPar
		public RuleCall getOpenParParserRuleCall_2() { return cOpenParParserRuleCall_2; }

		//(arguments+=farg (coma arguments+=farg)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=farg
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//farg
		public RuleCall getArgumentsFargParserRuleCall_3_0_0() { return cArgumentsFargParserRuleCall_3_0_0; }

		//(coma arguments+=farg)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//coma
		public RuleCall getComaParserRuleCall_3_1_0() { return cComaParserRuleCall_3_1_0; }

		//arguments+=farg
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//farg
		public RuleCall getArgumentsFargParserRuleCall_3_1_1_0() { return cArgumentsFargParserRuleCall_3_1_1_0; }

		//closePar
		public RuleCall getCloseParParserRuleCall_4() { return cCloseParParserRuleCall_4; }
	}

	public class FargElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "farg");
		private final Assignment cVarNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_0 = (RuleCall)cVarNameAssignment.eContents().get(0);
		
		//// function parameter declaration
		//farg:
		//	varName=ID;
		public ParserRule getRule() { return rule; }

		//varName=ID
		public Assignment getVarNameAssignment() { return cVarNameAssignment; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0() { return cVarNameIDTerminalRuleCall_0; }
	}

	public class ReferenceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "referenceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeNameDataTypeCrossReference_2_0 = (CrossReference)cTypeNameAssignment_2.eContents().get(0);
		private final RuleCall cTypeNameDataTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeNameDataTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpwayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpwayAtParserRuleCall_4_0 = (RuleCall)cUpwayAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameQualifiedNameParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAliasAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_6_1_0 = (RuleCall)cAliasAssignment_6_1.eContents().get(0);
		
		//// parameter
		//referenceDeclaration:
		//	"reference" "<" typeName=[DataType] ">" upway?=at? name=qualifiedName ("as" alias=ID)?;
		public ParserRule getRule() { return rule; }

		//"reference" "<" typeName=[DataType] ">" upway?=at? name=qualifiedName ("as" alias=ID)?
		public Group getGroup() { return cGroup; }

		//"reference"
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//typeName=[DataType]
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }

		//[DataType]
		public CrossReference getTypeNameDataTypeCrossReference_2_0() { return cTypeNameDataTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeNameDataTypeIDTerminalRuleCall_2_0_1() { return cTypeNameDataTypeIDTerminalRuleCall_2_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//upway?=at?
		public Assignment getUpwayAssignment_4() { return cUpwayAssignment_4; }

		//at
		public RuleCall getUpwayAtParserRuleCall_4_0() { return cUpwayAtParserRuleCall_4_0; }

		//name=qualifiedName
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//qualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_5_0() { return cNameQualifiedNameParserRuleCall_5_0; }

		//("as" alias=ID)?
		public Group getGroup_6() { return cGroup_6; }

		//"as"
		public Keyword getAsKeyword_6_0() { return cAsKeyword_6_0; }

		//alias=ID
		public Assignment getAliasAssignment_6_1() { return cAliasAssignment_6_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_6_1_0() { return cAliasIDTerminalRuleCall_6_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "qualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDotParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//qualifiedName:
		//	name+=ID (dot name+=ID)*;
		public ParserRule getRule() { return rule; }

		//name+=ID (dot name+=ID)*
		public Group getGroup() { return cGroup; }

		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(dot name+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//dot
		public RuleCall getDotParserRuleCall_1_0() { return cDotParserRuleCall_1_0; }

		//name+=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class WrapperDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wrapperDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrapperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBeginParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLinkLibraryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBeginAccParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cLinkAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLinkSTRINGTerminalRuleCall_5_0 = (RuleCall)cLinkAssignment_5.eContents().get(0);
		private final RuleCall cEndAccParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cImplementsFunctionsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cBeginAccParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cFunctionsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cFunctionsIDTerminalRuleCall_9_0_0 = (RuleCall)cFunctionsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final RuleCall cComaParserRuleCall_9_1_0 = (RuleCall)cGroup_9_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cFunctionsIDTerminalRuleCall_9_1_1_0 = (RuleCall)cFunctionsAssignment_9_1_1.eContents().get(0);
		private final RuleCall cEndAccParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Keyword cExternalObjectsKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cBeginAccParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Assignment cObjectsAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final RuleCall cObjectsIDTerminalRuleCall_13_0_0 = (RuleCall)cObjectsAssignment_13_0.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final RuleCall cComaParserRuleCall_13_1_0 = (RuleCall)cGroup_13_1.eContents().get(0);
		private final Assignment cObjectsAssignment_13_1_1 = (Assignment)cGroup_13_1.eContents().get(1);
		private final RuleCall cObjectsIDTerminalRuleCall_13_1_1_0 = (RuleCall)cObjectsAssignment_13_1_1.eContents().get(0);
		private final RuleCall cEndAccParserRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final Keyword cExternalLibrariesKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final RuleCall cBeginAccParserRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Assignment cLibrariesAssignment_17_0 = (Assignment)cGroup_17.eContents().get(0);
		private final RuleCall cLibrariesSTRINGTerminalRuleCall_17_0_0 = (RuleCall)cLibrariesAssignment_17_0.eContents().get(0);
		private final Group cGroup_17_1 = (Group)cGroup_17.eContents().get(1);
		private final RuleCall cComaParserRuleCall_17_1_0 = (RuleCall)cGroup_17_1.eContents().get(0);
		private final Assignment cLibrariesAssignment_17_1_1 = (Assignment)cGroup_17_1.eContents().get(1);
		private final RuleCall cLibrariesSTRINGTerminalRuleCall_17_1_1_0 = (RuleCall)cLibrariesAssignment_17_1_1.eContents().get(0);
		private final RuleCall cEndAccParserRuleCall_18 = (RuleCall)cGroup.eContents().get(18);
		private final Keyword cTestAppsKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final RuleCall cBeginAccParserRuleCall_20 = (RuleCall)cGroup.eContents().get(20);
		private final Group cGroup_21 = (Group)cGroup.eContents().get(21);
		private final Assignment cTestsAssignment_21_0 = (Assignment)cGroup_21.eContents().get(0);
		private final RuleCall cTestsIDTerminalRuleCall_21_0_0 = (RuleCall)cTestsAssignment_21_0.eContents().get(0);
		private final Group cGroup_21_1 = (Group)cGroup_21.eContents().get(1);
		private final RuleCall cComaParserRuleCall_21_1_0 = (RuleCall)cGroup_21_1.eContents().get(0);
		private final Assignment cTestsAssignment_21_1_1 = (Assignment)cGroup_21_1.eContents().get(1);
		private final RuleCall cTestsIDTerminalRuleCall_21_1_1_0 = (RuleCall)cTestsAssignment_21_1_1.eContents().get(0);
		private final RuleCall cEndAccParserRuleCall_22 = (RuleCall)cGroup.eContents().get(22);
		private final RuleCall cEndParserRuleCall_23 = (RuleCall)cGroup.eContents().get(23);
		
		//// parameter
		////Declaration :
		////	'alias' '<' the_typeName=[DataType|ID] '>' name=[parameterDeclaration|ID] ':' varName=ID "->" attrName=ID  
		////;accessor
		//wrapperDeclaration:
		//	"wrapper" name=ID begin "link-library" beginAcc link=STRING endAcc "implements-functions" beginAcc (functions+=ID
		//	(coma functions+=ID)*)? endAcc "external-objects" beginAcc (objects+=ID (coma objects+=ID)*)? endAcc
		//	"external-libraries" beginAcc (libraries+=STRING (coma libraries+=STRING)*)? endAcc "test-apps" beginAcc (tests+=ID
		//	(coma tests+=ID)*)? endAcc end;
		public ParserRule getRule() { return rule; }

		//"wrapper" name=ID begin "link-library" beginAcc link=STRING endAcc "implements-functions" beginAcc (functions+=ID (coma
		//functions+=ID)*)? endAcc "external-objects" beginAcc (objects+=ID (coma objects+=ID)*)? endAcc "external-libraries"
		//beginAcc (libraries+=STRING (coma libraries+=STRING)*)? endAcc "test-apps" beginAcc (tests+=ID (coma tests+=ID)*)?
		//endAcc end
		public Group getGroup() { return cGroup; }

		//"wrapper"
		public Keyword getWrapperKeyword_0() { return cWrapperKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//begin
		public RuleCall getBeginParserRuleCall_2() { return cBeginParserRuleCall_2; }

		//"link-library"
		public Keyword getLinkLibraryKeyword_3() { return cLinkLibraryKeyword_3; }

		//beginAcc
		public RuleCall getBeginAccParserRuleCall_4() { return cBeginAccParserRuleCall_4; }

		//link=STRING
		public Assignment getLinkAssignment_5() { return cLinkAssignment_5; }

		//STRING
		public RuleCall getLinkSTRINGTerminalRuleCall_5_0() { return cLinkSTRINGTerminalRuleCall_5_0; }

		//endAcc
		public RuleCall getEndAccParserRuleCall_6() { return cEndAccParserRuleCall_6; }

		//"implements-functions"
		public Keyword getImplementsFunctionsKeyword_7() { return cImplementsFunctionsKeyword_7; }

		//beginAcc
		public RuleCall getBeginAccParserRuleCall_8() { return cBeginAccParserRuleCall_8; }

		//(functions+=ID (coma functions+=ID)*)?
		public Group getGroup_9() { return cGroup_9; }

		//functions+=ID
		public Assignment getFunctionsAssignment_9_0() { return cFunctionsAssignment_9_0; }

		//ID
		public RuleCall getFunctionsIDTerminalRuleCall_9_0_0() { return cFunctionsIDTerminalRuleCall_9_0_0; }

		//(coma functions+=ID)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//coma
		public RuleCall getComaParserRuleCall_9_1_0() { return cComaParserRuleCall_9_1_0; }

		//functions+=ID
		public Assignment getFunctionsAssignment_9_1_1() { return cFunctionsAssignment_9_1_1; }

		//ID
		public RuleCall getFunctionsIDTerminalRuleCall_9_1_1_0() { return cFunctionsIDTerminalRuleCall_9_1_1_0; }

		//endAcc
		public RuleCall getEndAccParserRuleCall_10() { return cEndAccParserRuleCall_10; }

		//"external-objects"
		public Keyword getExternalObjectsKeyword_11() { return cExternalObjectsKeyword_11; }

		//beginAcc
		public RuleCall getBeginAccParserRuleCall_12() { return cBeginAccParserRuleCall_12; }

		//(objects+=ID (coma objects+=ID)*)?
		public Group getGroup_13() { return cGroup_13; }

		//objects+=ID
		public Assignment getObjectsAssignment_13_0() { return cObjectsAssignment_13_0; }

		//ID
		public RuleCall getObjectsIDTerminalRuleCall_13_0_0() { return cObjectsIDTerminalRuleCall_13_0_0; }

		//(coma objects+=ID)*
		public Group getGroup_13_1() { return cGroup_13_1; }

		//coma
		public RuleCall getComaParserRuleCall_13_1_0() { return cComaParserRuleCall_13_1_0; }

		//objects+=ID
		public Assignment getObjectsAssignment_13_1_1() { return cObjectsAssignment_13_1_1; }

		//ID
		public RuleCall getObjectsIDTerminalRuleCall_13_1_1_0() { return cObjectsIDTerminalRuleCall_13_1_1_0; }

		//endAcc
		public RuleCall getEndAccParserRuleCall_14() { return cEndAccParserRuleCall_14; }

		//"external-libraries"
		public Keyword getExternalLibrariesKeyword_15() { return cExternalLibrariesKeyword_15; }

		//beginAcc
		public RuleCall getBeginAccParserRuleCall_16() { return cBeginAccParserRuleCall_16; }

		//(libraries+=STRING (coma libraries+=STRING)*)?
		public Group getGroup_17() { return cGroup_17; }

		//libraries+=STRING
		public Assignment getLibrariesAssignment_17_0() { return cLibrariesAssignment_17_0; }

		//STRING
		public RuleCall getLibrariesSTRINGTerminalRuleCall_17_0_0() { return cLibrariesSTRINGTerminalRuleCall_17_0_0; }

		//(coma libraries+=STRING)*
		public Group getGroup_17_1() { return cGroup_17_1; }

		//coma
		public RuleCall getComaParserRuleCall_17_1_0() { return cComaParserRuleCall_17_1_0; }

		//libraries+=STRING
		public Assignment getLibrariesAssignment_17_1_1() { return cLibrariesAssignment_17_1_1; }

		//STRING
		public RuleCall getLibrariesSTRINGTerminalRuleCall_17_1_1_0() { return cLibrariesSTRINGTerminalRuleCall_17_1_1_0; }

		//endAcc
		public RuleCall getEndAccParserRuleCall_18() { return cEndAccParserRuleCall_18; }

		//"test-apps"
		public Keyword getTestAppsKeyword_19() { return cTestAppsKeyword_19; }

		//beginAcc
		public RuleCall getBeginAccParserRuleCall_20() { return cBeginAccParserRuleCall_20; }

		//(tests+=ID (coma tests+=ID)*)?
		public Group getGroup_21() { return cGroup_21; }

		//tests+=ID
		public Assignment getTestsAssignment_21_0() { return cTestsAssignment_21_0; }

		//ID
		public RuleCall getTestsIDTerminalRuleCall_21_0_0() { return cTestsIDTerminalRuleCall_21_0_0; }

		//(coma tests+=ID)*
		public Group getGroup_21_1() { return cGroup_21_1; }

		//coma
		public RuleCall getComaParserRuleCall_21_1_0() { return cComaParserRuleCall_21_1_0; }

		//tests+=ID
		public Assignment getTestsAssignment_21_1_1() { return cTestsAssignment_21_1_1; }

		//ID
		public RuleCall getTestsIDTerminalRuleCall_21_1_1_0() { return cTestsIDTerminalRuleCall_21_1_1_0; }

		//endAcc
		public RuleCall getEndAccParserRuleCall_22() { return cEndAccParserRuleCall_22; }

		//end
		public RuleCall getEndParserRuleCall_23() { return cEndParserRuleCall_23; }
	}

	public class BeginAccElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "beginAcc");
		private final Keyword cLeftCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		////
		//beginAcc:
		//	"{";
		public ParserRule getRule() { return rule; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword() { return cLeftCurlyBracketKeyword; }
	}

	public class EndAccElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "endAcc");
		private final Keyword cRightCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//endAcc:
		//	"}";
		public ParserRule getRule() { return rule; }

		//"}"
		public Keyword getRightCurlyBracketKeyword() { return cRightCurlyBracketKeyword; }
	}

	public class BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "begin");
		private final Keyword cBeginKeyword = (Keyword)rule.eContents().get(1);
		
		//begin:
		//	"begin";
		public ParserRule getRule() { return rule; }

		//"begin"
		public Keyword getBeginKeyword() { return cBeginKeyword; }
	}

	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "end");
		private final Keyword cEndKeyword = (Keyword)rule.eContents().get(1);
		
		//end:
		//	"end";
		public ParserRule getRule() { return rule; }

		//"end"
		public Keyword getEndKeyword() { return cEndKeyword; }
	}

	public class OpenParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "openPar");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//openPar:
		//	"(";
		public ParserRule getRule() { return rule; }

		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}

	public class CloseParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "closePar");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//closePar:
		//	")";
		public ParserRule getRule() { return rule; }

		//")"
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}

	public class AtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at");
		private final Keyword cCommercialAtKeyword = (Keyword)rule.eContents().get(1);
		
		//at:
		//	"@";
		public ParserRule getRule() { return rule; }

		//"@"
		public Keyword getCommercialAtKeyword() { return cCommercialAtKeyword; }
	}

	public class DotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dot");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//dot:
		//	".";
		public ParserRule getRule() { return rule; }

		//"."
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}

	public class ComaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "coma");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//coma:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}
	
	
	private ProjectElements pProject;
	private ImportElements pImport;
	private LanguageDeclarationElements pLanguageDeclaration;
	private DataTypeElements pDataType;
	private DefineTypeElements pDefineType;
	private ValidityFunctionDeclarationElements pValidityFunctionDeclaration;
	private BasicTypeElements pBasicType;
	private IncludeDeclElements pIncludeDecl;
	private LanguageDeclElements pLanguageDecl;
	private LexicalCastDeclElements pLexicalCastDecl;
	private ArrayTypeElements pArrayType;
	private VectorTypeElements pVectorType;
	private MapTypeElements pMapType;
	private StructTypeElements pStructType;
	private StructElementElements pStructElement;
	private IndexElements pIndex;
	private UnionTypeElements pUnionType;
	private FuncProcElements pFuncProc;
	private FunctionDeclarationElements pFunctionDeclaration;
	private ArgumentsDeclarationElements pArgumentsDeclaration;
	private ArgElements pArg;
	private ProcessingDeclarationElements pProcessingDeclaration;
	private StatementElements pStatement;
	private LocalParameterDeclarationElements pLocalParameterDeclaration;
	private LocalEventDeclarationElements pLocalEventDeclaration;
	private IfblockElements pIfblock;
	private WhileblockElements pWhileblock;
	private FunctionCallElements pFunctionCall;
	private PrototypeDeclarationElements pPrototypeDeclaration;
	private ArchitectureElementElements pArchitectureElement;
	private SignalDeclarationElements pSignalDeclaration;
	private EventDeclarationElements pEventDeclaration;
	private EventConditionElements pEventCondition;
	private ParameterDeclarationElements pParameterDeclaration;
	private StatesetDeclarationElements pStatesetDeclaration;
	private StateDeclarationElements pStateDeclaration;
	private TransitionDeclarationElements pTransitionDeclaration;
	private InstanceDeclarationElements pInstanceDeclaration;
	private InteractionDeclarationElements pInteractionDeclaration;
	private InteractionCallElements pInteractionCall;
	private FargElements pFarg;
	private ReferenceDeclarationElements pReferenceDeclaration;
	private QualifiedNameElements pQualifiedName;
	private WrapperDeclarationElements pWrapperDeclaration;
	private BeginAccElements pBeginAcc;
	private EndAccElements pEndAcc;
	private BeginElements pBegin;
	private EndElements pEnd;
	private OpenParElements pOpenPar;
	private CloseParElements pClosePar;
	private AtElements pAt;
	private DotElements pDot;
	private ComaElements pComa;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AthenaDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.AthenaDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//////////////////////////////////////////////////////////////////////////////////////////
	///// Projet complet
	//////////////////////////////////////////////////////////////////////////////////////////
	//Project:
	//	imports+=Import* languages+=LanguageDeclaration* types+=DataType* validities+=validityFunctionDeclaration*
	//	imports+=Import* functions+=functionDeclaration* imports+=Import* processings+=ProcessingDeclaration* imports+=Import*
	//	prototypes+=prototypeDeclaration* imports+=Import* wrappers+=wrapperDeclaration*;
	public ProjectElements getProjectAccess() {
		return (pProject != null) ? pProject : (pProject = new ProjectElements());
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}

	////
	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	///// LANGAGES ET TYPES DE DONNEES
	//////////////////////////////////////////////////////////////////////////////////////////
	//// Declaration d'un langage
	//LanguageDeclaration:
	//	"language" name=ID;
	public LanguageDeclarationElements getLanguageDeclarationAccess() {
		return (pLanguageDeclaration != null) ? pLanguageDeclaration : (pLanguageDeclaration = new LanguageDeclarationElements());
	}
	
	public ParserRule getLanguageDeclarationRule() {
		return getLanguageDeclarationAccess().getRule();
	}

	//// DataTypes
	//DataType:
	//	basicType | defineType | arrayType | vectorType | mapType | structType | unionType;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//// Define
	//defineType:
	//	"define" name=ID "is" typename=[DataType];
	public DefineTypeElements getDefineTypeAccess() {
		return (pDefineType != null) ? pDefineType : (pDefineType = new DefineTypeElements());
	}
	
	public ParserRule getDefineTypeRule() {
		return getDefineTypeAccess().getRule();
	}

	//// Validity function Declaration
	//validityFunctionDeclaration:
	//	"validity" typename=[DataType] fctName=ID;
	public ValidityFunctionDeclarationElements getValidityFunctionDeclarationAccess() {
		return (pValidityFunctionDeclaration != null) ? pValidityFunctionDeclaration : (pValidityFunctionDeclaration = new ValidityFunctionDeclarationElements());
	}
	
	public ParserRule getValidityFunctionDeclarationRule() {
		return getValidityFunctionDeclarationAccess().getRule();
	}

	//// Basic Type declaration
	//basicType:
	//	"basic" name=ID begin includes+=includeDecl* languages+=languageDecl+ casts+=lexicalCastDecl* end;
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//// Include Declaration for Basic Types
	//includeDecl:
	//	"include" lang=[LanguageDeclaration] ":" includeName=STRING;
	public IncludeDeclElements getIncludeDeclAccess() {
		return (pIncludeDecl != null) ? pIncludeDecl : (pIncludeDecl = new IncludeDeclElements());
	}
	
	public ParserRule getIncludeDeclRule() {
		return getIncludeDeclAccess().getRule();
	}

	//// Language Declaration for Basic Types
	//languageDecl:
	//	"language" lang=[LanguageDeclaration] ":" trans=STRING "=" value=STRING;
	public LanguageDeclElements getLanguageDeclAccess() {
		return (pLanguageDecl != null) ? pLanguageDecl : (pLanguageDecl = new LanguageDeclElements());
	}
	
	public ParserRule getLanguageDeclRule() {
		return getLanguageDeclAccess().getRule();
	}

	//// Lexical cast declaration
	//lexicalCastDecl:
	//	"lexicalCast" lang=[LanguageDeclaration] ":" cast=STRING;
	public LexicalCastDeclElements getLexicalCastDeclAccess() {
		return (pLexicalCastDecl != null) ? pLexicalCastDecl : (pLexicalCastDecl = new LexicalCastDeclElements());
	}
	
	public ParserRule getLexicalCastDeclRule() {
		return getLexicalCastDeclAccess().getRule();
	}

	//// Array Parameter Declaration
	//arrayType:
	//	"array" "<" typename=[DataType] ">" name=ID "[" indices+=index (coma indices+=index)* "]";
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//// Vector Parameter Declaration
	//vectorType:
	//	"vector" "<" typename=[DataType] ">" name=ID;
	public VectorTypeElements getVectorTypeAccess() {
		return (pVectorType != null) ? pVectorType : (pVectorType = new VectorTypeElements());
	}
	
	public ParserRule getVectorTypeRule() {
		return getVectorTypeAccess().getRule();
	}

	//// Map Parameter Declaration
	//mapType:
	//	"map" "<" keytype=[DataType] coma valtype=[DataType] ">" name=ID;
	public MapTypeElements getMapTypeAccess() {
		return (pMapType != null) ? pMapType : (pMapType = new MapTypeElements());
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}

	//// Structured Type
	//structType:
	//	"struct" name=ID ("<" indices+=index (coma indices+=index)* ">")? begin parameters+=structElement+ end;
	public StructTypeElements getStructTypeAccess() {
		return (pStructType != null) ? pStructType : (pStructType = new StructTypeElements());
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}

	//// Simple Parameter Declaration
	//structElement:
	//	typename=[DataType] ("<" indices+=index (coma indices+=index)* ">")? name=ID (hasInitValue?="=" initValue=STRING)?;
	public StructElementElements getStructElementAccess() {
		return (pStructElement != null) ? pStructElement : (pStructElement = new StructElementElements());
	}
	
	public ParserRule getStructElementRule() {
		return getStructElementAccess().getRule();
	}

	//index:
	//	dim=ID (hasValue?="=" value=INT)?;
	public IndexElements getIndexAccess() {
		return (pIndex != null) ? pIndex : (pIndex = new IndexElements());
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}

	//// Structured Type
	//unionType:
	//	"union" name=ID begin elements+=[DataType] (coma elements+=[DataType])+ end;
	public UnionTypeElements getUnionTypeAccess() {
		return (pUnionType != null) ? pUnionType : (pUnionType = new UnionTypeElements());
	}
	
	public ParserRule getUnionTypeRule() {
		return getUnionTypeAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	///// DECLARATION DE FONCTIONS
	//////////////////////////////////////////////////////////////////////////////////////////
	//FuncProc:
	//	functionDeclaration | ProcessingDeclaration;
	public FuncProcElements getFuncProcAccess() {
		return (pFuncProc != null) ? pFuncProc : (pFuncProc = new FuncProcElements());
	}
	
	public ParserRule getFuncProcRule() {
		return getFuncProcAccess().getRule();
	}

	//// function
	//functionDeclaration:
	//	"function" name=ID "<" lang=[LanguageDeclaration] ">" openPar args=argumentsDeclaration? closePar;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//argumentsDeclaration:
	//	arguments+=arg arguments+=arg*;
	public ArgumentsDeclarationElements getArgumentsDeclarationAccess() {
		return (pArgumentsDeclaration != null) ? pArgumentsDeclaration : (pArgumentsDeclaration = new ArgumentsDeclarationElements());
	}
	
	public ParserRule getArgumentsDeclarationRule() {
		return getArgumentsDeclarationAccess().getRule();
	}

	//// function parameter declaration
	//arg:
	//	modifier=("inout" | "in" | "out") type=[DataType] name=ID?;
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	///// TRAITEMENTS
	//////////////////////////////////////////////////////////////////////////////////////////
	//// processing
	//ProcessingDeclaration:
	//	"processing" name=ID openPar args=argumentsDeclaration? closePar begin localParameters+=localParameterDeclaration*
	//	localEvents+=localEventDeclaration* statements+=statement* end;
	public ProcessingDeclarationElements getProcessingDeclarationAccess() {
		return (pProcessingDeclaration != null) ? pProcessingDeclaration : (pProcessingDeclaration = new ProcessingDeclarationElements());
	}
	
	public ParserRule getProcessingDeclarationRule() {
		return getProcessingDeclarationAccess().getRule();
	}

	//statement:
	//	call=(functionCall | whileblock | ifblock);
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//// processing local declaration
	//localParameterDeclaration:
	//	"parameter" type=[DataType] name=ID (hasValue?="=" value=STRING)?;
	public LocalParameterDeclarationElements getLocalParameterDeclarationAccess() {
		return (pLocalParameterDeclaration != null) ? pLocalParameterDeclaration : (pLocalParameterDeclaration = new LocalParameterDeclarationElements());
	}
	
	public ParserRule getLocalParameterDeclarationRule() {
		return getLocalParameterDeclarationAccess().getRule();
	}

	//// Event
	//localEventDeclaration:
	//	eventDeclaration;
	public LocalEventDeclarationElements getLocalEventDeclarationAccess() {
		return (pLocalEventDeclaration != null) ? pLocalEventDeclaration : (pLocalEventDeclaration = new LocalEventDeclarationElements());
	}
	
	public ParserRule getLocalEventDeclarationRule() {
		return getLocalEventDeclarationAccess().getRule();
	}

	//// "if then else" block
	//ifblock:
	//	"if" eventName=[localEventDeclaration] "then" begin ifBlocks+=statement+ end (hasElse?="else" begin
	//	elseBlocks+=statement+ end)?;
	public IfblockElements getIfblockAccess() {
		return (pIfblock != null) ? pIfblock : (pIfblock = new IfblockElements());
	}
	
	public ParserRule getIfblockRule() {
		return getIfblockAccess().getRule();
	}

	//// "while evt do ... end" block 
	//whileblock:
	//	"while" eventName=[localEventDeclaration] "do" begin blocks+=statement+ end;
	public WhileblockElements getWhileblockAccess() {
		return (pWhileblock != null) ? pWhileblock : (pWhileblock = new WhileblockElements());
	}
	
	public ParserRule getWhileblockRule() {
		return getWhileblockAccess().getRule();
	}

	//// processing function call
	//functionCall:
	//	"execute" name=[FuncProc] openPar (arguments+=farg (coma arguments+=farg)*)? closePar;
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////////////////
	///// ARCHITECTURE
	//////////////////////////////////////////////////////////////////////////////////////////
	//// prototype
	//prototypeDeclaration:
	//	"prototype" name=ID ("is" superType=[prototypeDeclaration])? begin definitions+=architectureElement* end;
	public PrototypeDeclarationElements getPrototypeDeclarationAccess() {
		return (pPrototypeDeclaration != null) ? pPrototypeDeclaration : (pPrototypeDeclaration = new PrototypeDeclarationElements());
	}
	
	public ParserRule getPrototypeDeclarationRule() {
		return getPrototypeDeclarationAccess().getRule();
	}

	//// Elements pouvant composer un prototype
	//architectureElement:
	//	parameterDeclaration | referenceDeclaration | eventDeclaration | statesetDeclaration | instanceDeclaration |
	//	interactionDeclaration | signalDeclaration;
	public ArchitectureElementElements getArchitectureElementAccess() {
		return (pArchitectureElement != null) ? pArchitectureElement : (pArchitectureElement = new ArchitectureElementElements());
	}
	
	public ParserRule getArchitectureElementRule() {
		return getArchitectureElementAccess().getRule();
	}

	//// Signal
	//signalDeclaration:
	//	"signal" name=ID;
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return (pSignalDeclaration != null) ? pSignalDeclaration : (pSignalDeclaration = new SignalDeclarationElements());
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//// Evenement
	//eventDeclaration:
	//	"event" name=ID "{" conditions+=eventCondition (coma conditions+=eventCondition)* "}";
	public EventDeclarationElements getEventDeclarationAccess() {
		return (pEventDeclaration != null) ? pEventDeclaration : (pEventDeclaration = new EventDeclarationElements());
	}
	
	public ParserRule getEventDeclarationRule() {
		return getEventDeclarationAccess().getRule();
	}

	//// Conditions
	//eventCondition:
	//	leftPart=ID cond=("==" | ">=" | "<=" | "<" | ">" | "%%") (rightPartI=ID | rightPartN=INT | rightPartS=STRING);
	public EventConditionElements getEventConditionAccess() {
		return (pEventCondition != null) ? pEventCondition : (pEventCondition = new EventConditionElements());
	}
	
	public ParserRule getEventConditionRule() {
		return getEventConditionAccess().getRule();
	}

	//// parameter
	//parameterDeclaration:
	//	"parameter" typeName=[DataType] (hasNbW?="#" openPar nbw=INT closePar)? hasInfiniteWriter?="!"? name=ID (hasValue?="="
	//	value=STRING | hasConfig?="=" "<>" | hasConfigWithDefaultValue?="=" "<" value=STRING ">")?;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return (pParameterDeclaration != null) ? pParameterDeclaration : (pParameterDeclaration = new ParameterDeclarationElements());
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//// stateset 
	//statesetDeclaration:
	//	"stateset" name=ID "{" states+=stateDeclaration coma states+=stateDeclaration (coma states+=stateDeclaration)* "}" "="
	//	init=[stateDeclaration] begin transitions+=transitionDeclaration* end;
	public StatesetDeclarationElements getStatesetDeclarationAccess() {
		return (pStatesetDeclaration != null) ? pStatesetDeclaration : (pStatesetDeclaration = new StatesetDeclarationElements());
	}
	
	public ParserRule getStatesetDeclarationRule() {
		return getStatesetDeclarationAccess().getRule();
	}

	////
	//stateDeclaration:
	//	name=ID;
	public StateDeclarationElements getStateDeclarationAccess() {
		return (pStateDeclaration != null) ? pStateDeclaration : (pStateDeclaration = new StateDeclarationElements());
	}
	
	public ParserRule getStateDeclarationRule() {
		return getStateDeclarationAccess().getRule();
	}

	//// Transition
	//transitionDeclaration:
	//	"transition" "from" from=ID "to" to=ID "on" evt=ID (raise?="raise" sig=ID)?;
	public TransitionDeclarationElements getTransitionDeclarationAccess() {
		return (pTransitionDeclaration != null) ? pTransitionDeclaration : (pTransitionDeclaration = new TransitionDeclarationElements());
	}
	
	public ParserRule getTransitionDeclarationRule() {
		return getTransitionDeclarationAccess().getRule();
	}

	//// instance
	//instanceDeclaration:
	//	"instance" typeName=[prototypeDeclaration] "[]"? name=ID "INHIBIT"?;
	public InstanceDeclarationElements getInstanceDeclarationAccess() {
		return (pInstanceDeclaration != null) ? pInstanceDeclaration : (pInstanceDeclaration = new InstanceDeclarationElements());
	}
	
	public ParserRule getInstanceDeclarationRule() {
		return getInstanceDeclarationAccess().getRule();
	}

	//// interaction
	//interactionDeclaration:
	//	(wwhen?="when" openPar stateset=ID "::" wstate=ID closePar)? (iif?="if" openPar event=ID closePar)? begin
	//	icalls+=interactionCall+ "INHIBIT"? end;
	public InteractionDeclarationElements getInteractionDeclarationAccess() {
		return (pInteractionDeclaration != null) ? pInteractionDeclaration : (pInteractionDeclaration = new InteractionDeclarationElements());
	}
	
	public ParserRule getInteractionDeclarationRule() {
		return getInteractionDeclarationAccess().getRule();
	}

	////
	//interactionCall:
	//	"interaction" fctName=[FuncProc] openPar (arguments+=farg (coma arguments+=farg)*)? closePar;
	public InteractionCallElements getInteractionCallAccess() {
		return (pInteractionCall != null) ? pInteractionCall : (pInteractionCall = new InteractionCallElements());
	}
	
	public ParserRule getInteractionCallRule() {
		return getInteractionCallAccess().getRule();
	}

	//// function parameter declaration
	//farg:
	//	varName=ID;
	public FargElements getFargAccess() {
		return (pFarg != null) ? pFarg : (pFarg = new FargElements());
	}
	
	public ParserRule getFargRule() {
		return getFargAccess().getRule();
	}

	//// parameter
	//referenceDeclaration:
	//	"reference" "<" typeName=[DataType] ">" upway?=at? name=qualifiedName ("as" alias=ID)?;
	public ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return (pReferenceDeclaration != null) ? pReferenceDeclaration : (pReferenceDeclaration = new ReferenceDeclarationElements());
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}

	//qualifiedName:
	//	name+=ID (dot name+=ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// parameter
	////Declaration :
	////	'alias' '<' the_typeName=[DataType|ID] '>' name=[parameterDeclaration|ID] ':' varName=ID "->" attrName=ID  
	////;accessor
	//wrapperDeclaration:
	//	"wrapper" name=ID begin "link-library" beginAcc link=STRING endAcc "implements-functions" beginAcc (functions+=ID
	//	(coma functions+=ID)*)? endAcc "external-objects" beginAcc (objects+=ID (coma objects+=ID)*)? endAcc
	//	"external-libraries" beginAcc (libraries+=STRING (coma libraries+=STRING)*)? endAcc "test-apps" beginAcc (tests+=ID
	//	(coma tests+=ID)*)? endAcc end;
	public WrapperDeclarationElements getWrapperDeclarationAccess() {
		return (pWrapperDeclaration != null) ? pWrapperDeclaration : (pWrapperDeclaration = new WrapperDeclarationElements());
	}
	
	public ParserRule getWrapperDeclarationRule() {
		return getWrapperDeclarationAccess().getRule();
	}

	////
	//beginAcc:
	//	"{";
	public BeginAccElements getBeginAccAccess() {
		return (pBeginAcc != null) ? pBeginAcc : (pBeginAcc = new BeginAccElements());
	}
	
	public ParserRule getBeginAccRule() {
		return getBeginAccAccess().getRule();
	}

	//endAcc:
	//	"}";
	public EndAccElements getEndAccAccess() {
		return (pEndAcc != null) ? pEndAcc : (pEndAcc = new EndAccElements());
	}
	
	public ParserRule getEndAccRule() {
		return getEndAccAccess().getRule();
	}

	//begin:
	//	"begin";
	public BeginElements getBeginAccess() {
		return (pBegin != null) ? pBegin : (pBegin = new BeginElements());
	}
	
	public ParserRule getBeginRule() {
		return getBeginAccess().getRule();
	}

	//end:
	//	"end";
	public EndElements getEndAccess() {
		return (pEnd != null) ? pEnd : (pEnd = new EndElements());
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}

	//openPar:
	//	"(";
	public OpenParElements getOpenParAccess() {
		return (pOpenPar != null) ? pOpenPar : (pOpenPar = new OpenParElements());
	}
	
	public ParserRule getOpenParRule() {
		return getOpenParAccess().getRule();
	}

	//closePar:
	//	")";
	public CloseParElements getCloseParAccess() {
		return (pClosePar != null) ? pClosePar : (pClosePar = new CloseParElements());
	}
	
	public ParserRule getCloseParRule() {
		return getCloseParAccess().getRule();
	}

	//at:
	//	"@";
	public AtElements getAtAccess() {
		return (pAt != null) ? pAt : (pAt = new AtElements());
	}
	
	public ParserRule getAtRule() {
		return getAtAccess().getRule();
	}

	//dot:
	//	".";
	public DotElements getDotAccess() {
		return (pDot != null) ? pDot : (pDot = new DotElements());
	}
	
	public ParserRule getDotRule() {
		return getDotAccess().getRule();
	}

	//coma:
	//	",";
	public ComaElements getComaAccess() {
		return (pComa != null) ? pComa : (pComa = new ComaElements());
	}
	
	public ParserRule getComaRule() {
		return getComaAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
