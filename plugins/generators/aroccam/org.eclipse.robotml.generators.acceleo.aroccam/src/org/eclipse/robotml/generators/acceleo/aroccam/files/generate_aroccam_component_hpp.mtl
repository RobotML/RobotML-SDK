[comment encoding = UTF-8 /]
[module generate_aroccam_component_hpp('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::eclipse::proteus::generators::acceleo::mmqueries::ArchitectureQueries /]
[import org::eclipse::proteus::generators::acceleo::mmqueries::DataTypeQueries /]
[import org::eclipse::proteus::generators::acceleo::mmqueries::GeneralQueries /]
[import org::eclipse::proteus::generators::acceleo::mmqueries::FSMQueries /]

[template public generateAroccamComponentHpp(c : Class, root_model : Model)]
[file ('src/' + root_model.name + 'Application/' + c.getStereotype() + '/' + c.name + '/' + c.name + '.hpp', false, 'UTF-8')]
#ifndef __EFFIBOX_[c.name/]_HPP__
#define __EFFIBOX_[c.name/]_HPP__

//effitools
#include <effitools/data/taskbuffer.hpp>

//local includes
#include "Datatypes/all.hpp"

[comment]Includes for subcomponents[/comment]
[if c.isMacroComponent()]
	[for (prop: Property | getLevel1SubComponentsForComponent(c)) before('//includes for subcomponents\n')]
		[let sub_c : Class = prop.type.oclAsType(Class)]
#include "[sub_c.getStereotype()/]/[sub_c.name/]/[sub_c.name/].hpp"
		[/let]
	[/for]
[/if]

[comment]Component declaration[/comment]
class [c.name/]
{
public:
	//constructor
	[c.name/]();

	//evaluate FSM current state
	void evaluateFSMTransitions();

	[comment]Subcomponent declaration[/comment]
	[if c.isMacroComponent()]
		[for (sub_prop: Property | getLevel1SubComponentsForComponent(c)) before('\t//sub-components\n')]
			[if isClass(sub_prop.type)]
	[sub_prop.type.name/] [sub_prop.name/];
			[/if]
		[/for]
	[/if]
	[let elt : Element = c.oclAsType(Element)]
		[comment]Input ports declaration[/comment]
		[for (port : Port | getInputPortsForElement(elt)) before('\t//input ports declaration (events)\n')]
	void [port.name/]([port.type.name/] const& data);
		[/for]
		[comment]Ouput ports declaration[/comment]
		[for (port : Port | getOutputPortsForElement(elt)) before('\t//output ports declaration (pointer on a concrete sub-component output port)\n')]
	effitools::TaskBuffer<[port.type.name/]> * [port.name/];
  		[/for]
	[/let]

	[comment]Operation declaration[/comment]
	[for (op : Operation | c.getAllOperations()) before('\t//operations\n')]
		[if (op.method->size() > 0)]
			[for (m : Behavior | op.method)]
	bool [m.name/]([for( param: Parameter | op.ownedParameter) separator(',')][param.type.name/] [if (param.direction.toString() = 'in')]const[/if]& [param.name/][/for]);
			[/for]
		[else]
	bool [op.name/]([for( param: Parameter | op.ownedParameter) separator(',')][param.type.name/] [if (param.direction.toString() = 'in')]const[/if]& [param.name/][/for]);
		[/if]
	[/for]

	[comment]State Machine[/comment]
[for (sm: StateMachine | c.getStateMachines())]
	//states
	enum [sm.name/]ListOfStates
	{
	[for (state: Vertex | getStates(sm)) before('\t') separator(',\n\t\t')][state.name/][/for]
	};
	[sm.name/]ListOfStates currentStateIn[sm.name/];
[/for]
};

#endif
[/file]
[/template]
