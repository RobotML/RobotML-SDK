[comment encoding = UTF-8 /]
[module main('http://www.eclipse.org/uml2/3.0.0/UML','http://Papyrus/RobotML/1')/]

[import org::eclipse::acceleo::module::OrocosGenerator::mmqueries::MMQueries /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_orocos_component_cpp /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_orocos_component_lua /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_orocos_interface_cpp /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_Datatype_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_config_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_mapping_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_manifest_xml /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_makefile_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_ops_file /]
[import org::eclipse::acceleo::module::OrocosGenerator::main::generate_FSM /]

[template public generateOROCOS(model : Model)] 
[comment @main/]
[comment][generateElement(model)/][/comment]

[comment] 
	Generate Orocos components: 
		- CPP & HPP
		- LUA 
[/comment]
[for (elt: NamedElement | getRobotMLComponentModels(model))]	
	[let c : Class = elt.oclAsType(Class)]
		[if (not isActuator(c)) and (not isSensorSystem(c))]
			[if (hasStateMachine(c))]
				[generateOrocosComponentLua(c, model)/]				
			[else]
				[if(getAllSubComponentsInClass(c) <> null)]
					[generateOrocosComponentCpp(c, model)/]
				[/if]
				[comment]
					[generateOrocosComponentHpp(c, model)/]
					=> Not Subcomponent					
				[/comment]				
			[/if]
		[/if]
	[/let]
[/for]


[comment]

[for (interface : Interface | getProteusInterfaceModels(model))]	
	[generateOrocosInterfaceCpp(interface,model)/]
[/for]
[/comment]

[let rootModel : Model = getRootModel(model)]
	[generateConfigFile(rootModel)/]
	[generateOpsFile(rootModel)/]
	[generate_Datatype_file(rootModel)/]
[/let]
[generateManifestFile(model)/]
[generateMakefile(model)/]

[comment]
For generating xml file	
[generateMappingFile(rootModel)/]
[/comment]


[/template]
