[comment encoding = UTF-8 /]
[module DSLQueries('http://www.xtext.org/AthenaDSL')]

[query public createInstances(project : Project) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'createInstances(org.xtext.athenaDSL.Project)', Sequence{project}) 
/]

[query public isReference(elt : athenaDSL::architectureElement) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isReference(org.xtext.athenaDSL.architectureElement)', Sequence{elt}) 
/]

[query public isAnAncestorOf(proto : prototypeDeclaration, p : prototypeDeclaration) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isAnAncestorOf(org.xtext.athenaDSL.prototypeDeclaration,org.xtext.athenaDSL.prototypeDeclaration)', Sequence{proto, p}) 
/]

[query public isParameter(elt : athenaDSL::architectureElement) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isParameter(org.xtext.athenaDSL.architectureElement)', Sequence{elt}) 
/]

[query public isBasicType(type : DataType) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isBasicType(org.xtext.athenaDSL.DataType)', Sequence{type})
/]

[query public isCPPInclude(include : includeDecl) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isCPPInclude(org.xtext.athenaDSL.includeDecl)', Sequence{include}) 
/]

[query public isCPPLanguage(lang : LanguageDeclaration) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isCPPLanguage(org.xtext.athenaDSL.LanguageDeclaration)', Sequence{lang}) 
/]

[query public isVLELanguage(lang : LanguageDeclaration) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isVLELanguage(org.xtext.athenaDSL.LanguageDeclaration)', Sequence{lang}) 
/]

[query public isCPPFunction(func : functionDeclaration) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isCPPFunction(org.xtext.athenaDSL.functionDeclaration)', Sequence{func}) 
/]

[query public isDynamicArray(type : athenaDSL::arrayType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isDynamicArray(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query public isArrayType(type : athenaDSL::DataType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isArrayType(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public isStructType(type : athenaDSL::DataType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isStructType(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public isDefineType(type : athenaDSL::DataType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isDefineType(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public isUnionType(type : athenaDSL::DataType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isUnionType(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public isMapType(type : athenaDSL::DataType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isMapType(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public isContainer(type : athenaDSL::DataType) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isContainer(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public isVectorType(type : athenaDSL::DataType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isVectorType(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query  public hasInitValue(type : athenaDSL::DataType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'hasInitValue(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public isAOneDimensionArray(type : athenaDSL::arrayType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isAOneDimensionArray(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query public hasDynamicArrayElements(type : athenaDSL::structType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'hasDynamicArrayElements(org.xtext.athenaDSL.structType)', Sequence{type}) 
/]

[query public getCPPLanguageDecl(type : athenaDSL::basicType) : athenaDSL::languageDecl = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getCPPLanguageDecl(org.xtext.athenaDSL.basicType)', Sequence{type}) 
/]

[query public getArrayDatatypeName(type : athenaDSL::arrayType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getArrayDatatypeName(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query  public getInitValue(type : athenaDSL::basicType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getInitValue(org.xtext.athenaDSL.basicType)', Sequence{type}) 
/]

[query public getArrayNumberOfDimension(type : athenaDSL::arrayType) : Integer = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getArrayNumberOfDimension(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query public getDynamicAllocationFunctionArguments(type : athenaDSL::arrayType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getDynamicAllocationFunctionArguments(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query  public getDynamicAllocationForStruct(name : String, struct : athenaDSL::structType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getDynamicAllocationForStruct(java.lang.String,org.xtext.athenaDSL.structType)', Sequence{name, struct}) 
/]

[query public getDynamicAllocationFunctionForStruct(type : athenaDSL::structType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getDynamicAllocationFunctionForStruct(org.xtext.athenaDSL.structType)', Sequence{type}) 
/]

[query public getArraySizeOperator(type : athenaDSL::arrayType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getArraySizeOperator(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query public getArrayDimensions(type : athenaDSL::arrayType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getArrayDimensions(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query public getVectorDatatypeName(type : athenaDSL::vectorType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getVectorDatatypeName(org.xtext.athenaDSL.vectorType)', Sequence{type}) 
/]

[query public getMapKeyTypeName(type : athenaDSL::mapType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getMapKeyTypeName(org.xtext.athenaDSL.mapType)', Sequence{type}) 
/]

[query public getMapValueTypeName(type : athenaDSL::mapType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getMapValueTypeName(org.xtext.athenaDSL.mapType)', Sequence{type}) 
/]

[query public getStructParamDecl(type : athenaDSL::structElement) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getStructParamDecl(org.xtext.athenaDSL.structElement)', Sequence{type}) 
/]

[query public getDefineTypeName(type : athenaDSL::defineType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getDefineTypeName(org.xtext.athenaDSL.defineType)', Sequence{type}) 
/]

[query public getDynamicAllocationFunctionArgumentsCall(type : athenaDSL::arrayType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getDynamicAllocationFunctionArgumentsCall(org.xtext.athenaDSL.arrayType)', Sequence{type}) 
/]

[query public getBaseType(type : athenaDSL::DataType) : athenaDSL::DataType = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getBaseType(org.xtext.athenaDSL.DataType)', Sequence{type}) 
/]

[query public getTypeIndexInUnion(union : athenaDSL::unionType, type : athenaDSL::DataType) : String =	
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getTypeIndexInUnion(org.xtext.athenaDSL.unionType,org.xtext.athenaDSL.DataType)', Sequence{union, type}) 
/]

[query public getPrototypeFileName(proto : athenaDSL::prototypeDeclaration, end : String) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getPrototypeFileName(org.xtext.athenaDSL.prototypeDeclaration,java.lang.String)', Sequence{proto,end}) 
/]

[query public getNameFromQualifiedName(elt : athenaDSL::qualifiedName) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getNameFromQualifiedName(org.xtext.athenaDSL.qualifiedName)', Sequence{elt}) 
/]

[query public getReferenceName(ref : athenaDSL::referenceDeclaration) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getReferenceName(org.xtext.athenaDSL.referenceDeclaration)', Sequence{ref}) 
/]

[query public needPointerCast(bt : athenaDSL::basicType) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'needPointerCast(org.xtext.athenaDSL.basicType)', Sequence{bt})
/]

[query public hasCPPLexicalCast(type : athenaDSL::basicType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getCPPLexicalCast(org.xtext.athenaDSL.basicType)', Sequence{type}) 
/]

[query public getCPPLexicalCast(type : athenaDSL::basicType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getCPPLexicalCast(org.xtext.athenaDSL.basicType)', Sequence{type}) 
/]

[query public hasVLELexicalCast(type : athenaDSL::basicType) : Boolean = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getCPPLexicalCast(org.xtext.athenaDSL.basicType)', Sequence{type}) 
/]

[query public getVLELexicalCast(type : athenaDSL::basicType) : String = 
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getCPPLexicalCast(org.xtext.athenaDSL.basicType)', Sequence{type}) 
/]

[query public hasCPPLanguage(type : athenaDSL::basicType) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'hasCPPLanguage(org.xtext.athenaDSL.basicType)', Sequence{type})
/] 

[query public hasVLELanguage(type : athenaDSL::basicType) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'hasVLELanguage(org.xtext.athenaDSL.basicType)', Sequence{type})
/]

[query public getVLELanguageDecl(type : athenaDSL::basicType) : athenaDSL::languageDecl =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'getVLELanguageDecl(org.xtext.athenaDSL.basicType)', Sequence{type})
/]

[query public isEnumeration(type : athenaDSL::basicType) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'isEnumeration(org.xtext.athenaDSL.basicType)', Sequence{type})
/]

[query public hasReference(project : athenaDSL::Project, prototype : athenaDSL::prototypeDeclaration) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'hasReference(org.xtext.athenaDSL.Project, org.xtext.athenaDSL.prototypeDeclaration)', Sequence{project, prototype})
/]

[query public hasParameter(project : athenaDSL::Project, prototype : athenaDSL::prototypeDeclaration) : Boolean =
	invoke('org.eclipse.papyrus.generators.xtext.athena.vle.main.DSLQueries', 'hasParameter(org.xtext.athenaDSL.Project, org.xtext.athenaDSL.prototypeDeclaration)', Sequence{project, prototype})
/] 
