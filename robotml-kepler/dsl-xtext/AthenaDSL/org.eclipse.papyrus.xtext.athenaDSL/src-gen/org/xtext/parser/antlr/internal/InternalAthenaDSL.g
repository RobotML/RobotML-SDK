/*
* generated by Xtext
*/
grammar InternalAthenaDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.AthenaDSLGrammarAccess;

}

@parser::members {

 	private AthenaDSLGrammarAccess grammarAccess;
 	
    public InternalAthenaDSLParser(TokenStream input, AthenaDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Project";	
   	}
   	
   	@Override
   	protected AthenaDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	 iv_ruleProject=ruleProject 
	 { $current=$iv_ruleProject.current; } 
	 EOF 
;

// Rule Project
ruleProject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getLanguagesLanguageDeclarationParserRuleCall_1_0()); 
	    }
		lv_languages_1_0=ruleLanguageDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"languages",
        		lv_languages_1_0, 
        		"LanguageDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getTypesDataTypeParserRuleCall_2_0()); 
	    }
		lv_types_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getValiditiesValidityFunctionDeclarationParserRuleCall_3_0()); 
	    }
		lv_validities_3_0=rulevalidityFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"validities",
        		lv_validities_3_0, 
        		"validityFunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getImportsImportParserRuleCall_4_0()); 
	    }
		lv_imports_4_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_4_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getFunctionsFunctionDeclarationParserRuleCall_5_0()); 
	    }
		lv_functions_5_0=rulefunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_5_0, 
        		"functionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getImportsImportParserRuleCall_6_0()); 
	    }
		lv_imports_6_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_6_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getProcessingsProcessingDeclarationParserRuleCall_7_0()); 
	    }
		lv_processings_7_0=ruleProcessingDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"processings",
        		lv_processings_7_0, 
        		"ProcessingDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getImportsImportParserRuleCall_8_0()); 
	    }
		lv_imports_8_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_8_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getPrototypesPrototypeDeclarationParserRuleCall_9_0()); 
	    }
		lv_prototypes_9_0=ruleprototypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"prototypes",
        		lv_prototypes_9_0, 
        		"prototypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getImportsImportParserRuleCall_10_0()); 
	    }
		lv_imports_10_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_10_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getWrappersWrapperDeclarationParserRuleCall_11_0()); 
	    }
		lv_wrappers_11_0=rulewrapperDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"wrappers",
        		lv_wrappers_11_0, 
        		"wrapperDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleLanguageDeclaration
entryRuleLanguageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageDeclarationRule()); }
	 iv_ruleLanguageDeclaration=ruleLanguageDeclaration 
	 { $current=$iv_ruleLanguageDeclaration.current; } 
	 EOF 
;

// Rule LanguageDeclaration
ruleLanguageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='language' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLanguageDeclarationAccess().getLanguageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLanguageDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLanguageDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getBasicTypeParserRuleCall_0()); 
    }
    this_basicType_0=rulebasicType
    { 
        $current = $this_basicType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getDefineTypeParserRuleCall_1()); 
    }
    this_defineType_1=ruledefineType
    { 
        $current = $this_defineType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getArrayTypeParserRuleCall_2()); 
    }
    this_arrayType_2=rulearrayType
    { 
        $current = $this_arrayType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getVectorTypeParserRuleCall_3()); 
    }
    this_vectorType_3=rulevectorType
    { 
        $current = $this_vectorType_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getMapTypeParserRuleCall_4()); 
    }
    this_mapType_4=rulemapType
    { 
        $current = $this_mapType_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getStructTypeParserRuleCall_5()); 
    }
    this_structType_5=rulestructType
    { 
        $current = $this_structType_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getUnionTypeParserRuleCall_6()); 
    }
    this_unionType_6=ruleunionType
    { 
        $current = $this_unionType_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuledefineType
entryRuledefineType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineTypeRule()); }
	 iv_ruledefineType=ruledefineType 
	 { $current=$iv_ruledefineType.current; } 
	 EOF 
;

// Rule defineType
ruledefineType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefineTypeAccess().getDefineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefineTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefineTypeAccess().getIsKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineTypeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getDefineTypeAccess().getTypenameDataTypeCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRulevalidityFunctionDeclaration
entryRulevalidityFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidityFunctionDeclarationRule()); }
	 iv_rulevalidityFunctionDeclaration=rulevalidityFunctionDeclaration 
	 { $current=$iv_rulevalidityFunctionDeclaration.current; } 
	 EOF 
;

// Rule validityFunctionDeclaration
rulevalidityFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='validity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValidityFunctionDeclarationAccess().getValidityKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidityFunctionDeclarationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getValidityFunctionDeclarationAccess().getTypenameDataTypeCrossReference_1_0()); 
	}

)
)(
(
		lv_fctName_2_0=RULE_ID
		{
			newLeafNode(lv_fctName_2_0, grammarAccess.getValidityFunctionDeclarationAccess().getFctNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidityFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fctName",
        		lv_fctName_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulebasicType
entryRulebasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_rulebasicType=rulebasicType 
	 { $current=$iv_rulebasicType.current; } 
	 EOF 
;

// Rule basicType
rulebasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='basic' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBasicTypeAccess().getBasicKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBasicTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getBeginParserRuleCall_2()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTypeAccess().getIncludesIncludeDeclParserRuleCall_3_0()); 
	    }
		lv_includes_3_0=ruleincludeDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTypeRule());
	        }
       		add(
       			$current, 
       			"includes",
        		lv_includes_3_0, 
        		"includeDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTypeAccess().getLanguagesLanguageDeclParserRuleCall_4_0()); 
	    }
		lv_languages_4_0=rulelanguageDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTypeRule());
	        }
       		add(
       			$current, 
       			"languages",
        		lv_languages_4_0, 
        		"languageDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTypeAccess().getCastsLexicalCastDeclParserRuleCall_5_0()); 
	    }
		lv_casts_5_0=rulelexicalCastDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTypeRule());
	        }
       		add(
       			$current, 
       			"casts",
        		lv_casts_5_0, 
        		"lexicalCastDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*
    { 
        newCompositeNode(grammarAccess.getBasicTypeAccess().getEndParserRuleCall_6()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleincludeDecl
entryRuleincludeDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeDeclRule()); }
	 iv_ruleincludeDecl=ruleincludeDecl 
	 { $current=$iv_ruleincludeDecl.current; } 
	 EOF 
;

// Rule includeDecl
ruleincludeDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='include' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIncludeDeclAccess().getIncludeKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeDeclRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIncludeDeclAccess().getLangLanguageDeclarationCrossReference_1_0()); 
	}

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIncludeDeclAccess().getColonKeyword_2());
    }
(
(
		lv_includeName_3_0=RULE_STRING
		{
			newLeafNode(lv_includeName_3_0, grammarAccess.getIncludeDeclAccess().getIncludeNameSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"includeName",
        		lv_includeName_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulelanguageDecl
entryRulelanguageDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageDeclRule()); }
	 iv_rulelanguageDecl=rulelanguageDecl 
	 { $current=$iv_rulelanguageDecl.current; } 
	 EOF 
;

// Rule languageDecl
rulelanguageDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='language' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLanguageDeclAccess().getLanguageKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLanguageDeclRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getLanguageDeclAccess().getLangLanguageDeclarationCrossReference_1_0()); 
	}

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLanguageDeclAccess().getColonKeyword_2());
    }
(
(
		lv_trans_3_0=RULE_STRING
		{
			newLeafNode(lv_trans_3_0, grammarAccess.getLanguageDeclAccess().getTransSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLanguageDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"trans",
        		lv_trans_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLanguageDeclAccess().getEqualsSignKeyword_4());
    }
(
(
		lv_value_5_0=RULE_STRING
		{
			newLeafNode(lv_value_5_0, grammarAccess.getLanguageDeclAccess().getValueSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLanguageDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulelexicalCastDecl
entryRulelexicalCastDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLexicalCastDeclRule()); }
	 iv_rulelexicalCastDecl=rulelexicalCastDecl 
	 { $current=$iv_rulelexicalCastDecl.current; } 
	 EOF 
;

// Rule lexicalCastDecl
rulelexicalCastDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='lexicalCast' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLexicalCastDeclAccess().getLexicalCastKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLexicalCastDeclRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getLexicalCastDeclAccess().getLangLanguageDeclarationCrossReference_1_0()); 
	}

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLexicalCastDeclAccess().getColonKeyword_2());
    }
(
(
		lv_cast_3_0=RULE_STRING
		{
			newLeafNode(lv_cast_3_0, grammarAccess.getLexicalCastDeclAccess().getCastSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLexicalCastDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cast",
        		lv_cast_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulearrayType
entryRulearrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	 iv_rulearrayType=rulearrayType 
	 { $current=$iv_rulearrayType.current; } 
	 EOF 
;

// Rule arrayType
rulearrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayTypeAccess().getArrayKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayTypeAccess().getLessThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getArrayTypeAccess().getTypenameDataTypeCrossReference_2_0()); 
	}

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayTypeAccess().getGreaterThanSignKeyword_3());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getArrayTypeAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getIndicesIndexParserRuleCall_6_0()); 
	    }
		lv_indices_6_0=ruleindex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_6_0, 
        		"index");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getArrayTypeAccess().getComaParserRuleCall_7_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getIndicesIndexParserRuleCall_7_1_0()); 
	    }
		lv_indices_8_0=ruleindex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_8_0, 
        		"index");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_8());
    }
)
;





// Entry rule entryRulevectorType
entryRulevectorType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorTypeRule()); }
	 iv_rulevectorType=rulevectorType 
	 { $current=$iv_rulevectorType.current; } 
	 EOF 
;

// Rule vectorType
rulevectorType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='vector' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVectorTypeAccess().getVectorKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVectorTypeAccess().getLessThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVectorTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getVectorTypeAccess().getTypenameDataTypeCrossReference_2_0()); 
	}

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVectorTypeAccess().getGreaterThanSignKeyword_3());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getVectorTypeAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVectorTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulemapType
entryRulemapType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	 iv_rulemapType=rulemapType 
	 { $current=$iv_rulemapType.current; } 
	 EOF 
;

// Rule mapType
rulemapType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='map' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapTypeAccess().getMapKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLessThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getMapTypeAccess().getKeytypeDataTypeCrossReference_2_0()); 
	}

)
)
    { 
        newCompositeNode(grammarAccess.getMapTypeAccess().getComaParserRuleCall_3()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapTypeRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getMapTypeAccess().getValtypeDataTypeCrossReference_4_0()); 
	}

)
)	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMapTypeAccess().getGreaterThanSignKeyword_5());
    }
(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getMapTypeAccess().getNameIDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMapTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulestructType
entryRulestructType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); }
	 iv_rulestructType=rulestructType 
	 { $current=$iv_rulestructType.current; } 
	 EOF 
;

// Rule structType
rulestructType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='struct' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStructTypeAccess().getStructKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStructTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStructTypeAccess().getLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeAccess().getIndicesIndexParserRuleCall_2_1_0()); 
	    }
		lv_indices_3_0=ruleindex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_3_0, 
        		"index");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getComaParserRuleCall_2_2_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeAccess().getIndicesIndexParserRuleCall_2_2_1_0()); 
	    }
		lv_indices_5_0=ruleindex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_5_0, 
        		"index");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStructTypeAccess().getGreaterThanSignKeyword_2_3());
    }
)?
    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getBeginParserRuleCall_3()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeAccess().getParametersStructElementParserRuleCall_4_0()); 
	    }
		lv_parameters_8_0=rulestructElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_8_0, 
        		"structElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getStructTypeAccess().getEndParserRuleCall_5()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulestructElement
entryRulestructElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructElementRule()); }
	 iv_rulestructElement=rulestructElement 
	 { $current=$iv_rulestructElement.current; } 
	 EOF 
;

// Rule structElement
rulestructElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getStructElementAccess().getTypenameDataTypeCrossReference_0_0()); 
	}

)
)(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructElementAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructElementAccess().getIndicesIndexParserRuleCall_1_1_0()); 
	    }
		lv_indices_2_0=ruleindex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructElementRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_2_0, 
        		"index");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getStructElementAccess().getComaParserRuleCall_1_2_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructElementAccess().getIndicesIndexParserRuleCall_1_2_1_0()); 
	    }
		lv_indices_4_0=ruleindex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructElementRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_4_0, 
        		"index");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructElementAccess().getGreaterThanSignKeyword_1_3());
    }
)?(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getStructElementAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"ID");
	    }

)
)((
(
		lv_hasInitValue_7_0=	'=' 
    {
        newLeafNode(lv_hasInitValue_7_0, grammarAccess.getStructElementAccess().getHasInitValueEqualsSignKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructElementRule());
	        }
       		setWithLastConsumed($current, "hasInitValue", true, "=");
	    }

)
)(
(
		lv_initValue_8_0=RULE_STRING
		{
			newLeafNode(lv_initValue_8_0, grammarAccess.getStructElementAccess().getInitValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"initValue",
        		lv_initValue_8_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleindex
entryRuleindex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	 iv_ruleindex=ruleindex 
	 { $current=$iv_ruleindex.current; } 
	 EOF 
;

// Rule index
ruleindex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_dim_0_0=RULE_ID
		{
			newLeafNode(lv_dim_0_0, grammarAccess.getIndexAccess().getDimIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dim",
        		lv_dim_0_0, 
        		"ID");
	    }

)
)((
(
		lv_hasValue_1_0=	'=' 
    {
        newLeafNode(lv_hasValue_1_0, grammarAccess.getIndexAccess().getHasValueEqualsSignKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexRule());
	        }
       		setWithLastConsumed($current, "hasValue", true, "=");
	    }

)
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getIndexAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))?)
;





// Entry rule entryRuleunionType
entryRuleunionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionTypeRule()); }
	 iv_ruleunionType=ruleunionType 
	 { $current=$iv_ruleunionType.current; } 
	 EOF 
;

// Rule unionType
ruleunionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='union' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnionTypeAccess().getUnionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUnionTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnionTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getUnionTypeAccess().getBeginParserRuleCall_2()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnionTypeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getUnionTypeAccess().getElementsDataTypeCrossReference_3_0()); 
	}

)
)(
    { 
        newCompositeNode(grammarAccess.getUnionTypeAccess().getComaParserRuleCall_4_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnionTypeRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getUnionTypeAccess().getElementsDataTypeCrossReference_4_1_0()); 
	}

)
))+
    { 
        newCompositeNode(grammarAccess.getUnionTypeAccess().getEndParserRuleCall_5()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRulefunctionDeclaration
entryRulefunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_rulefunctionDeclaration=rulefunctionDeclaration 
	 { $current=$iv_rulefunctionDeclaration.current; } 
	 EOF 
;

// Rule functionDeclaration
rulefunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionDeclarationAccess().getLessThanSignKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLangLanguageDeclarationCrossReference_3_0()); 
	}

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionDeclarationAccess().getGreaterThanSignKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getOpenParParserRuleCall_5()); 
    }
ruleopenPar
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getArgsArgumentsDeclarationParserRuleCall_6_0()); 
	    }
		lv_args_6_0=ruleargumentsDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_6_0, 
        		"argumentsDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?
    { 
        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getCloseParParserRuleCall_7()); 
    }
ruleclosePar
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleargumentsDeclaration
entryRuleargumentsDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsDeclarationRule()); }
	 iv_ruleargumentsDeclaration=ruleargumentsDeclaration 
	 { $current=$iv_ruleargumentsDeclaration.current; } 
	 EOF 
;

// Rule argumentsDeclaration
ruleargumentsDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsDeclarationAccess().getArgumentsArgParserRuleCall_0_0()); 
	    }
		lv_arguments_0_0=rulearg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsDeclarationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_0_0, 
        		"arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsDeclarationAccess().getArgumentsArgParserRuleCall_1_0()); 
	    }
		lv_arguments_1_0=rulearg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsDeclarationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_1_0, 
        		"arg");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulearg
entryRulearg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgRule()); }
	 iv_rulearg=rulearg 
	 { $current=$iv_rulearg.current; } 
	 EOF 
;

// Rule arg
rulearg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_modifier_0_1=	'inout' 
    {
        newLeafNode(lv_modifier_0_1, grammarAccess.getArgAccess().getModifierInoutKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed($current, "modifier", lv_modifier_0_1, null);
	    }

    |		lv_modifier_0_2=	'in' 
    {
        newLeafNode(lv_modifier_0_2, grammarAccess.getArgAccess().getModifierInKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed($current, "modifier", lv_modifier_0_2, null);
	    }

    |		lv_modifier_0_3=	'out' 
    {
        newLeafNode(lv_modifier_0_3, grammarAccess.getArgAccess().getModifierOutKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed($current, "modifier", lv_modifier_0_3, null);
	    }

)

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getArgAccess().getTypeDataTypeCrossReference_1_0()); 
	}

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getArgAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)?)
;





// Entry rule entryRuleProcessingDeclaration
entryRuleProcessingDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessingDeclarationRule()); }
	 iv_ruleProcessingDeclaration=ruleProcessingDeclaration 
	 { $current=$iv_ruleProcessingDeclaration.current; } 
	 EOF 
;

// Rule ProcessingDeclaration
ruleProcessingDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='processing' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcessingDeclarationAccess().getProcessingKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcessingDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessingDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getOpenParParserRuleCall_2()); 
    }
ruleopenPar
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getArgsArgumentsDeclarationParserRuleCall_3_0()); 
	    }
		lv_args_3_0=ruleargumentsDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessingDeclarationRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"argumentsDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?
    { 
        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getCloseParParserRuleCall_4()); 
    }
ruleclosePar
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getBeginParserRuleCall_5()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getLocalParametersLocalParameterDeclarationParserRuleCall_6_0()); 
	    }
		lv_localParameters_6_0=rulelocalParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessingDeclarationRule());
	        }
       		add(
       			$current, 
       			"localParameters",
        		lv_localParameters_6_0, 
        		"localParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getLocalEventsLocalEventDeclarationParserRuleCall_7_0()); 
	    }
		lv_localEvents_7_0=rulelocalEventDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessingDeclarationRule());
	        }
       		add(
       			$current, 
       			"localEvents",
        		lv_localEvents_7_0, 
        		"localEventDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getStatementsStatementParserRuleCall_8_0()); 
	    }
		lv_statements_8_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessingDeclarationRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
    { 
        newCompositeNode(grammarAccess.getProcessingDeclarationAccess().getEndParserRuleCall_9()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getCallFunctionCallParserRuleCall_0_0()); 
	    }
		lv_call_0_1=rulefunctionCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_0_1, 
        		"functionCall");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getCallWhileblockParserRuleCall_0_1()); 
	    }
		lv_call_0_2=rulewhileblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_0_2, 
        		"whileblock");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getCallIfblockParserRuleCall_0_2()); 
	    }
		lv_call_0_3=ruleifblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_0_3, 
        		"ifblock");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRulelocalParameterDeclaration
entryRulelocalParameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalParameterDeclarationRule()); }
	 iv_rulelocalParameterDeclaration=rulelocalParameterDeclaration 
	 { $current=$iv_rulelocalParameterDeclaration.current; } 
	 EOF 
;

// Rule localParameterDeclaration
rulelocalParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='parameter' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalParameterDeclarationAccess().getParameterKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalParameterDeclarationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getLocalParameterDeclarationAccess().getTypeDataTypeCrossReference_1_0()); 
	}

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLocalParameterDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)((
(
		lv_hasValue_3_0=	'=' 
    {
        newLeafNode(lv_hasValue_3_0, grammarAccess.getLocalParameterDeclarationAccess().getHasValueEqualsSignKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalParameterDeclarationRule());
	        }
       		setWithLastConsumed($current, "hasValue", true, "=");
	    }

)
)(
(
		lv_value_4_0=RULE_STRING
		{
			newLeafNode(lv_value_4_0, grammarAccess.getLocalParameterDeclarationAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRulelocalEventDeclaration
entryRulelocalEventDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalEventDeclarationRule()); }
	 iv_rulelocalEventDeclaration=rulelocalEventDeclaration 
	 { $current=$iv_rulelocalEventDeclaration.current; } 
	 EOF 
;

// Rule localEventDeclaration
rulelocalEventDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLocalEventDeclarationAccess().getEventDeclarationParserRuleCall()); 
    }
    this_eventDeclaration_0=ruleeventDeclaration
    { 
        $current = $this_eventDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleifblock
entryRuleifblock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfblockRule()); }
	 iv_ruleifblock=ruleifblock 
	 { $current=$iv_ruleifblock.current; } 
	 EOF 
;

// Rule ifblock
ruleifblock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfblockAccess().getIfKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfblockRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIfblockAccess().getEventNameLocalEventDeclarationCrossReference_1_0()); 
	}

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfblockAccess().getThenKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getIfblockAccess().getBeginParserRuleCall_3()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfblockAccess().getIfBlocksStatementParserRuleCall_4_0()); 
	    }
		lv_ifBlocks_4_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfblockRule());
	        }
       		add(
       			$current, 
       			"ifBlocks",
        		lv_ifBlocks_4_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getIfblockAccess().getEndParserRuleCall_5()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_hasElse_6_0=	'else' 
    {
        newLeafNode(lv_hasElse_6_0, grammarAccess.getIfblockAccess().getHasElseElseKeyword_6_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfblockRule());
	        }
       		setWithLastConsumed($current, "hasElse", true, "else");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getIfblockAccess().getBeginParserRuleCall_6_1()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfblockAccess().getElseBlocksStatementParserRuleCall_6_2_0()); 
	    }
		lv_elseBlocks_8_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfblockRule());
	        }
       		add(
       			$current, 
       			"elseBlocks",
        		lv_elseBlocks_8_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getIfblockAccess().getEndParserRuleCall_6_3()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulewhileblock
entryRulewhileblock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileblockRule()); }
	 iv_rulewhileblock=rulewhileblock 
	 { $current=$iv_rulewhileblock.current; } 
	 EOF 
;

// Rule whileblock
rulewhileblock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileblockAccess().getWhileKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getWhileblockRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getWhileblockAccess().getEventNameLocalEventDeclarationCrossReference_1_0()); 
	}

)
)	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWhileblockAccess().getDoKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getWhileblockAccess().getBeginParserRuleCall_3()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileblockAccess().getBlocksStatementParserRuleCall_4_0()); 
	    }
		lv_blocks_4_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileblockRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_4_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getWhileblockAccess().getEndParserRuleCall_5()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulefunctionCall
entryRulefunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_rulefunctionCall=rulefunctionCall 
	 { $current=$iv_rulefunctionCall.current; } 
	 EOF 
;

// Rule functionCall
rulefunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='execute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getExecuteKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getNameFuncProcCrossReference_1_0()); 
	}

)
)
    { 
        newCompositeNode(grammarAccess.getFunctionCallAccess().getOpenParParserRuleCall_2()); 
    }
ruleopenPar
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsFargParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=rulefarg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"farg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getFunctionCallAccess().getComaParserRuleCall_3_1_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsFargParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=rulefarg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"farg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
    { 
        newCompositeNode(grammarAccess.getFunctionCallAccess().getCloseParParserRuleCall_4()); 
    }
ruleclosePar
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleprototypeDeclaration
entryRuleprototypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrototypeDeclarationRule()); }
	 iv_ruleprototypeDeclaration=ruleprototypeDeclaration 
	 { $current=$iv_ruleprototypeDeclaration.current; } 
	 EOF 
;

// Rule prototypeDeclaration
ruleprototypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='prototype' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrototypeDeclarationAccess().getPrototypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPrototypeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrototypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrototypeDeclarationAccess().getIsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrototypeDeclarationRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPrototypeDeclarationAccess().getSuperTypePrototypeDeclarationCrossReference_2_1_0()); 
	}

)
))?
    { 
        newCompositeNode(grammarAccess.getPrototypeDeclarationAccess().getBeginParserRuleCall_3()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrototypeDeclarationAccess().getDefinitionsArchitectureElementParserRuleCall_4_0()); 
	    }
		lv_definitions_5_0=rulearchitectureElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrototypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_5_0, 
        		"architectureElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
    { 
        newCompositeNode(grammarAccess.getPrototypeDeclarationAccess().getEndParserRuleCall_5()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulearchitectureElement
entryRulearchitectureElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArchitectureElementRule()); }
	 iv_rulearchitectureElement=rulearchitectureElement 
	 { $current=$iv_rulearchitectureElement.current; } 
	 EOF 
;

// Rule architectureElement
rulearchitectureElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArchitectureElementAccess().getParameterDeclarationParserRuleCall_0()); 
    }
    this_parameterDeclaration_0=ruleparameterDeclaration
    { 
        $current = $this_parameterDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArchitectureElementAccess().getReferenceDeclarationParserRuleCall_1()); 
    }
    this_referenceDeclaration_1=rulereferenceDeclaration
    { 
        $current = $this_referenceDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArchitectureElementAccess().getEventDeclarationParserRuleCall_2()); 
    }
    this_eventDeclaration_2=ruleeventDeclaration
    { 
        $current = $this_eventDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArchitectureElementAccess().getStatesetDeclarationParserRuleCall_3()); 
    }
    this_statesetDeclaration_3=rulestatesetDeclaration
    { 
        $current = $this_statesetDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArchitectureElementAccess().getInstanceDeclarationParserRuleCall_4()); 
    }
    this_instanceDeclaration_4=ruleinstanceDeclaration
    { 
        $current = $this_instanceDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArchitectureElementAccess().getInteractionDeclarationParserRuleCall_5()); 
    }
    this_interactionDeclaration_5=ruleinteractionDeclaration
    { 
        $current = $this_interactionDeclaration_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArchitectureElementAccess().getSignalDeclarationParserRuleCall_6()); 
    }
    this_signalDeclaration_6=rulesignalDeclaration
    { 
        $current = $this_signalDeclaration_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulesignalDeclaration
entryRulesignalDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalDeclarationRule()); }
	 iv_rulesignalDeclaration=rulesignalDeclaration 
	 { $current=$iv_rulesignalDeclaration.current; } 
	 EOF 
;

// Rule signalDeclaration
rulesignalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='signal' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSignalDeclarationAccess().getSignalKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSignalDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleeventDeclaration
entryRuleeventDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDeclarationRule()); }
	 iv_ruleeventDeclaration=ruleeventDeclaration 
	 { $current=$iv_ruleeventDeclaration.current; } 
	 EOF 
;

// Rule eventDeclaration
ruleeventDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='event' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventDeclarationAccess().getEventKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEventDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDeclarationAccess().getConditionsEventConditionParserRuleCall_3_0()); 
	    }
		lv_conditions_3_0=ruleeventCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDeclarationRule());
	        }
       		add(
       			$current, 
       			"conditions",
        		lv_conditions_3_0, 
        		"eventCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getEventDeclarationAccess().getComaParserRuleCall_4_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDeclarationAccess().getConditionsEventConditionParserRuleCall_4_1_0()); 
	    }
		lv_conditions_5_0=ruleeventCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDeclarationRule());
	        }
       		add(
       			$current, 
       			"conditions",
        		lv_conditions_5_0, 
        		"eventCondition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEventDeclarationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleeventCondition
entryRuleeventCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventConditionRule()); }
	 iv_ruleeventCondition=ruleeventCondition 
	 { $current=$iv_ruleeventCondition.current; } 
	 EOF 
;

// Rule eventCondition
ruleeventCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_leftPart_0_0=RULE_ID
		{
			newLeafNode(lv_leftPart_0_0, grammarAccess.getEventConditionAccess().getLeftPartIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"leftPart",
        		lv_leftPart_0_0, 
        		"ID");
	    }

)
)(
(
(
		lv_cond_1_1=	'==' 
    {
        newLeafNode(lv_cond_1_1, grammarAccess.getEventConditionAccess().getCondEqualsSignEqualsSignKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed($current, "cond", lv_cond_1_1, null);
	    }

    |		lv_cond_1_2=	'>=' 
    {
        newLeafNode(lv_cond_1_2, grammarAccess.getEventConditionAccess().getCondGreaterThanSignEqualsSignKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed($current, "cond", lv_cond_1_2, null);
	    }

    |		lv_cond_1_3=	'<=' 
    {
        newLeafNode(lv_cond_1_3, grammarAccess.getEventConditionAccess().getCondLessThanSignEqualsSignKeyword_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed($current, "cond", lv_cond_1_3, null);
	    }

    |		lv_cond_1_4=	'<' 
    {
        newLeafNode(lv_cond_1_4, grammarAccess.getEventConditionAccess().getCondLessThanSignKeyword_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed($current, "cond", lv_cond_1_4, null);
	    }

    |		lv_cond_1_5=	'>' 
    {
        newLeafNode(lv_cond_1_5, grammarAccess.getEventConditionAccess().getCondGreaterThanSignKeyword_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed($current, "cond", lv_cond_1_5, null);
	    }

    |		lv_cond_1_6=	'%%' 
    {
        newLeafNode(lv_cond_1_6, grammarAccess.getEventConditionAccess().getCondPercentSignPercentSignKeyword_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed($current, "cond", lv_cond_1_6, null);
	    }

)

)
)((
(
		lv_rightPartI_2_0=RULE_ID
		{
			newLeafNode(lv_rightPartI_2_0, grammarAccess.getEventConditionAccess().getRightPartIIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rightPartI",
        		lv_rightPartI_2_0, 
        		"ID");
	    }

)
)
    |(
(
		lv_rightPartN_3_0=RULE_INT
		{
			newLeafNode(lv_rightPartN_3_0, grammarAccess.getEventConditionAccess().getRightPartNINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rightPartN",
        		lv_rightPartN_3_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_rightPartS_4_0=RULE_STRING
		{
			newLeafNode(lv_rightPartS_4_0, grammarAccess.getEventConditionAccess().getRightPartSSTRINGTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rightPartS",
        		lv_rightPartS_4_0, 
        		"STRING");
	    }

)
)))
;





// Entry rule entryRuleparameterDeclaration
entryRuleparameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); }
	 iv_ruleparameterDeclaration=ruleparameterDeclaration 
	 { $current=$iv_ruleparameterDeclaration.current; } 
	 EOF 
;

// Rule parameterDeclaration
ruleparameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='parameter' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterDeclarationAccess().getParameterKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getParameterDeclarationAccess().getTypeNameDataTypeCrossReference_1_0()); 
	}

)
)((
(
		lv_hasNbW_2_0=	'#' 
    {
        newLeafNode(lv_hasNbW_2_0, grammarAccess.getParameterDeclarationAccess().getHasNbWNumberSignKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed($current, "hasNbW", true, "#");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getParameterDeclarationAccess().getOpenParParserRuleCall_2_1()); 
    }
ruleopenPar
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_nbw_4_0=RULE_INT
		{
			newLeafNode(lv_nbw_4_0, grammarAccess.getParameterDeclarationAccess().getNbwINTTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nbw",
        		lv_nbw_4_0, 
        		"INT");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getParameterDeclarationAccess().getCloseParParserRuleCall_2_3()); 
    }
ruleclosePar
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		lv_hasInfiniteWriter_6_0=	'!' 
    {
        newLeafNode(lv_hasInfiniteWriter_6_0, grammarAccess.getParameterDeclarationAccess().getHasInfiniteWriterExclamationMarkKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed($current, "hasInfiniteWriter", true, "!");
	    }

)
)?(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)(((
(
		lv_hasValue_8_0=	'=' 
    {
        newLeafNode(lv_hasValue_8_0, grammarAccess.getParameterDeclarationAccess().getHasValueEqualsSignKeyword_5_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed($current, "hasValue", true, "=");
	    }

)
)(
(
		lv_value_9_0=RULE_STRING
		{
			newLeafNode(lv_value_9_0, grammarAccess.getParameterDeclarationAccess().getValueSTRINGTerminalRuleCall_5_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"STRING");
	    }

)
))
    |((
(
		lv_hasConfig_10_0=	'=' 
    {
        newLeafNode(lv_hasConfig_10_0, grammarAccess.getParameterDeclarationAccess().getHasConfigEqualsSignKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed($current, "hasConfig", true, "=");
	    }

)
)	otherlv_11='<>' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getParameterDeclarationAccess().getLessThanSignGreaterThanSignKeyword_5_1_1());
    }
)
    |((
(
		lv_hasConfigWithDefaultValue_12_0=	'=' 
    {
        newLeafNode(lv_hasConfigWithDefaultValue_12_0, grammarAccess.getParameterDeclarationAccess().getHasConfigWithDefaultValueEqualsSignKeyword_5_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed($current, "hasConfigWithDefaultValue", true, "=");
	    }

)
)	otherlv_13='<' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getParameterDeclarationAccess().getLessThanSignKeyword_5_2_1());
    }
(
(
		lv_value_14_0=RULE_STRING
		{
			newLeafNode(lv_value_14_0, grammarAccess.getParameterDeclarationAccess().getValueSTRINGTerminalRuleCall_5_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_14_0, 
        		"STRING");
	    }

)
)	otherlv_15='>' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getParameterDeclarationAccess().getGreaterThanSignKeyword_5_2_3());
    }
))?)
;





// Entry rule entryRulestatesetDeclaration
entryRulestatesetDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatesetDeclarationRule()); }
	 iv_rulestatesetDeclaration=rulestatesetDeclaration 
	 { $current=$iv_rulestatesetDeclaration.current; } 
	 EOF 
;

// Rule statesetDeclaration
rulestatesetDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='stateset' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatesetDeclarationAccess().getStatesetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStatesetDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatesetDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatesetDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getStatesStateDeclarationParserRuleCall_3_0()); 
	    }
		lv_states_3_0=rulestateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesetDeclarationRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"stateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getComaParserRuleCall_4()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getStatesStateDeclarationParserRuleCall_5_0()); 
	    }
		lv_states_5_0=rulestateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesetDeclarationRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_5_0, 
        		"stateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getComaParserRuleCall_6_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getStatesStateDeclarationParserRuleCall_6_1_0()); 
	    }
		lv_states_7_0=rulestateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesetDeclarationRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_7_0, 
        		"stateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatesetDeclarationAccess().getRightCurlyBracketKeyword_7());
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStatesetDeclarationAccess().getEqualsSignKeyword_8());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatesetDeclarationRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getStatesetDeclarationAccess().getInitStateDeclarationCrossReference_9_0()); 
	}

)
)
    { 
        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getBeginParserRuleCall_10()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getTransitionsTransitionDeclarationParserRuleCall_11_0()); 
	    }
		lv_transitions_12_0=ruletransitionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesetDeclarationRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_12_0, 
        		"transitionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*
    { 
        newCompositeNode(grammarAccess.getStatesetDeclarationAccess().getEndParserRuleCall_12()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulestateDeclaration
entryRulestateDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateDeclarationRule()); }
	 iv_rulestateDeclaration=rulestateDeclaration 
	 { $current=$iv_rulestateDeclaration.current; } 
	 EOF 
;

// Rule stateDeclaration
rulestateDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStateDeclarationAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuletransitionDeclaration
entryRuletransitionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionDeclarationRule()); }
	 iv_ruletransitionDeclaration=ruletransitionDeclaration 
	 { $current=$iv_ruletransitionDeclaration.current; } 
	 EOF 
;

// Rule transitionDeclaration
ruletransitionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionDeclarationAccess().getTransitionKeyword_0());
    }
	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionDeclarationAccess().getFromKeyword_1());
    }
(
(
		lv_from_2_0=RULE_ID
		{
			newLeafNode(lv_from_2_0, grammarAccess.getTransitionDeclarationAccess().getFromIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"from",
        		lv_from_2_0, 
        		"ID");
	    }

)
)	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionDeclarationAccess().getToKeyword_3());
    }
(
(
		lv_to_4_0=RULE_ID
		{
			newLeafNode(lv_to_4_0, grammarAccess.getTransitionDeclarationAccess().getToIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"to",
        		lv_to_4_0, 
        		"ID");
	    }

)
)	otherlv_5='on' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionDeclarationAccess().getOnKeyword_5());
    }
(
(
		lv_evt_6_0=RULE_ID
		{
			newLeafNode(lv_evt_6_0, grammarAccess.getTransitionDeclarationAccess().getEvtIDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"evt",
        		lv_evt_6_0, 
        		"ID");
	    }

)
)((
(
		lv_raise_7_0=	'raise' 
    {
        newLeafNode(lv_raise_7_0, grammarAccess.getTransitionDeclarationAccess().getRaiseRaiseKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionDeclarationRule());
	        }
       		setWithLastConsumed($current, "raise", true, "raise");
	    }

)
)(
(
		lv_sig_8_0=RULE_ID
		{
			newLeafNode(lv_sig_8_0, grammarAccess.getTransitionDeclarationAccess().getSigIDTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sig",
        		lv_sig_8_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRuleinstanceDeclaration
entryRuleinstanceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceDeclarationRule()); }
	 iv_ruleinstanceDeclaration=ruleinstanceDeclaration 
	 { $current=$iv_ruleinstanceDeclaration.current; } 
	 EOF 
;

// Rule instanceDeclaration
ruleinstanceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='instance' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstanceDeclarationAccess().getInstanceKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceDeclarationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getInstanceDeclarationAccess().getTypeNamePrototypeDeclarationCrossReference_1_0()); 
	}

)
)(	otherlv_2='[]' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstanceDeclarationAccess().getLeftSquareBracketRightSquareBracketKeyword_2());
    }
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getInstanceDeclarationAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='INHIBIT' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInstanceDeclarationAccess().getINHIBITKeyword_4());
    }
)?)
;





// Entry rule entryRuleinteractionDeclaration
entryRuleinteractionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteractionDeclarationRule()); }
	 iv_ruleinteractionDeclaration=ruleinteractionDeclaration 
	 { $current=$iv_ruleinteractionDeclaration.current; } 
	 EOF 
;

// Rule interactionDeclaration
ruleinteractionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_wwhen_0_0=	'when' 
    {
        newLeafNode(lv_wwhen_0_0, grammarAccess.getInteractionDeclarationAccess().getWwhenWhenKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractionDeclarationRule());
	        }
       		setWithLastConsumed($current, "wwhen", true, "when");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getInteractionDeclarationAccess().getOpenParParserRuleCall_0_1()); 
    }
ruleopenPar
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_stateset_2_0=RULE_ID
		{
			newLeafNode(lv_stateset_2_0, grammarAccess.getInteractionDeclarationAccess().getStatesetIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stateset",
        		lv_stateset_2_0, 
        		"ID");
	    }

)
)	otherlv_3='::' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInteractionDeclarationAccess().getColonColonKeyword_0_3());
    }
(
(
		lv_wstate_4_0=RULE_ID
		{
			newLeafNode(lv_wstate_4_0, grammarAccess.getInteractionDeclarationAccess().getWstateIDTerminalRuleCall_0_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"wstate",
        		lv_wstate_4_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getInteractionDeclarationAccess().getCloseParParserRuleCall_0_5()); 
    }
ruleclosePar
    { 
        afterParserOrEnumRuleCall();
    }
)?((
(
		lv_iif_6_0=	'if' 
    {
        newLeafNode(lv_iif_6_0, grammarAccess.getInteractionDeclarationAccess().getIifIfKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractionDeclarationRule());
	        }
       		setWithLastConsumed($current, "iif", true, "if");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getInteractionDeclarationAccess().getOpenParParserRuleCall_1_1()); 
    }
ruleopenPar
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_event_8_0=RULE_ID
		{
			newLeafNode(lv_event_8_0, grammarAccess.getInteractionDeclarationAccess().getEventIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"event",
        		lv_event_8_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getInteractionDeclarationAccess().getCloseParParserRuleCall_1_3()); 
    }
ruleclosePar
    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getInteractionDeclarationAccess().getBeginParserRuleCall_2()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInteractionDeclarationAccess().getIcallsInteractionCallParserRuleCall_3_0()); 
	    }
		lv_icalls_11_0=ruleinteractionCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractionDeclarationRule());
	        }
       		add(
       			$current, 
       			"icalls",
        		lv_icalls_11_0, 
        		"interactionCall");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_12='INHIBIT' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getInteractionDeclarationAccess().getINHIBITKeyword_4());
    }
)?
    { 
        newCompositeNode(grammarAccess.getInteractionDeclarationAccess().getEndParserRuleCall_5()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleinteractionCall
entryRuleinteractionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteractionCallRule()); }
	 iv_ruleinteractionCall=ruleinteractionCall 
	 { $current=$iv_ruleinteractionCall.current; } 
	 EOF 
;

// Rule interactionCall
ruleinteractionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interaction' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInteractionCallAccess().getInteractionKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInteractionCallRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getInteractionCallAccess().getFctNameFuncProcCrossReference_1_0()); 
	}

)
)
    { 
        newCompositeNode(grammarAccess.getInteractionCallAccess().getOpenParParserRuleCall_2()); 
    }
ruleopenPar
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInteractionCallAccess().getArgumentsFargParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=rulefarg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"farg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getInteractionCallAccess().getComaParserRuleCall_3_1_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInteractionCallAccess().getArgumentsFargParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=rulefarg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInteractionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"farg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
    { 
        newCompositeNode(grammarAccess.getInteractionCallAccess().getCloseParParserRuleCall_4()); 
    }
ruleclosePar
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulefarg
entryRulefarg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFargRule()); }
	 iv_rulefarg=rulefarg 
	 { $current=$iv_rulefarg.current; } 
	 EOF 
;

// Rule farg
rulefarg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_varName_0_0=RULE_ID
		{
			newLeafNode(lv_varName_0_0, grammarAccess.getFargAccess().getVarNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFargRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRulereferenceDeclaration
entryRulereferenceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceDeclarationRule()); }
	 iv_rulereferenceDeclaration=rulereferenceDeclaration 
	 { $current=$iv_rulereferenceDeclaration.current; } 
	 EOF 
;

// Rule referenceDeclaration
rulereferenceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='reference' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceDeclarationAccess().getReferenceKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceDeclarationAccess().getLessThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceDeclarationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getReferenceDeclarationAccess().getTypeNameDataTypeCrossReference_2_0()); 
	}

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceDeclarationAccess().getGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getUpwayAtParserRuleCall_4_0()); 
	    }
		lv_upway_4_0=ruleat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceDeclarationRule());
	        }
       		set(
       			$current, 
       			"upway",
        		true, 
        		"at");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getNameQualifiedNameParserRuleCall_5_0()); 
	    }
		lv_name_5_0=rulequalifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"qualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='as' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReferenceDeclarationAccess().getAsKeyword_6_0());
    }
(
(
		lv_alias_7_0=RULE_ID
		{
			newLeafNode(lv_alias_7_0, grammarAccess.getReferenceDeclarationAccess().getAliasIDTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"alias",
        		lv_alias_7_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRulequalifiedName
entryRulequalifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	 iv_rulequalifiedName=rulequalifiedName 
	 { $current=$iv_rulequalifiedName.current; } 
	 EOF 
;

// Rule qualifiedName
rulequalifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getQualifiedNameAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getDotParserRuleCall_1_0()); 
    }
ruledot
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getQualifiedNameAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))*)
;





// Entry rule entryRulewrapperDeclaration
entryRulewrapperDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWrapperDeclarationRule()); }
	 iv_rulewrapperDeclaration=rulewrapperDeclaration 
	 { $current=$iv_rulewrapperDeclaration.current; } 
	 EOF 
;

// Rule wrapperDeclaration
rulewrapperDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wrapper' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWrapperDeclarationAccess().getWrapperKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getWrapperDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getBeginParserRuleCall_2()); 
    }
rulebegin
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_3='link-library' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWrapperDeclarationAccess().getLinkLibraryKeyword_3());
    }

    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getBeginAccParserRuleCall_4()); 
    }
rulebeginAcc
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_link_5_0=RULE_STRING
		{
			newLeafNode(lv_link_5_0, grammarAccess.getWrapperDeclarationAccess().getLinkSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"link",
        		lv_link_5_0, 
        		"STRING");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getEndAccParserRuleCall_6()); 
    }
ruleendAcc
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_7='implements-functions' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getWrapperDeclarationAccess().getImplementsFunctionsKeyword_7());
    }

    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getBeginAccParserRuleCall_8()); 
    }
rulebeginAcc
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_functions_9_0=RULE_ID
		{
			newLeafNode(lv_functions_9_0, grammarAccess.getWrapperDeclarationAccess().getFunctionsIDTerminalRuleCall_9_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"functions",
        		lv_functions_9_0, 
        		"ID");
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getComaParserRuleCall_9_1_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_functions_11_0=RULE_ID
		{
			newLeafNode(lv_functions_11_0, grammarAccess.getWrapperDeclarationAccess().getFunctionsIDTerminalRuleCall_9_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"functions",
        		lv_functions_11_0, 
        		"ID");
	    }

)
))*)?
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getEndAccParserRuleCall_10()); 
    }
ruleendAcc
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_13='external-objects' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getWrapperDeclarationAccess().getExternalObjectsKeyword_11());
    }

    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getBeginAccParserRuleCall_12()); 
    }
rulebeginAcc
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_objects_15_0=RULE_ID
		{
			newLeafNode(lv_objects_15_0, grammarAccess.getWrapperDeclarationAccess().getObjectsIDTerminalRuleCall_13_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"objects",
        		lv_objects_15_0, 
        		"ID");
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getComaParserRuleCall_13_1_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_objects_17_0=RULE_ID
		{
			newLeafNode(lv_objects_17_0, grammarAccess.getWrapperDeclarationAccess().getObjectsIDTerminalRuleCall_13_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"objects",
        		lv_objects_17_0, 
        		"ID");
	    }

)
))*)?
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getEndAccParserRuleCall_14()); 
    }
ruleendAcc
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_19='external-libraries' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getWrapperDeclarationAccess().getExternalLibrariesKeyword_15());
    }

    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getBeginAccParserRuleCall_16()); 
    }
rulebeginAcc
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_libraries_21_0=RULE_STRING
		{
			newLeafNode(lv_libraries_21_0, grammarAccess.getWrapperDeclarationAccess().getLibrariesSTRINGTerminalRuleCall_17_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libraries",
        		lv_libraries_21_0, 
        		"STRING");
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getComaParserRuleCall_17_1_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_libraries_23_0=RULE_STRING
		{
			newLeafNode(lv_libraries_23_0, grammarAccess.getWrapperDeclarationAccess().getLibrariesSTRINGTerminalRuleCall_17_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"libraries",
        		lv_libraries_23_0, 
        		"STRING");
	    }

)
))*)?
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getEndAccParserRuleCall_18()); 
    }
ruleendAcc
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_25='test-apps' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getWrapperDeclarationAccess().getTestAppsKeyword_19());
    }

    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getBeginAccParserRuleCall_20()); 
    }
rulebeginAcc
    { 
        afterParserOrEnumRuleCall();
    }
((
(
		lv_tests_27_0=RULE_ID
		{
			newLeafNode(lv_tests_27_0, grammarAccess.getWrapperDeclarationAccess().getTestsIDTerminalRuleCall_21_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"tests",
        		lv_tests_27_0, 
        		"ID");
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getComaParserRuleCall_21_1_0()); 
    }
rulecoma
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_tests_29_0=RULE_ID
		{
			newLeafNode(lv_tests_29_0, grammarAccess.getWrapperDeclarationAccess().getTestsIDTerminalRuleCall_21_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWrapperDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"tests",
        		lv_tests_29_0, 
        		"ID");
	    }

)
))*)?
    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getEndAccParserRuleCall_22()); 
    }
ruleendAcc
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getWrapperDeclarationAccess().getEndParserRuleCall_23()); 
    }
ruleend
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulebeginAcc
entryRulebeginAcc returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBeginAccRule()); } 
	 iv_rulebeginAcc=rulebeginAcc 
	 { $current=$iv_rulebeginAcc.current.getText(); }  
	 EOF 
;

// Rule beginAcc
rulebeginAcc returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBeginAccAccess().getLeftCurlyBracketKeyword()); 
    }

    ;





// Entry rule entryRuleendAcc
entryRuleendAcc returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndAccRule()); } 
	 iv_ruleendAcc=ruleendAcc 
	 { $current=$iv_ruleendAcc.current.getText(); }  
	 EOF 
;

// Rule endAcc
ruleendAcc returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndAccAccess().getRightCurlyBracketKeyword()); 
    }

    ;





// Entry rule entryRulebegin
entryRulebegin returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBeginRule()); } 
	 iv_rulebegin=rulebegin 
	 { $current=$iv_rulebegin.current.getText(); }  
	 EOF 
;

// Rule begin
rulebegin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='begin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBeginAccess().getBeginKeyword()); 
    }

    ;





// Entry rule entryRuleend
entryRuleend returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndRule()); } 
	 iv_ruleend=ruleend 
	 { $current=$iv_ruleend.current.getText(); }  
	 EOF 
;

// Rule end
ruleend returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndAccess().getEndKeyword()); 
    }

    ;





// Entry rule entryRuleopenPar
entryRuleopenPar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenParRule()); } 
	 iv_ruleopenPar=ruleopenPar 
	 { $current=$iv_ruleopenPar.current.getText(); }  
	 EOF 
;

// Rule openPar
ruleopenPar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpenParAccess().getLeftParenthesisKeyword()); 
    }

    ;





// Entry rule entryRuleclosePar
entryRuleclosePar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCloseParRule()); } 
	 iv_ruleclosePar=ruleclosePar 
	 { $current=$iv_ruleclosePar.current.getText(); }  
	 EOF 
;

// Rule closePar
ruleclosePar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCloseParAccess().getRightParenthesisKeyword()); 
    }

    ;





// Entry rule entryRuleat
entryRuleat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtRule()); } 
	 iv_ruleat=ruleat 
	 { $current=$iv_ruleat.current.getText(); }  
	 EOF 
;

// Rule at
ruleat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtAccess().getCommercialAtKeyword()); 
    }

    ;





// Entry rule entryRuledot
entryRuledot returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotRule()); } 
	 iv_ruledot=ruledot 
	 { $current=$iv_ruledot.current.getText(); }  
	 EOF 
;

// Rule dot
ruledot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDotAccess().getFullStopKeyword()); 
    }

    ;





// Entry rule entryRulecoma
entryRulecoma returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComaRule()); } 
	 iv_rulecoma=rulecoma 
	 { $current=$iv_rulecoma.current.getText(); }  
	 EOF 
;

// Rule coma
rulecoma returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComaAccess().getCommaKeyword()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


