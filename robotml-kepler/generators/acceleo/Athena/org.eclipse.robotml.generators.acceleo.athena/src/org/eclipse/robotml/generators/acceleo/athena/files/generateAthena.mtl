[comment encoding = UTF-8 /]
[module generateAthena('http://www.eclipse.org/uml2/3.0.0/UML')/]

[import org::eclipse::papyrus::robotml::generators::common::mmqueries::ArchitectureQueries/]

[import org::eclipse::robotml::generators::acceleo::athena::files::generateTypes/]
[import org::eclipse::robotml::generators::acceleo::athena::files::generateFunctions/]
[import org::eclipse::robotml::generators::acceleo::athena::files::generateProcessings/]
[import org::eclipse::robotml::generators::acceleo::athena::files::generatePrototypes/]
[import org::eclipse::robotml::generators::acceleo::athena::files::configGenerator/]

[comment][import org::eclipse::robotml::generators::acceleo::athena::files::generateBehaviorDeclaration/][/comment]

[import org::eclipse::robotml::generators::acceleo::athena::mmqueries::MMSpecificQueries /]

[template public generateAthena(model : Model)]
[comment @main /] 
	
[if(isModelSaved())]
[if(isModelValid(model))]
[searchUsedDataType(model)/]
[generateDataTypeFile(model)/]
[generateFunctionFile(model)/]
[generateProcessingFile(model)/]
[generatePrototypeFile(model)/]
[generateOutputSimulatorFile(model)/]
[else]
[let msg : String = 'Can\'t generate model, because not have an environment component.']
[showErrorMessageDlg(msg)/]
[/let]
[/if]
[/if]
[/template]

[comment]Generate wrapper for externals librairies[/comment]
[template private generateWrapper(model : Model)]
[let classes : Sequence(Class) = getModelClasses(model)]
//classes size : [classes->size()/]
[for(classe : Class | classes)]
[if(isExternalLibrairy(classe))]
wrapper [classe.name/] begin	
	link-library { "[generateWrapperString(classe)/]" }
[let ops : Sequence(Operation) = classe.eAllContents(Operation)]
	implements-functions {
[for(op : Operation | ops)]
		[op.name/][if(ops->indexOf(op) < ops->size())],[/if]
[/for]
	}
[/let]
	external-objects {  }
	external-libraries {  }
	test-apps {  } 
end
[/if]
[/for]
[/let]
[/template]

[template private generateDataTypeFile(model : Model)]
[file('DatatypeDecl.adl', false, 'UTF-8')]
[generateTypes(model)/]
[/file]
[/template]

[template private generateFunctionFile(model : Model)]
[let behaviors : Sequence(Behavior) = getUniqueBehaviorFromModel(model)]
[file ('FunctionDecl.adl', false, 'UTF-8')]
[comment][generateFunctionBehavior(behaviors)/][/comment]
[generateFunctions(model)/]
[/file]
[/let]
[/template]

[template private generateProcessingFile(model : Model)]

[file('ProcessingDecl.adl', false, 'UTF-8')]
[generateProcessings(model)/]
[/file]
[/template]

[template private generatePrototypeFile(model : Model)]
[file(model.name + '.adl', false, 'UTF-8')]
language CPP
language VLE
language MATLAB

import "DatatypeDecl.adl"
import "FunctionDecl.adl"
import "ProcessingDecl.adl"

[generatePrototypes(model)/]

//Wrappers
[generateWrapper(model)/]
[/file]
[/template]

[template private generateOutputSimulatorFile(model : Model)]
[file('.' + model.name + '.output.adl', false, 'UTF-8')]
language CPP
language VLE
language MATLAB

[generateTypes(model)/]

[generateFunctions(model)/]

[generateProcessings(model)/]

[generatePrototypes(model)/]

[generateWrapper(model)/]
[/file]
[/template]