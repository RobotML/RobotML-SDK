[comment encoding = UTF-8 /]
[comment]
 Copyright (c) 2013 DASSAULT AVIATION.
  
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 
 Contributors:
   Nicolas BRODNAN (Dassault Aviation) nicolas.brodnan@gmail.com - Generate Athena source files
[/comment]
[module generateAthena('http://www.eclipse.org/uml2/3.0.0/UML')/]

[import org::eclipse::papyrus::robotml::generators::common::mmqueries::ArchitectureQueries/]
[import org::eclipse::robotml::generators::acceleo::athena::files::generateTypes/]
[import org::eclipse::robotml::generators::acceleo::athena::files::generateFunctions/]
[import org::eclipse::robotml::generators::acceleo::athena::files::generateProcessings/]
[import org::eclipse::robotml::generators::acceleo::athena::files::generatePrototypes/]
[import org::eclipse::robotml::generators::acceleo::athena::files::configGenerator/]
[import org::eclipse::robotml::generators::acceleo::athena::mmqueries::MMSpecificQueries /]

[comment]
Main point of the generation. Export RobotML model to athena source files.
[/comment]
[template public generateAthena(model : Model)]
[comment @main /] 
	
[if(isModelSaved())]
[if(isModelValid(model))]
[searchUsedDataType(model)/]
[generateDataTypeFile(model)/]
[generateFunctionFile(model)/]
[generateProcessingFile(model)/]
[generatePrototypeFile(model)/]
[generateOutputSimulatorFile(model)/]
[else]
[let msg : String = 'Can\'t generate model, because not have an environment component.']
[showErrorMessageDlg(msg)/]
[/let]
[/if]
[/if]
[/template]

[comment]
Generate wrapper for externals librairies
[/comment]
[template private generateWrapper(model : Model)]
[let classes : Sequence(Class) = getModelClasses(model)]
//classes size : [classes->size()/]
[for(classe : Class | classes)]
[if(isExternalLibrairy(classe))]
wrapper [classe.name/] begin	
	link-library { "[generateWrapperString(classe)/]" }
[let ops : Sequence(Operation) = classe.eAllContents(Operation)]
	implements-functions {
[for(op : Operation | ops)]
		[op.name/][if(ops->indexOf(op) < ops->size())],[/if]
[/for]
	}
[/let]
	external-objects {  }
	external-libraries {  }
	test-apps {  } 
end
[/if]
[/for]
[/let]
[/template]

[comment]
Generate the athena datatypes file
[/comment]
[template private generateDataTypeFile(model : Model)]
[file('DatatypeDecl.adl', false, 'UTF-8')]
[generateTypes(model)/]
[/file]
[/template]

[comment]
Generate the athena function file
[/comment]
[template private generateFunctionFile(model : Model)]
[let behaviors : Sequence(Behavior) = getUniqueBehaviorFromModel(model)]
[file ('FunctionDecl.adl', false, 'UTF-8')]
[generateFunctions(model)/]
[/file]
[/let]
[/template]

[comment]
Generate the athena processing file
[/comment]
[template private generateProcessingFile(model : Model)]
[file('ProcessingDecl.adl', false, 'UTF-8')]
[generateProcessings(model)/]
[/file]
[/template]

[comment]
Generate the athena prototype file
[/comment]
[template private generatePrototypeFile(model : Model)]
[file(model.name + '.adl', false, 'UTF-8')]
language CPP
language VLE
language MATLAB

import "DatatypeDecl.adl"
import "FunctionDecl.adl"
import "ProcessingDecl.adl"

[generatePrototypes(model)/]

//Wrappers
[generateWrapper(model)/]
[/file]
[/template]


[comment]
Generate the specific aathena global file for simulator's input[/comment]
[template private generateOutputSimulatorFile(model : Model)]
[file('.' + model.name + '.output.adl', false, 'UTF-8')]
language CPP
language VLE
language MATLAB

[generateTypes(model)/]

[generateFunctions(model)/]

[generateProcessings(model)/]

[generatePrototypes(model)/]

[generateWrapper(model)/]
[/file]
[/template]