grammar org.xtext.AthenaDSL with org.eclipse.xtext.common.Terminals

generate athenaDSL "http://www.xtext.org/AthenaDSL"

////////////////////////////////////////////////////////////////////////////////////////
/// Athena V5 grammar definition
///
/// Copyright (c) 2013 Dassault Aviation.
/// 
/// All rights reserved. This program and the accompanying materials
/// are made available under the terms of the Eclipse Public License v1.0
/// which accompanies this distribution, and is available at
/// http://www.eclipse.org/legal/epl-v10.html
/// 
/// Contributors:
///  Stephane Millet (Dassault Aviation) stephane.millet@dassault-aviation.com - Initial Implementation
///  Nicolas Brodnan (Dassault Aviation) nicolas.brodnan@gmail.com - updtae due to Athena grammar evolution
///  Bruno Patin (Dassault Aviation) bruno.patin@dassault-aviation.com - documentation
////////////////////////////////////////////////////////////////////////////////////////

Project : 
		(imports += Import)*
		(languages += LanguageDeclaration)* 
	 	(types += DataType)*
	 	(validities += validityFunctionDeclaration)*
	 	(imports += Import)*
		(functions += functionDeclaration)*
		(imports += Import)*
 		(processings += ProcessingDeclaration)*
 		(imports += Import)* 
		(prototypes+=prototypeDeclaration)*
		(imports += Import)* 
		(wrappers+=wrapperDeclaration)*
;
	
//
Import:
	'import' importURI=STRING
;

////////////////////////////////////////////////////////////////////////////////////////
/// Languages and Datatypes
////////////////////////////////////////////////////////////////////////////////////////
 
// language declaration
LanguageDeclaration :
	'language' name=ID ; 

// DataTypes
DataType : (basicType | defineType | arrayType | vectorType | mapType | structType | unionType);

// Define
defineType :
	'define' name=ID 'is' typename=[DataType|ID] 
;

// Validity function Declaration
validityFunctionDeclaration :
	'validity' typename=[DataType|ID] fctName = ID	
;

// Basic Type declaration
basicType : 
		'basic' name=ID begin
			(includes += includeDecl)*
			(languages += languageDecl)+
			(casts += lexicalCastDecl)*
		end 
;

// Include Declaration for Basic Types
includeDecl :
	'include' lang=[LanguageDeclaration|ID] ':' includeName=STRING  
;

// Language Declaration for Basic Types
languageDecl :
	'language' lang=[LanguageDeclaration|ID] ':' trans=STRING  '=' value=STRING   
;

// Lexical cast declaration
lexicalCastDecl : 
	'lexicalCast' lang=[LanguageDeclaration|ID] ':' cast=STRING
;
 
// Array Parameter Declaration
arrayType :
	'array' '<' typename=[DataType|ID] '>' name=ID  
	'[' 
		(indices+=index) (coma indices+=index )*
	']' 
;

	
// Vector Parameter Declaration
vectorType :
	'vector' '<' typename=[DataType|ID] '>' name=ID 
;
	
// Map Parameter Declaration
mapType :
	'map' '<' keytype=[DataType|ID] coma valtype=[DataType|ID] '>' name=ID 
;

// Structured Type
structType : 
	'struct' name=ID 
	( '<' indices+=index ( coma indices+=index )*  '>' )?
	begin
	( parameters+=structElement )+		
	end 
;

// Simple Parameter Declaration
structElement :
	typename=[DataType] 
	( '<' indices+=index ( coma indices+=index )* '>' )? 
	name=ID 
	( hasInitValue?='='  initValue=STRING  )? 
;
	
index :
	dim=ID (hasValue?='=' value=INT )? ;

// Structured Type
unionType :
	'union' name=ID begin elements+=[DataType] ( coma elements+=[DataType] )+ 
	end 
;

	
////////////////////////////////////////////////////////////////////////////////////////
/// Function declaration
////////////////////////////////////////////////////////////////////////////////////////

FuncProc : functionDeclaration|ProcessingDeclaration;

// function
functionDeclaration : 
	'function' name=ID '<' lang=[LanguageDeclaration|ID] '>' openPar args=argumentsDeclaration? closePar 
	 
;
	
argumentsDeclaration :
	arguments+=arg (arguments+=arg )*
;

// function parameter declaration
arg :
	modifier=('inout'|'in'|'out') type=[DataType|ID] name=ID? 
;


////////////////////////////////////////////////////////////////////////////////////////
/// processing
////////////////////////////////////////////////////////////////////////////////////////


// processing
ProcessingDeclaration : 
	'processing' name=ID 
	openPar 
		( args=argumentsDeclaration? )?
	closePar 
	begin
	( localParameters+=localParameterDeclaration ) *
	( localEvents+=localEventDeclaration ) *
	( statements+=statement) *
	end 
;

statement :
	call=( functionCall | whileblock | ifblock )
;
	
// processing local declaration
localParameterDeclaration  : 
	'parameter' type=[DataType|ID] name=ID ( hasValue?='=' value=STRING )?  
;

// Event
localEventDeclaration : 
	 eventDeclaration
;


// "if then else" block
ifblock  :
	'if' eventName=[localEventDeclaration] 'then' begin
		(ifBlocks+=statement)+
		end
	( 
		hasElse?='else' begin (elseBlocks+=statement)+ end
	)?
	
;

// "while evt do ... end" block 
whileblock  :
	'while' eventName=[localEventDeclaration] 'do'
	begin
		(blocks+=statement)+
	end
;
		
// processing function call
functionCall  :
	'execute' name=[FuncProc|ID] openPar 
		( arguments+=farg ( coma arguments+=farg )* )?
	closePar 
;


////////////////////////////////////////////////////////////////////////////////////////
/// ARCHITECTURE
////////////////////////////////////////////////////////////////////////////////////////

// prototype
prototypeDeclaration : 
	'prototype' name=ID 
	( 
		'is' superType=[prototypeDeclaration|ID]
	)? 
	begin
	(definitions+=architectureElement)*
	end  
;

// what elements can be declared in a "prototype"
architectureElement :
		      parameterDeclaration|
		      referenceDeclaration|
		      eventDeclaration|
		      statesetDeclaration|
		      instanceDeclaration|
		      interactionDeclaration|
		      signalDeclaration
;

// Signal
signalDeclaration : 
	'signal' name=ID 
	
;

// Event
eventDeclaration : 
	'event' name=ID
	'{'  conditions+=eventCondition ( coma conditions+=eventCondition )*  '}'
	
;

// Conditions
eventCondition :

	leftPart=ID
	cond=('=='|'>='|'<='|'<'|'>'|'%%') 
	( 
		rightPartI=ID | rightPartN=INT | rightPartS=STRING
	)
;


// parameter
parameterDeclaration :
	'parameter' typeName=[DataType]  
	( hasNbW?='#' openPar nbw=INT closePar )?
	( hasInfiniteWriter?='!' )?
	name=ID 
	( 
	  ( hasValue?='=' value=STRING ) |
	  (	hasConfig?='=' '<>' ) |
	  (	hasConfigWithDefaultValue?='=' '<'	value=STRING '>' ) 
	)?
	 
;
	
// stateset 
statesetDeclaration :
	'stateset' name=ID 
	'{' 
		states+=stateDeclaration coma states+=stateDeclaration
		( coma states+=stateDeclaration )*
	'}' '=' init=[stateDeclaration] 
	begin
	(transitions+=transitionDeclaration)* 
	end
;

//
stateDeclaration :
	name=ID
;
	
// Transition
transitionDeclaration :
	'transition' 'from' from=ID 'to' to=ID 'on' evt=ID ( raise?='raise' sig=ID )? 
;
	
// instance
instanceDeclaration:
	'instance' typeName=[prototypeDeclaration|ID]('[]')? name=ID 		
	( 'INHIBIT' ) ? 
	
;
	
// interaction
interactionDeclaration :
	( wwhen?='when' openPar stateset=ID '::' wstate=ID closePar  )?
	( iif?='if' openPar event=ID closePar  )?
	begin
		(icalls+=interactionCall)+
	( 'INHIBIT'	)?
	end
;
//
interactionCall:
	'interaction' fctName = [FuncProc|ID]
			openPar ( arguments+=farg ( coma arguments+=farg )* )? closePar
			;

// function parameter declaration
farg :
	varName=ID 
;

// parameter
referenceDeclaration :
	'reference' 
	'<' typeName=[DataType]'>' 
	(upway?=at)? name = qualifiedName 
	( 'as' alias=ID )? 
;
	
qualifiedName :
	name+=ID ( dot name+=ID )* ;
	
// parameter
//Declaration :
//	'alias' '<' the_typeName=[DataType|ID] '>' name=[parameterDeclaration|ID] ':' varName=ID "->" attrName=ID  
//;accessor

wrapperDeclaration :
	'wrapper' name=ID begin
		'link-library' beginAcc link=STRING endAcc 
		'implements-functions' beginAcc ( functions += ID ( coma functions += ID)* )? endAcc 
		'external-objects' beginAcc (objects += ID ( coma objects += ID )* )? endAcc
		'external-libraries' beginAcc (libraries += STRING ( coma libraries += STRING)* )? endAcc 
		'test-apps' beginAcc ( tests += ID ( coma tests += ID)* )? endAcc
	end
;

//
beginAcc : '{';
endAcc : '}';
begin : 'begin';
end : 'end';
openPar : '(';
closePar : ')';
at: '@';
dot: '.';
coma:',';