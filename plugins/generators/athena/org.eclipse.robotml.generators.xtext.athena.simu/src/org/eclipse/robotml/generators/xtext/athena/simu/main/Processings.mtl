[comment encoding = UTF-8 /]
[module Processings('http://www.xtext.org/AthenaDSL')/]

[import org::eclipse::robotml::generators::xtext::athena::simu::main::jqueries /]

[template public Processings(project : Project)]

[file ('processings.cc', false, 'UTF-8')] 

//----------------------------------------------------------------
// Include files, Namespaces, Externals
//----------------------------------------------------------------

#include "Compatibility.h"
#include "TypeDefs.h"
#include "tests.h"
#include <iostream>
#include <boost/function.hpp>

using namespace std;
using namespace AthenaV3;

extern "C" __IMPORT__ void* getUserFunction(const std::string& name);
extern "C" __EXPORT__ void  declareUserFunction(const std::string& name, void*);

//----------------------------------------------------------------
// Implementation 
//----------------------------------------------------------------

namespace generated {
using namespace generated;

// Functors ------------------------------------------------------
[for (func : functionDeclaration | project.functions)]
boost::function<void ([getCPPFunctionSignature(func)/])> _[func.name/];
[/for]

// Processings ---------------------------------------------------

[for (proc : ProcessingDeclaration | project.processings)]
	
// Processing [proc.name/]
void _[proc.name/]([getProcessingSignature(proc)/]) {

	// Local parameter declarations
	[for (loc : localParameterDeclaration | proc.localParameters)] 
	[loc.type.name/] [loc.name/];
	[/for]

	// Local parameter initialization
	[for (loc : localParameterDeclaration | proc.localParameters)]
	init_[loc.type.name/]([loc.name/]); 
	[if (loc.hasValue)]
	[loc.name/]= [loc.value/];
	[/if]
	[/for]
	
	// Local events  
	[for (evt : localEventDeclaration | proc.localEvents)]
	bool [evt.oclAsType(eventDeclaration).name/] = false; 
	[/for]

	// Calls to other processings or user models
[for (call : statement | proc.statements)]
	[processStatement(call)/]
[/for]
	
}


[/for]

// Processings declaration and user function init
void processings_init() 
{
	// processing declaration
[for (proc : ProcessingDeclaration | project.processings)]
	declareUserFunction("[proc.name/]",(void*)&_[proc.name/]);
[/for]

	// user function bindings 
[for (func : functionDeclaration | project.functions)]
	_[func.name/] = (void (*)([getCPPFunctionSignature(func)/])) getUserFunction("[func.name/]");
[/for]
}

//----------------------------------------------------------------
// End of implementation
//----------------------------------------------------------------
} // namespace generated



[/file]
	
[/template]

[template public processStatement(s : statement)]
[if (isFunctionCall(s))][let fc : functionCall = s.call.oclAsType(functionCall)]
_[fc.name.name/]([getProcessingFunctionCallSignature(fc)/]);
[/let][elseif (isWhileBlock(s))]
[processWhileBlock(s.call.oclAsType(whileblock))/]
[elseif (isIfBlock(s))]
[processIfBlock(s.call.oclAsType(ifblock))/]
[/if]
[/template]

[template public processFunctionCall(fc : functionCall)]
[/template]

[template public processWhileBlock(block : whileblock)]
while([block.eventName.oclAsType(eventDeclaration).name/]) {
[for (s : statement | block.blocks)]
	[processStatement(s)/]
[/for]
}
[/template]

[template public processIfBlock(block : ifblock)]
if([block.eventName.oclAsType(eventDeclaration).name/]) { 
[for (s : statement | block.ifBlocks)]
	[processStatement(s)/]
[/for]
[if (block.hasElse)]
} else {
[for (s : statement | block.elseBlocks)]
	[processStatement(s)/]
[/for]
[/if]
}
[/template]


