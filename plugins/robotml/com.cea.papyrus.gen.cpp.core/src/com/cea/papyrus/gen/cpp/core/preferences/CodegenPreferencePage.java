/*****************************************************************************
 * Copyright (c) 2012 CEA LIST.
 *
 *    
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the CeCILL-C Free Software License v1.0
 * which accompanies this distribution, and is available at
 * http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html
 *
 *
 *****************************************************************************/

package com.cea.papyrus.gen.cpp.core.preferences;

import org.eclipse.jface.preference.FieldEditorPreferencePage;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.StringFieldEditor;
import org.eclipse.jface.text.Document;
import org.eclipse.jface.text.source.SourceViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Group;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPreferencePage;

import com.cea.papyrus.gen.cpp.core.Activator;

/**
 * This class represents a preference page that is contributed to the
 * Preferences dialog. By subclassing <samp>FieldEditorPreferencePage </samp>,
 * we can use the field support built into JFace that allows us to create a page
 * that is small and knows how to save, restore and apply itself.
 * <p>
 * This page is used to modify preferences only. They are stored in the
 * preference store that belongs to the main plug-in class. That way,
 * preferences can be accessed directly via the preference store.
 */

public class CodegenPreferencePage extends FieldEditorPreferencePage implements
		IWorkbenchPreferencePage {

	// Selection of the desired suffix for generated files
	public static final String P_HEADER_SUFFIX = "headSuffix";

	public static final String P_IMPLEM_SUFFIX = "implSuffix";

	// Use a specific comment header in generated files
	public static final String P_COMMENT_HEADER = "commentHeader";

	private Document pCommentDoc = new Document();

	public CodegenPreferencePage() {
		super(GRID);
		setPreferenceStore(Activator.getDefault().getPreferenceStore());
		setDescription("This preferences page allows to customize PapyrusCpp code generation");
		// initializeDefaults();
	}

	public void addTextField(String name, String label, Document currentDoc) {
		// ///////////////////////////////////////////////////////////////////////
		// Create a Group for the text
		// ///////////////////////////////////////////////////////////////////////
		Group txtGroup = new Group(getFieldEditorParent(), SWT.RESIZE);
		txtGroup.setLayout(new FillLayout());
		txtGroup.setText(label);
		txtGroup.setLayoutData(new GridData(GridData.FILL_BOTH));

		// Text area
		SourceViewer txtViewer = new SourceViewer(txtGroup, null, SWT.MULTI
				| SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);

		txtViewer.setDocument(currentDoc);

		// Retrieving existing preference
		String content = getPreferenceStore().getString(name);

		// Loading preference in txt zone
		currentDoc.set(content);

	}

	/**
	 * Creates the field editors. Field editors are abstractions of the common
	 * GUI blocks needed to manipulate various types of preferences. Each field
	 * editor knows how to save and restore itself.
	 */

	@Override
	public void createFieldEditors() {

		addField(new StringFieldEditor(P_HEADER_SUFFIX,
				"Suffix for C++ header files ", getFieldEditorParent()));
		addField(new StringFieldEditor(P_IMPLEM_SUFFIX,
				"Suffix for C++ implementation files ", getFieldEditorParent()));

		// Add P_COMMENT_HEADER
		addTextField(P_COMMENT_HEADER, "Header for generated files",
				pCommentDoc);
	}

	public void init(IWorkbench workbench) {
	}

	/**
	 * Sets the default values of the preferences.
	 */
	protected void initializeDefaults() {
		IPreferenceStore store = getPreferenceStore();

		store.setDefault(P_HEADER_SUFFIX, "h");
		store.setDefault(P_IMPLEM_SUFFIX, "cpp");

		// Default value for P_COMMENT_HEADER
		String defaultValue = "";
		String NL = System.getProperties().getProperty("line.separator");
		defaultValue = defaultValue
				+ "/************************************************************"
				+ NL;
		defaultValue = defaultValue + " *" + NL;
		defaultValue = defaultValue + " * Code Generated by Papyrus C++" + NL;
		defaultValue = defaultValue + " *" + NL;
		defaultValue = defaultValue
				+ " ***********************************************************/"
				+ NL;

		store.setDefault(P_COMMENT_HEADER, defaultValue);
	}

	@Override
	public void performDefaults() {

		// Store txt for P_COMMENT_HEADER
		getPreferenceStore().setToDefault(P_COMMENT_HEADER);
		// Re-Loading preference in txt zone
		pCommentDoc.set(getPreferenceStore().getString(P_COMMENT_HEADER));

		super.performDefaults();
	}

	@Override
	public boolean performOk() {

		// Store txt for P_COMMENT_HEADER
		String currentComment = pCommentDoc.get();
		getPreferenceStore().setValue(P_COMMENT_HEADER, currentComment);

		return super.performOk();
	}
}