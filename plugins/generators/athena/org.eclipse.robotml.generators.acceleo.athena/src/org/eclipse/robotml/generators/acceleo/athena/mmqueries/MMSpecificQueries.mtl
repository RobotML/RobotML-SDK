[comment encoding = UTF-8 /]
[module MMSpecificQueries('http://www.eclipse.org/uml2/3.0.0/UML', 'http://Papyrus/RobotML/1')]

[comment][query public sortUsedDataType(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'sortUsedDataType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/][/comment]

[query public searchUsedDataType(elt : Model) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'searchUsedDataType(org.eclipse.uml2.uml.Model)', Sequence{elt})
/]

[query public getModelClasses(elt : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getModelClasses(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/]

[comment][query public getAllDataTypes(elt : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getAllDataTypes(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/][/comment]

[comment][query public getAllBasicDataTypes(ne : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getAllBasicDataTypes(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/][/comment]

[comment][query public getAllStructuredDataTypes(ne : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getAllStructuredDataTypes(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/][/comment]

[comment][query public getAllEnumeration(ne : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getAllEnumeration(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/][/comment]

[comment][query public getUnknownDataTypes(elt : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getUnknownDataTypes(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/][/comment]

[query public getSuperClass(elt : Class) : Class = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getSuperClass(org.eclipse.uml2.uml.Class)', Sequence{elt}) 
/]

[comment][query public getSubModels(elt : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getSubModels(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/][/comment]

[query public getOperationsFromModel(elt : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getOperationsFromModel(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/]

[query public hasDefaultValue(prop : Property) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasDefaultValue(org.eclipse.uml2.uml.Property)', Sequence{prop})
/]

[query public getProcessingFromModel(elt : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getProcessingFromModel(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/]

[comment][query public isProcessing(op : Operation) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isProcessing(org.eclipse.uml2.uml.Operation)', Sequence{op})
/][/comment]

[query public getCommentFromElement(elt : NamedElement) : String =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getCommentFromElement(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/]

[query public hasComment(elt : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasComment(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/]

[query public getAthenaDataTypeDeclaration(elt : NamedElement) : String =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getAthenaDataTypeDeclaration(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/]

[query public isExternalLibrairy(class : Class) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isExternalLibrairy(org.eclipse.uml2.uml.Class)', Sequence{class})
/]

[comment][query public hasValidStates(fsm : StateMachine) : Boolean = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasValidStates(org.eclipse.uml2.uml.StateMachine)', Sequence{fsm})
/][/comment]

[comment][query public hasValidTransition(fsm : StateMachine) : Boolean = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasValidTransition(org.eclipse.uml2.uml.StateMachine)', Sequence{fsm})
/][/comment]

[query public hasValidFSMDeclaration(class : Class) : Boolean = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasValidFSMDeclaration(org.eclipse.uml2.uml.Class)', Sequence{class})
/]

[query public getOpaqueBehaviorFromModel(elt : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getOpaqueBehaviorFromModel(org.eclipse.uml2.uml.NamedElement)', Sequence{elt})
/]

[query public generateWrapperString(classe : Class) : String =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'generateWrapperString(org.eclipse.uml2.uml.Class)', Sequence{classe})
/]

[query public generateOperationStateString(vertex : Vertex) : String =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'generateOperationStateString(org.eclipse.uml2.uml.Vertex)', Sequence{vertex})
/]

[comment][query public getContainerDataTypes(ne : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getContainerDataTypes(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/][/comment]

[query public getContainerTypeDeclaration(ne : NamedElement) : String =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getContainerTypeDeclaration(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public getDefineType(ne : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getDefineType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public getAllModelDataTypes(ne : NamedElement) : Sequence(DataType) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getAllModelDataTypes(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/] 

[query public hasDataTypeValidity(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasDataTypeValidity(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public getDataTypeValidity(ne : NamedElement) : String =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getDataTypeValidity(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public getUnionType(ne : NamedElement) : Sequence(NamedElement) = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getUnionType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public getStereotypeComponentUsedInModel(ne : NamedElement) : Sequence(String) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getStereotypeComponentUsedInModel(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[comment][query public getTransitionGuard(transition : Transition) : Algorithm =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getTransitionGuard(org.eclipse.uml2.uml.Transition)', Sequence{transition})
/][/comment]

[comment][query public getTransitionEffect(transition : Transition) : Algorithm =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getTransitionEffect(org.eclipse.uml2.uml.Transition)', Sequence{transition})
/][/comment]

[query public getSortedDataType(ne : NamedElement) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getSortedDataType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public isBasicType(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isBasicType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public isEnumerationType(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isEnumerationType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public isStructuredType(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isStructuredType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public isContainerType(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isContainerType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public isDefineType(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isDefineType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public isUnionType(ne : NamedElement) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isUnionType(org.eclipse.uml2.uml.NamedElement)', Sequence{ne})
/]

[query public getFSMOpaqueBehavior(model : Model, sm : StateMachine) : Sequence(OpaqueBehavior) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getFSMOpaqueBehavior(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.StateMachine)', Sequence{model, sm})
/]

[query public getFSMStates(sm : StateMachine) : Sequence(Vertex) = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getFSMStates(org.eclipse.uml2.uml.StateMachine)', Sequence{sm})
/]

[query public isStartingState(state : Vertex) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isStartingState(org.eclipse.uml2.uml.Vertex)', Sequence{state})
/]

[comment][query public isConnectedToOwner(port : Port, classe : Class, model : Model) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isConnectedToOwner(org.eclipse.uml2.uml.Port, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Model)', Sequence{port, classe, model})
/][/comment]

[comment][query public getReferences(model : Model, classe : Class) : Sequence(Port) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getReferences(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class)', Sequence{model, classe})
/][/comment]

[comment][query public isConnected(port : Port) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isConnected(org.eclipse.uml2.uml.Port)', Sequence{port})
/][/comment]

[comment][query public hasValidConnection(port : Port) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasValidConnection(org.eclipse.uml2.uml.Port)', Sequence{port})
/][/comment]

[comment][query public getOriginsPort(model : Model, classe : Class, port : Port) : Sequence(NamedElement) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getOriginsPort(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/][/comment]

[comment][query public isLinkedToParentInstance(model : Model, classe : Class, port : Port) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isLinkedToParentInstance(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/][/comment]

[comment][query public isLinkedToProperty(model : Model, classe : Class, port : Port) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isLinkedToProperty(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/][/comment]

[comment][query public getLinkedToProperty(model : Model, classe : Class, port : Port) : Property =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getLinkedToProperty(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/][/comment]

[comment][query public findPortOwner(model : Model, classe : Class, port : Port) : Property =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'findPortOwner(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/][/comment]

[query public hasObjectInstanceConnection(model : Model, classe : Class, port : Port) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasObjectInstanceConnection(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/]

[query public hasParentInstanceConnection(model : Model, classe : Class, port : Port) : Boolean =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'hasParentInstanceConnection(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/]

[query public getObjectInstanceConnectionName(model : Model, classe : Class, port : Port) : String =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getObjectInstanceConnectionName(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/]

[query public getParentInstanceConnection(model : Model, classe : Class, port : Port) : Class =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getParentInstanceConnection(org.eclipse.uml2.uml.Model, org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Port)', Sequence{model, classe, port})
/]

[comment][query public getPorts(classe : Class) : Sequence(Port) =
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'getPorts(org.eclipse.uml2.uml.Class)', Sequence{classe})
/][/comment]

[query public isModelValid(model : NamedElement) : Boolean = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isModelValid(org.eclipse.uml2.uml.NamedElement)', Sequence{model})
/]

[query public showErrorMessageDlg(msg : String) : OclVoid = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'showErrorMessageDlg(java.lang.String)', Sequence{msg})
/]

[query public isModelSaved() : Boolean = 
	invoke('org.eclipse.robotml.generators.acceleo.athena.mmqueries.SpecificQueries', 'isModelSaved()', Sequence{})
/]