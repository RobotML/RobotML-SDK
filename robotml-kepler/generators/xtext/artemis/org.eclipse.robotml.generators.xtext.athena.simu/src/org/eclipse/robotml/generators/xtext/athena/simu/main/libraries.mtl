[comment encoding = UTF-8 /]
[module libraries('http://www.xtext.org/AthenaDSL')/]

[import org::eclipse::robotml::generators::xtext::athena::simu::main::jqueries /]

[template public libraries(project : Project)]


[for (wrapper : wrapperDeclaration | project.wrappers)]
	[makefile(wrapper)/]
	[stub(project, wrapper)/]
[/for]

[/template]

[template public makefile(wrapper : wrapperDeclaration)]
	[let fname : String = 'MakefileLinux_'] 
	[file (fname.concat(wrapper.name), false, 'UTF-8')]
include MakefileLinux-common

SOURCES = \
[for (object : String | wrapper.objects)]
	[object/].cc \
[/for]
	stubCPP_[wrapper.name/].cc TypeDefs.cc  

LIBFDIR = -L $(BASE)/base -lfdir
LIBS = -L $(GEOLIB) -lgeolib $(LIBFDIR) $(BOOST_LIB)

OBJS     = $(SOURCES:.cc=.o)
INCLUDES = -I. -I $(BASE)/base -I $(BASE)/include -I $(GEOLIB) $(BOOST_INCLUDE)

all: $(OBJS) lib[wrapper.name/].so

clean:
	$(RM) -f simu.exe *.o *.so *.a

.cc.o:
	g++ $(CC_OPTIONS) $(INCLUDES) -c $< 

.c.o:
	gcc $(C_OPTIONS) $(INCLUDES) -c $< 

lib[wrapper.name/].so: $(OBJS)
	g++ $(DLL_OPTIONS) -o lib[wrapper.name/].so $(OBJS) $(LIBS)
	cp lib[wrapper.name/].so $(TARGET)

	[/file]
	[/let]
[/template]

[template public stub(project : Project, wrapper : wrapperDeclaration)]
	[let fname : String = 'stubCPP_'] 
	[file (fname.concat(wrapper.name).concat('.cc'), false, 'UTF-8')]
//----------------------------------------------------------------
// Include files
//----------------------------------------------------------------
#include "Compatibility.h"
#include "PredefinedTypes.h"
#include "TypeDefs.h"
#include <iostream>
#include "tests.h"

//
// Namespace ---------------------------------------------------------------------
//

using namespace AthenaV3;
using namespace std;

//
// -------------------------------------------------------------------------------
//

extern "C" __IMPORT__ void declareUserFunction(const std::string&, void*);

//----------------------------------------------------------------
// User Function Declaration
//----------------------------------------------------------------

[for (stub : functionDeclaration | project.functions)]
	[if (isCPPFunction(stub))]
__EXPORT__ void [stub.name/]([getCPPFunctionSignature(stub)/]);
	[/if]	
[/for]

//----------------------------------------------------------------
// User Function To Directory
//----------------------------------------------------------------

namespace generated {

class StubCPPDLL {
public:
	StubCPPDLL() {
[for (stub : functionDeclaration | project.functions)]
	[if (isCPPFunction(stub))]
		declareUserFunction("[stub.name/]", (void*)&[stub.name/]);
	[/if]	
[/for]
	}
};

StubCPPDLL myStubCPPDLL;

}

//----------------------------------------------------------------
// User Function Wrapper Implementations
//----------------------------------------------------------------
	[for (func : String | wrapper.functions)]
		[for (stub : functionDeclaration | project.functions)]
	    	[if (isCPPFunction(stub) and (stub.name.equalsIgnoreCase(func)))]
/**
 *
 */
__EXPORT__ void [stub.name/]([getCPPFunctionSignature(stub)/])
{
	// [protected ('wrapper')]
	static unsigned int [stub.name/]_count = 0;
	[stub.name/]_count ++;
	std::cout << "***\t[stub.name/] called:\t" << [stub.name/]_count << " at " << getCurrentTime() << std::endl;
	// [/protected]
}

			[/if]	
		[/for]
	[/for]

	[/file]
	[/let]
[/template]