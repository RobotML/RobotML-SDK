[comment encoding = UTF-8 /]
[module generateFunctions('http://www.eclipse.org/uml2/3.0.0/UML')/]

[comment][import org::eclipse::papyrus::robotml::generators::common::mmqueries::GeneralQueries /]
[import org::eclipse::papyrus::robotml::generators::common::mmqueries::ArchitectureQueries /][/comment]
[import org::eclipse::robotml::generators::acceleo::athena::mmqueries::MMSpecificQueries /]

[template public generateFunctions(model : Model)]

[comment]We search the funtions in the model (including imported package)[/comment]
[let operations : Sequence(NamedElement) = getOperationsFromModel(model)]
[for(elt : NamedElement | operations)]
//function : [elt.name/]
[if(hasComment(elt))]
	[getCommentFromElement(elt)/]
[/if]
[let op : Operation = elt.oclAsType(Operation)]
[if(isAthenaFunction(op))]
[generateFunctionBody(op)/]
[/if]
[/let]
[/for]
[/let]
[/template]

[comment]generate the function body[/comment]
[template private generateFunctionBody(op : Operation)]
function [op.name/] < CPP > (
[let params : OrderedSet(Parameter) = op.ownedParameter]
[for(param : Parameter | params)]
[if(hasComment(param.oclAsType(NamedElement)))]
						[getCommentFromElement(param.oclAsType(NamedElement))/]
[/if]
						[param.direction/] [param.type.name/] [param.name.toLower()/] [if(params->indexOf(param)=params->size())])[/if]			
[/for]
[/let]
[/template]
