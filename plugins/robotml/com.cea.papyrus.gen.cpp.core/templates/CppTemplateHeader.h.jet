<%@ jet package		=	"com.cea.papyrus.gen.cpp.core.jet"
	skeleton        =   "generator.skeleton"
	imports			=	"com.cea.papyrus.gen.cpp.core.jet.doc.* org.eclipse.uml2.uml.Package org.eclipse.uml2.uml.Class org.eclipse.uml2.uml.* com.cea.papyrus.gen.cpp.core.jet.util.* com.cea.papyrus.gen.cpp.core.CppStereo com.cea.papyrus.gen.cpp.core.utils.GenUtils java.util.*"
 	class			=	"CppTemplateHeader"
 %>
<%
//////////////////////////////////////////////////////////////////////////////////////////
// Java preparation
//////////////////////////////////////////////////////////////////////////////////////////
	
	// Retrieve the class
	Classifier currentClass = (Classifier) argument;

	// Get the package name
	String className = currentClass.getName();
	String classFullName = GenUtils.getFullName(currentClass);
	String classFULLNAME = classFullName.toUpperCase();
	String openNS			= GenUtils.openNS (currentClass); 
	String closeNS			= GenUtils.closeNS (currentClass); 

	// Include declaration "CppInclude"
	String headerDecl = "";
	if (GenUtils.hasStereotype(currentClass, CppStereo.include)) {
		headerDecl = "/* Include from CppInclude declaration                      */"
			+ NL + headerDecl;
		headerDecl = GenUtils.getTaggedValue(currentClass, CppStereo.include, "header");
	}

	// Prepare owner package header include
	Package ownerPackage = currentClass.getPackage();
	String ownerInclude = "";
	if (ownerPackage != null) {
		// Create an util template to prepare the declaration
		CppOwnerPackageIncludeDeclaration jetOwnerInclude = new CppOwnerPackageIncludeDeclaration();
		// Execute the util template
		ownerInclude = jetOwnerInclude.generate(ownerPackage);
	}

	// Prepare owned type and enum declaration
	String typeEnumDefPackage = "";
	String typeEnumDef = "";

	CppClassTypeAndEnum jetTE = new CppClassTypeAndEnum();
	typeEnumDef = jetTE.generate(currentClass);

	CppClassTypeAndEnumPackage jetTEp = new CppClassTypeAndEnumPackage();
	typeEnumDefPackage = jetTEp.generate(currentClass);

	// Prepare template parameter declaration
	Iterator<org.eclipse.uml2.uml.TemplateParameter> tparam =
		GenUtils.getTemplateParameters(currentClass).iterator();

	String tParamDecl = "";
	String tDecl = "";

	while (tparam.hasNext()) {
		CppTemplateParameter jetTParam = new CppTemplateParameter();
		tParamDecl = tParamDecl + jetTParam.generate(tparam.next());

		if (tparam.hasNext()) {
			tParamDecl = tParamDecl + ", ";
		}
	}

	tDecl = "template <" + tParamDecl + ">" + NL;

	// Prepare dependency includes
	CppClassAllIncludesDeclaration jetClassIncludes = new CppClassAllIncludesDeclaration();
	String classIncludes = jetClassIncludes.generate(argument);
	if (!classIncludes.equals("")) {
		classIncludes = "/* Structural includes (inheritance, dependencies...       */"
			+ NL + classIncludes;
	}

	// Prepare attributes and Methods declarations
	String publicAttributes = "";
	String protectedAttributes = "";
	String privateAttributes = "";
	String publicOperations = "", publicOperationsImpl = "";
	String protectedOperations = "", protectedOperationsImpl = "";
	String privateOperations = "", privateOperationsImpl = "";

	// Attributes
	CppClassAttributesDeclaration jetClassPAttr = new CppClassAttributesDeclaration();
	publicAttributes			= jetClassPAttr.generate(currentClass, VisibilityKind.PUBLIC_LITERAL);
	protectedAttributes			= jetClassPAttr.generate(currentClass, VisibilityKind.PROTECTED_LITERAL);
	privateAttributes			= jetClassPAttr.generate(currentClass, VisibilityKind.PRIVATE_LITERAL);
		
	// Methods implementation
	String inlineFuncImpl = "";
	// String inlineFuncDecl = "";

	// Implementation
	CppOperationTemplateImplementation jetOpImpl = new CppOperationTemplateImplementation();
	// Declaration
	CppOperationDeclaration jetOpDecl = new CppOperationDeclaration();

	// Retrieve operations
	Iterator<Operation> operations = currentClass.getOperations().iterator();
	while (operations.hasNext()) {
		Operation currentOperation = operations.next();

		if (GenUtils.hasStereotype(currentOperation, CppStereo.noCodeGen) ||
			GenUtils.hasStereotype(currentOperation, CppStereo.pureVirtual)) {
			continue;
		}
		if (GenUtils.hasStereotype(currentOperation, CppStereo.inline)) {
				String opDoc = "";
				// Doc for the template
			CppOperationDoc jDoc = new CppOperationDoc();
			opDoc = jDoc.generate(currentOperation);
				// Inline declaration
			if (currentOperation.getVisibility() == VisibilityKind.PUBLIC_LITERAL) {
				publicOperations = publicOperations
					+ jetOpDecl.generate(currentOperation) + ";";
			} else if (currentOperation.getVisibility() == VisibilityKind.PRIVATE_LITERAL) {
				privateOperations = privateOperations
					+ jetOpDecl.generate(currentOperation) + ";";
			} else if (currentOperation.getVisibility() == VisibilityKind.PROTECTED_LITERAL) {
				protectedOperations = protectedOperations
					+ jetOpDecl.generate(currentOperation) + ";";
			} // else nothing
			// Inline implementation
			inlineFuncImpl = inlineFuncImpl + opDoc + NL + tDecl
				+ jetOpImpl.generate(currentOperation) + NL;
		} else {
			if (currentOperation.getVisibility() == VisibilityKind.PUBLIC_LITERAL) {
				publicOperationsImpl = publicOperationsImpl + tDecl
					+ jetOpImpl.generate(currentOperation);
				publicOperations = publicOperations
					+ jetOpDecl.generate(currentOperation) + ";";
			} else if (currentOperation.getVisibility() == VisibilityKind.PRIVATE_LITERAL) {
				privateOperationsImpl = privateOperationsImpl + tDecl
					+ jetOpImpl.generate(currentOperation);
				privateOperations = privateOperations
					+ jetOpDecl.generate(currentOperation) + ";";
			} else if (currentOperation.getVisibility() == VisibilityKind.PROTECTED_LITERAL) {
				protectedOperationsImpl = protectedOperationsImpl + tDecl
					+ jetOpImpl.generate(currentOperation);
				protectedOperations = protectedOperations
					+ jetOpDecl.generate(currentOperation) + ";";
			} // else nothing
		}
	}

	// Prepare inherited classes or implemented interfaces
	String inheritedDeclarations = "";
	CppClassInheritedDeclarations jetInherited = new CppClassInheritedDeclarations();
		inheritedDeclarations = jetInherited.generate(currentClass);

	
//////////////////////////////////////////////////////////////////////////////////////////
// The following part contains the template
//////////////////////////////////////////////////////////////////////////////////////////%>
#ifndef <%= classFULLNAME %>_H
#define <%= classFULLNAME %>_H

/************************************************************
              <%= className %> template class header
 ************************************************************/

<%= ownerInclude %>

<%= classIncludes %>

<%= headerDecl %>
<%= openNS %>
<%= typeEnumDefPackage %>
/************************************************************/
template <<%= tParamDecl %>> class <%= className %> <%= inheritedDeclarations %>{
<%= typeEnumDef %>
/* Public declarations                                      */
public:
<%= publicAttributes %>
<%= publicOperations %>

/* Protected declarations                                   */
protected:
<%= protectedAttributes %>
<%= protectedOperations %>

/* Private declarations                                     */
private:
<%= privateAttributes %>
<%= privateOperations %>

};

/************************************************************/
/* Template functions                                       */
<%= publicOperationsImpl %>
<%= protectedOperationsImpl %>
<%= privateOperationsImpl %>
/* Inline functions                                         */
<%= inlineFuncImpl %>

<%= closeNS %>

/************************************************************
              End of <%= className %> template class header
 ************************************************************/

#endif
