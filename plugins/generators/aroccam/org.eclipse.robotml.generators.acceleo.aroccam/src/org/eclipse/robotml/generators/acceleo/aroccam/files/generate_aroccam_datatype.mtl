[comment encoding = UTF-8 /]
[module generate_aroccam_datatype('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::eclipse::robotml::generators::acceleo::mmqueries::ArchitectureQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DataTypeQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::GeneralQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::FSMQueries /]


[template public generateAroccamDataType(model : Model) ]
[file ('src/' + model.name + 'Application/Datatypes/' + 'DataType.hpp', false, 'UTF-8')]
#ifndef __EFFIBOX_DataType_HPP__
#define __EFFIBOX_DataType_HPP__

//std
#include <string>

//effibox
#include <effibox/clock/date_time.hpp>

[comment] Std Datatypes[/comment]

typedef bool Bool;
typedef char Byte;
typedef char Char;
typedef int8_t Int8;
typedef uint8_t UInt8;
typedef int16_t Int16;
typedef uint16_t UInt16;
typedef int32_t Int32;
typedef uint32_t UInt32;
typedef int64_t Int64;
typedef uint64_t UInt64;
typedef float Float32;
typedef double Float64;

typedef std::string String;
typedef effibox::date_time Time;
typedef effibox::time_duration Duration;

struct Header
{
	Time stamp;
	String frame_id;
	UInt32 seq;
};

struct MultiArrayDimension
{
	UInt32 stride;
	UInt32 size;
	String label;
};

struct MultiArrayLayout
{
	MultiArrayDimension dim;
	UInt32 data_offset;
};

template <typename T>
struct MultiArray
{
	T data;
	MultiArrayLayout layout;
};

typedef MultiArray<Byte> ByteMultiArray;
typedef MultiArray<Float32> Float32MultiArray;
typedef MultiArray<Float64> Float64MultiArray;
typedef MultiArray<Int8> Int8MultiArray;
typedef MultiArray<Int16> Int16MultiArray;
typedef MultiArray<Int32> Int32MultiArray;
typedef MultiArray<Int64> Int64MultiArray;
typedef MultiArray<UInt8> UInt8MultiArray;
typedef MultiArray<UInt16> UInt16MultiArray;
typedef MultiArray<UInt32> UInt32MultiArray;
typedef MultiArray<UInt64> UInt64MultiArray;

struct ColorRGBA
{
	Float32 r;
	Float32 g;
	Float32 b;
	Float32 a;
};

[comment] Geometry Datatypes[/comment]

template<typename T>
struct GerenicPoint
{
  T x;
  T y;
  T z;
};

typedef GerenicPoint<Float64> Point;
typedef GerenicPoint<Float32> Point32;
typedef GerenicPoint<Float64> Vector3;

struct Quaternion
{
	Float64 w;
	Float64 z;
	Float64 y;
	Float64 x;
};

struct Polygon
{
	Point32 point;
};

struct Pose
{
	Quaternion orientation;
	Point position;
};

struct Pose2D
{
	Float64 theta;
	Float64 y;
	Float64 x;
};

struct PoseArray
{
	Pose poses;
	Header header;
};

struct Transform
{
	Vector3 translation;
	Quaternion rotation;
};

struct Twist
{
	Vector3 angular;
	Vector3 linear;
};

struct Wrench
{
	Vector3 torque;
	Vector3 force;
};

template<typename T>
struct GenericWithCovariance
{
	T data;
	Float64 covariance;
};

typedef GenericWithCovariance<Twist> TwistWithCovariance;
typedef GenericWithCovariance<Pose> PoseWithCovariance;

template<typename T>
struct GenericStamped
{
  Header header;
  T data;
};

typedef GenericStamped<Point> PointStamped;
typedef GenericStamped<Polygon> PolygonStamped;
typedef GenericStamped<Vector3> Vector3Stamped;
typedef GenericStamped<Pose> PoseStamped;
typedef GenericStamped<Twist> TwistStamped;
typedef GenericStamped<Quaternion> QuaternionStamped;
typedef GenericStamped<PoseWithCovariance> PoseWithCovarianceStamped;
typedef GenericStamped<Wrench> WrenchStamped;

[comment] Nav Datatypes[/comment]

struct Path
{
	Header header;
	PoseStamped poses;
};

struct Odometry
{
	String child_frame_id;
	Header header;
	TwistWithCovariance twist;
	PoseWithCovariance pose;
};

struct MapMetaData
{
	Time map_load_time;
	Pose origin;
	Float32 resolution;
	UInt32 width;
};

struct OccupancyGrid
{
	MapMetaData info;
	Int8 data;
	Header header;
};

struct GridCells
{
	Header header;
	Float32 cell_height;
	Float32 cell_width;
	Point cells;
};

[comment] Sensor Datatypes[/comment]

struct RegionOfInterest
{
	UInt32 height;
	Bool do_rectify;
	UInt32 y_offset;
	UInt32 x_offset;
};

struct Range
{
	UInt8 INFRARED;
	Float32 range;
	Header header;
	Float32 min_range;
	Float32 field_of_view;
	Float32 max_range;
	UInt8 radiation_type;
	UInt8 ULTRASOUND;
};

struct CameraInfo
{
	Float64 P;
	Float64 K;
	UInt32 beginning_y;
	Float64 D;
	UInt32 height;
	Float64 R;
	UInt32 beginning_x;
	Header header;
	String distorsion_model;
	UInt32 width;
	RegionOfInterest roi;
};

struct Imu
{
	Float64 orientation_covariance;
	Float64 linear_acceleration_covariance;
	Header header;
	Float64 angular_velocity_covariance;
	Quaternion orientation;
	Vector3 linear_acceleration;
	Vector3 angular_velocity;
};

struct LaserScan
{
	Float32 range_max;
	Float32 intensities;
	Float32 scan_time;
	Float32 angle_min;
	Float32 range_min;
	Header header;
	Float32 range;
	Float32 angle_increment;
	Float32 angle_max;
	Float32 time_increment;
};

struct Image
{
	UInt32 step;
	Header header;
	UInt8 data;
	UInt8 is_bigendian;
	UInt32 height;
	String encoding;
	UInt32 width;
};

struct ChannelFloat32
{
	Float32 values;
	String name;
};

struct CompressedImage
{
	String format;
	Header header;
	UInt8 data;
};

struct PointCloud
{
	Header header;
	Point32 points;
	ChannelFloat32 channels;
};

struct PointField
{
	UInt32 count;
	UInt8 datatype;
	String name;
	UInt32 offset;
};

struct PointCloud2
{
	UInt32 width;
	Bool is_dense;
	UInt32 point_step;
	PointField fields;
	UInt32 height;
	Bool is_bigendian;
	UInt8 data;
	Header header;
	UInt32 row_step;
};

struct JointState
{
	Float64 velocity;
	Float64 position;
	Float64 effort;
	String name;
};

struct NavSatStatus
{
	UInt16 SERVICE_GLONASS;
	UInt16 SERVICE_GALILEO;
	Int8 STATUS_NO_FIX;
	UInt16 SERVICE_COMPASS;
	Int8 STATUS_SBAS_FIX;
	Int8 STATUS_GBAS_FIX;
	Int8 status;
	UInt16 SERVICE_GPS;
	UInt16 service;
	Int8 STATUS_FIX;
};

struct NavSatFix
{
	Float64 longitude;
	UInt16 SERVICE_GLONASS;
	UInt8 COVARIANCE_TYPE_UNKNOWN;
	UInt8  COVARIANCE_TYPE_DIAGONAL_KNOWN;
	Int8 STATUS_NO_FIX;
	Float64 latitude;
	NavSatFix * status;
	UInt16 SERVICE_GALILEO;
	Int8 STATUS_SBAS_FIX;
	UInt8 COVARIANCE_TYPE_KNOWN;
	Int8 STATUS_GBAS_FIX;
	UInt8 position_covariance_type;
	UInt16 SERVICE_COMPASS;
	UInt16 SERVICE_GPS;
	UInt8 COVARIANCE_TYPE_APPROXIMATED;
	Header header;
	UInt16 service;
	Float64 altitude;
	Int8 STATUS_FIX;
	Int8 statusCode;
	Float64 position_covariance;
};

struct Joy
{
	Int32 buttons;
	Float32 axes;
	Header header;
};

struct JoyFeedback
{
	Float32 intensity;
	UInt8 TYPE_LED;
	UInt8 id;
	UInt8 TYPE_BUZZER;
	UInt8 type;
	UInt8 TYPE_RUMBLE;
};

struct JoyFeedbackArray
{
	JoyFeedback array;
};

[comment] Diagnostic Datatypes[/comment]

struct KeyValue
{
	String key;
	String value;
};

struct DiagnosticStatus
{
	Byte WARN;
	Byte ERROR;
	KeyValue values;
	String hardware_id;
	Byte level;
	Byte OK;
	String name;
	String message;
};

struct DiagnosticArray
{
	Header header;
	KeyValue values;
	DiagnosticStatus status;
};

[comment] Actionlib Datatypes[/comment]

struct GoalID
{
	String id;
	Time stamp;
};

struct GoalStatus
{
	UInt8 RECALLING;
	UInt8 REJECTED;
	UInt8 LOST;
	UInt8 SUCCEEDED;
	UInt8 ABORTED;
	UInt8 PREEMPTED;
	UInt8 RECALLED;
	UInt8 PENDING;
	UInt8 ACTIVE;
	UInt8 status;
	String text;
	UInt8 PREEMPTING;
};

struct GoalStatusArray
{
	GoalStatus status_list;
	Header header;
};

#endif
[/file]
[/template]
