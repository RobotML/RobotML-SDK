[comment encoding = UTF-8 /]
[module generate_Datatype_file('http://www.eclipse.org/uml2/3.0.0/UML')]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DataTypeQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::GeneralQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::ArchitectureQueries /]
[import org::eclipse::acceleo::module::OrocosGenerator::mmqueries::OrocosQueries/]

[template public generate_Datatype_file(c : Class, m: Model)]
[comment] [for (elt : Element | getDataTypesInClass(c))] [/comment]
[for (elt : Element | getElementsDataType(m))]
[let type: Type = elt] [comment] (isRobotMLDataType(m, type.name)  = false) and [/comment]
[if(isPrimitiveType(type) = false)] [comment] introduire test sur le plan de dÃ©ploiement [/comment]
[if (isExistingType(type) = false)]
[file ( 'src/DataTypes/'+type.name.substitute(' ', '_')+'.hpp', false, 'UTF-8')]
[addType(type)/]
namespace [m.name.substitute(' ','_')/]{
 struct [type.name/]{
	[for (property : Property |getProperties(type))]
    [let t :Type = property.type]
 [comment] conversion to ROS types done using getNameType(t) but missing conversion 
  to c++ types using convertType(type.name) => needs the use of the deploiement plan [/comment]
	[property.visibility/] [convertType(t.name)/] [property.name/];
	[/let]
	[/for]	
  }
 	[for (operation : Operation |getOperations(type))]
		[comment] [operation.visibility/]	[operation.type/] [operation.name/] ([getOperationSignature(operation)/]); [/comment]
		[operation.visibility/]	[convertType(operation.type.name)/] [operation.name/] (
		[for (input: Element | getOperationInputParameters(operation))]
			[let i : Parameter = input]
			[i.name/] [convertType(getOperationParameterType(operation, i))/],
			[/let]
		[/for]
		);
    [/for]
}
#ifndef _[type.name.toUpper()/]_H_
#define _[type.name.toUpper()/]_H_
#endif // _[type.name.toUpper()/]_H_
[/file]
[/if]
[/if]
[/let]
[/for]
[/template]
