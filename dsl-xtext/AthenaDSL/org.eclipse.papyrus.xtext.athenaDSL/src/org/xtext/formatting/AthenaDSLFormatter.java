/*
 * generated by Xtext
 */
package org.xtext.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class AthenaDSLFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {

		org.xtext.services.AthenaDSLGrammarAccess f = (org.xtext.services.AthenaDSLGrammarAccess) getGrammarAccess();

		c.setAutoLinewrap(140);
				
		c.setLinewrap().after(f.getLanguageDeclarationRule());
		c.setLinewrap().after(f.getLanguageDeclRule());
		c.setLinewrap().after(f.getArrayTypeRule());
		c.setLinewrap().after(f.getVectorTypeRule());
		c.setLinewrap().after(f.getMapTypeRule());
		c.setLinewrap().after(f.getUnionTypeRule());
		c.setLinewrap().after(f.getDefineTypeRule());
		c.setLinewrap().after(f.getIncludeDeclRule());
		c.setLinewrap().after(f.getDataTypeRule());
		c.setLinewrap().after(f.getFunctionCallRule());
		c.setLinewrap().after(f.getStructElementRule());
		c.setLinewrap().after(f.getProcessingDeclarationRule());
		c.setLinewrap(3).after(f.getPrototypeDeclarationRule());
		c.setLinewrap().after(f.getParameterDeclarationRule());
		c.setLinewrap().after(f.getReferenceDeclarationRule());
		c.setLinewrap().after(f.getStatesetDeclarationRule());
		c.setLinewrap().after(f.getTransitionDeclarationRule());
		c.setLinewrap().after(f.getEventDeclarationRule());
		c.setLinewrap().after(f.getStatesetDeclarationRule());
		c.setLinewrap().after(f.getInstanceDeclarationRule());
		c.setLinewrap().after(f.getInteractionDeclarationRule());
		c.setLinewrap().after(f.getLocalParameterDeclarationRule());
		c.setLinewrap().after(f.getLocalEventDeclarationRule());
		c.setLinewrap().after(f.getInteractionCallRule());
		c.setLinewrap().after(f.getTransitionDeclarationRule());
		
		c.setLinewrap().after(f.getEndAccRule());
		
		c.setLinewrap().before(f.getArgRule());
		c.setLinewrap().after(f.getArgRule());
		
		c.setLinewrap().after(f.getBeginRule());
		c.setLinewrap().before(f.getEndRule());	
		c.setLinewrap(2).after(f.getEndRule());	
		
		
		c.setIndentationIncrement().after(f.getBeginRule());
		c.setIndentationDecrement().before(f.getEndRule());
		c.setIndentationIncrement().after(f.getOpenParRule());
		c.setIndentationDecrement().before(f.getCloseParRule());
		
		c.setNoSpace().after(f.getAtRule());
		c.setNoSpace().around(f.getDotRule());
		c.setNoSpace().before(f.getComaRule());
		c.setNoSpace().after(f.getOpenParRule());
		c.setNoSpace().before(f.getCloseParRule());

		c.setLinewrap().before(f.getSL_COMMENTRule());
		c.setLinewrap().before(f.getML_COMMENTRule());
		c.setLinewrap().after(f.getML_COMMENTRule());
		c.setLinewrap().after(f.getPrototypeDeclarationRule());

	}
}
