[comment encoding = UTF-8 /]
[module generateBehaviorDeclaration('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::eclipse::robotml::generators::acceleo::athena::mmqueries::MMSpecificQueries/]

[template public generateFunctionBehavior(behaviors : Sequence(Behavior))]
[for(behavior : Behavior | behaviors)]
[if(behavior.oclIsKindOf(FunctionBehavior))]
[if(hasComment(behavior))]
[getCommentFromElement(behavior)/]
[/if]
function [behavior.name/] <CPP> ()
[/if]
[/for]
[/template]

[template public generateProcessingBehavior(behaviors : Sequence(Behavior))]
[for(behavior : Behavior | behaviors)]
[if(behavior.oclIsKindOf(OpaqueBehavior))]
[if(hasComment(behavior))]
[getCommentFromElement(behavior)/]
[/if]
processing [behavior.name/] [if(behavior.ownedParameter->isEmpty() =(true))]( ) begin[else](
[for(param : Parameter | behavior.ownedParameter)]
						[param.direction/] [param.type.name/] [param.name.toLower()/][if(behavior.ownedParameter->indexOf(param) = behavior.ownedParameter->size())] ) begin[/if]		
[/for]
[/if]
[let processing : OpaqueBehavior = behavior.oclAsType(OpaqueBehavior)]
[for(lng : String | processing.language)]
[if(lng.equalsIgnoreCase('athena'))]
[for(bodyStr : String | processing._body)]
	[bodyStr.trim()/]
[/for]
[/if]
[/for]
[/let]
[/if]
[/for]
[/template]

[template public generateBehaviors(behaviors : Sequence(Behavior))]
[for(behavior : Behavior | behaviors)]
[if(behavior.oclIsKindOf(OpaqueBehavior))]
[generateProcessing(behavior.oclAsType(OpaqueBehavior))/]
[elseif(behavior.oclIsKindOf(FunctionBehavior) or behavior.oclIsKindOf(Operation))]
[generateFunction(behavior)/]
[else]
//unknown behavior : [behavior.name/]
[/if]
[/for]
[/template]

[template private generateFunction(behavior : Behavior)]
//[behavior.name/]
[if(hasComment(behavior))]
[getCommentFromElement(behavior)/]
[/if]
function [behavior.name/] <CPP> ( )
[/template]

[template private generateProcessing(behavior : OpaqueBehavior)]
//[behavior.name/]
[if(hasComment(behavior))]
[getCommentFromElement(behavior)/]
[/if]
[let languages : OrderedSet(String) = behavior.language]
[if(languages->notEmpty() =(true))]
[for(language : String | languages)]
[if(language.contains('FILE') =(true))]
[generateProcessingWithFile(behavior)/]
[else]
[generateProcessingWithOutFile(behavior)/]
[/if]
[/for]
[/if]
[/let]
processing [behavior.name/] () begin
end
[/template]

[template private generateProcessingWithFile(behavior : OpaqueBehavior)]
[comment]Open file (path in body), use xtext to check source bloc[/comment]
[/template]

[template private generateProcessingWithOutFile(behavior : OpaqueBehavior)]
[comment]Get language, and check body resource[/comment]
[/template]