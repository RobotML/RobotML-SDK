[comment encoding = UTF-8 /]
[module generate_orocos_interface_hpp('http://www.eclipse.org/uml2/3.0.0/UML','http://Papyrus/RobotML/1')]
[import org::eclipse::acceleo::module::OrocosGenerator::mmqueries::OrocosQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DataTypeQueries /]

[template public generateOrocosInterfaceHpp(i : Interface, root_model : Model)]

[file ( 'src/'+i.name+'/'+i.name+'.hpp', false, 'UTF-8')]
#include <string>
#include <numeric>
[setLibraries(i)/]

//in case of datatypes use, uncomment the using namespace command below
[let model : Model = getRootModel(root_model)]
//using namespace [model.name.substitute(' ', '_')/]_types;
[/let]
namespace [i.namespace.name.substitute(' ', '_')/]	 {

	class [i.name/] 
		: public RTT::TaskContext 
	{
		[comment attribut & property declaration/]
		[let elt : Element = i.oclAsType(Element)]
		[for (property : Property | i.getAllAttributes())]
		[if(property.isStatic)]
		[property.visibility/] static [getNameType(property.type)/] [property.name/];
		[else]
		[property.visibility/] [getNameType(property.type)/] [property.name/];
		[/if]
		[/for]
		[/let] 

		[comment operation declaration/]
		[for (op : Operation | i.getAllOperations())]	
		[comment] virtual [getNameType(op.type)/] [op.name/] ([getOperationSignature(op)/]) = 0; [/comment]
		[if(op.isStatic)]
	    virtual [op.visibility/] static [convertType(op.type.name)/] [op.name/] (
		[else]
		virtual [op.visibility/] [convertType(op.type.name)/] [op.name/] (
		[/if]
		[if(getOperationInputParameters(op) <> null)]
		[for (input: Element | getOperationInputParameters(op))]
			[let p : Parameter = input]
			[comment] [getOperationParameterType(op, p)/] [/comment]
			[p.type.name/] [p.name/] ,
			[/let]
		[/for]
		[/if]
		[if(getOperationOutputParameters (op) <> null)]
		[for (output: Element | getOperationOutputParameters(op))]
			[let p : Parameter = output]
			[comment] [getOperationParameterType(op, p)/] [/comment]
			[p.type.name/] &[p.name/],
			[/let]
		[/for]
		[/if]
		) = 0;
		[/for]
		[comment constructor/]
		[i.name/] (const std::string& name) = 0;
		virtual ~[i.name/]() {}
	};

}
[/file]

[/template]