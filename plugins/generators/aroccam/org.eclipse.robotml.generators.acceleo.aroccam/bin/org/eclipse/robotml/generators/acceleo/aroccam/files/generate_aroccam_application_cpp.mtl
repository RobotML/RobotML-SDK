[comment encoding = UTF-8 /]
[module generate_aroccam_application_cpp('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::eclipse::robotml::generators::acceleo::mmqueries::ArchitectureQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DataTypeQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DeploymentQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::GeneralQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::FSMQueries /]
[import org::eclipse::robotml::generators::acceleo::aroccam::files::generate_aroccam_component_cpp /]

[template public generateAroccamApplicationCpp(model : Model)]

[file ('src/' + model.name + 'Application/' + model.name + 'Application.cpp', false, 'UTF-8')]
#include "[model.name/]Application.hpp"

//stl
#include <iostream>

#include <effibox/interfaces/camera/all.hpp>
#include <effibox/interfaces/rangefinder/all.hpp>
#include <effibox/interfaces/gps/all.hpp>
#include <effibox/interfaces/vehicle/all.hpp>
#include <effibox/interfaces/imu/all.hpp>
#include <effibox/interfaces/timer/all.hpp>
#include <effibox/interfaces/thread/all.hpp>

#include <effibox/interface/frameerror.hpp>

#include <effiqtviewer/all.hpp>

using namespace effibox;
using namespace qtviewer;

void [model.name/]Application::initialization(const std::string &)
{
[for (inst: InstanceSpecification | getInstanceSpecifications(model)) before('\t//robotML component connections\n')]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and inst.isAllocatedTo('aroccam'))]
			[for (port : Port | p.type.oclAsType(Class).getInputPortsForElement())]
				[for (conn : Connector | port.getConnectionsFromPort())]
					[if (	conn.getSourceComponentForConnector().type.oclAsType(Class).hasStereotype('System') or
							conn.getSourceComponentForConnector().type.oclAsType(Class).hasStereotype('Software'))]
  [conn.getSourceComponentInstanceNameForConnector()/].[conn.getSourcePortName()/]->addFunctionToExecute(boost::bind(&[conn.getDestComponentForConnector().type.name/]::[conn.getDestPortName()/], &[conn.getDestComponentForConnector().name/], _1));
					[/if]
				[/for]
			[/for]
		[/if]
	[/let]
[/for]
}

void [model.name/]Application::finalization()
{
}

//effibox cameras event callbacks
[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('CameraSystem'))]
void [model.name/]Application::frame[p.name/](const effibox::FramePtr & f)
{
	camera::FrameCameraImagePtr frame = frame_cast<camera::FrameCameraImage>(f);
	qtviewer::ShowFrame("[p.name/]", frame);
}
		[/if]
	[/let]
[/for]

//effibox rangefinder event callbacks
[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('LidarSystem'))]
void [model.name/]Application::frame[p.name/](const effibox::FramePtr & f)
{
	rangefinder::FrameRangefinderDistancePtr frame = frame_cast<rangefinder::FrameRangefinderDistance>(f);
	qtviewer::ShowFrame("[p.name/]", frame);
}
		[/if]
	[/let]
[/for]

//effibox gps events callbacks
[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('GPSSystem'))]
void [model.name/]Application::frame[p.name/]_GGA(const effibox::FramePtr & f)
{
	gps::FrameGpsGGAPtr frame = frame_cast<gps::FrameGpsGGA>(f);
	qtviewer::ShowFrame("[p.name/]", frame);
}
		[/if]
	[/let]
[/for]

//effibox odometry events callback
[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('OdometrySystem'))]
void [model.name/]Application::frame[p.name/]_genericodometry(const effibox::FramePtr & f)
{
	vehicle::FrameOdometryPtr frame = frame_cast<vehicle::FrameOdometry>(f);
	qtviewer::ShowFrame("[p.name/]", frame);
}
		[/if]
	[/let]
[/for]

//effibox imu events callback
[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and p.type.oclAsType(Class).hasStereotype('InertialMeasurementUnitSystem'))]
void [model.name/]Application::frame[p.name/]_GLOBAL(const effibox::FramePtr & f)
{
	imu::FrameIMUPtr frame = frame_cast<imu::FrameIMU>(f);
	qtviewer::ShowFrame("[p.name/]", frame);
}
		[/if]
	[/let]
[/for]

void [model.name/]Application::frameError(const FramePtr & f)
{
	effibox::FrameErrorPtr frame = frame_cast<FrameError>(f);
	std::cerr << "Frame error " << frame->getErrorMessage() << " occured at " << frame->getDate() << "!" << std::endl;
}
[/file]

[comment] Generate Sub-Components [/comment]
[for (inst: InstanceSpecification | getInstanceSpecifications(model))]
	[let p: Property = getInstance(model, inst)]
		[if (p.isProperty() and inst.isAllocatedTo('aroccam'))]
[generateAroccamComponentCpp(p.type.oclAsType(Class),model)/]
		[/if]
	[/let]
[/for]

[/template]
