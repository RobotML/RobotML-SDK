[comment encoding = UTF-8 /]
[module generate_morse('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::eclipse::robotml::generators::acceleo::mmqueries::GeneralQueries /]


[template public generateRobots(model : Model)]
	[for (elt: NamedElement | getElementsWithStereotype(model, 'Robot'))]
		[let c : Class = elt.oclAsType(Class)]
[generateRobot(c, model)/]
		[/let]
	[/for]
[/template]

[template public generateRobot(aClass : Class, model : Model)]
robot = Robot('[aClass.name/]')
robot.name = "[aClass.name/]"
	[for (elt: NamedElement | getElementsWithInheritedStereotype(model, 'RoboticSystem'))]
		[let c : Class = elt.oclAsType(Class)]
# [c.name/]
		[if (hasStereotype(c, 'LidarSystem'))]
[generateLidar(c, model)/]
		[elseif (hasStereotype(c, 'CameraSystem'))]
[generateCamera(c, model)/]
		[elseif (hasStereotype(c, 'GPSSystem'))]
[generateGPS(c, model)/]
		[elseif (hasStereotype(c, 'Servoings'))]
[generateServoing(c, model)/]
		[elseif (hasStereotype(c, 'Odometer'))]
[generateOdometry(c, model)/]
		[elseif (hasStereotype(c, 'IMU'))]
[generateIMU(c, model)/]
		[elseif (hasStereotype(c, 'SensorSystem'))]
[generateGenericSensor(c, model)/]
		[elseif (hasStereotype(c, 'ActuatorSystem'))]
[generateGenericActuator(c, model)/]
		[else]
[generateSystem(c, model)/]
		[/if]
		[/let]
	[/for]
[/template]


[template public generateGenericActuator(aClass : Class, model : Model)]
#generic_actuator = Actuator('[aClass.name/]')
#generic_actuator.configure_mw('ros')
#robot.append(generic_actuator)
[/template]

[template public generateGenericSensor(aClass : Class, model : Model)]
#generic_sensor = Sensor('[aClass.name/]')
#generic_sensor.frequency([getAttributeValue(aClass, 'frequency', 'SensorSystem', '10.')/])
#generic_sensor.configure_mw('ros')
#robot.append(generic_sensor)
[/template]

[template public generateServoing(aClass : Class, model : Model)]
motion = Actuator('v_omega')
motion.configure_mw('ros')
robot.append(motion)
[/template]

[template public generateIMU(aClass : Class, model : Model)]
imu = Sensor('imu')
imu.frequency([getAttributeValue(aClass, 'frequency', 'IMU', '10.')/])
imu.configure_mw('ros')
robot.append(imu)
[/template]

[template public generateOdometry(aClass : Class, model : Model)]
odom = Sensor('pose')
odom.frequency([getAttributeValue(aClass, 'frequency', 'Odometer', '10.')/])
odom.configure_mw('ros')
robot.append(odom)
[/template]

[template public generateGPS(aClass : Class, model : Model)]
gps = Sensor('gps')
gps.frequency([getAttributeValue(aClass, 'frequency', 'GPSSystem', '10.')/])
gps.configure_mw('ros')
robot.append(gps)
[/template]

[template public generateLidar(aClass : Class, model : Model)]
lidar = Sensor('sick')
lidar.properties(scan_window = 180, resolution = 1, laser_range = [getAttributeValue(aClass, 'range_max', 'LidarSystem', '25')/])
lidar.frequency([getAttributeValue(aClass, 'frequency', 'LidarSystem', '20.')/])
lidar.configure_mw('ros')
robot.append(lidar)
[/template]

[template public generateCamera(aClass : Class, model : Model)]
camera = Sensor('video_camera')

[comment Used formula here: http://www.openrobots.org/morse/doc/stable/user/sensors/video_camera.html#camera-calibration-matrix /]
height = [getAttributeValue(aClass, 'u_0', 'CameraSystem', '0')/]*2
width = [getAttributeValue(aClass, 'v_0', 'CameraSystem', '0')/]*2
alpha_u = [getAttributeValue(aClass, 'alpha_u', 'CameraSystem', '0')/]
alpha_v = [getAttributeValue(aClass, 'alpha_v', 'CameraSystem', '0')/]

if (width>height):
	focal = (alpha_u+alpha_v)/2*32/width
else:
	focal = (alpha_u+alpha_v)/2*32/height

camera.properties(cam_width = width,
                  cam_height = height,
				  cam_focal = focal)

camera.frequency([getAttributeValue(aClass, 'frequency', 'CameraSystem', '25.')/])

camera.configure_mw('ros')
robot.append(camera)
[/template]

[template public generateSystem(aClass : Class, model : Model)]
#   TBD
[/template]

[template public generateMorse(model : Model)]
[file ('morse' + model.name + '.py', false, 'UTF-8')]
from morse.builder import *
# Generate robots
[generateRobots(model)/]
# Select the environement
env = Environment("[model.name/].blend")

[/file]
[/template]
