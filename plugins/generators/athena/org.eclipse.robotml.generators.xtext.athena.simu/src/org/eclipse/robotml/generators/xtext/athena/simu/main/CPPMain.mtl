[comment encoding = UTF-8 /]
[module CPPMain('http://www.xtext.org/AthenaDSL')/]

[template public CPPMain(project : Project)]

[file ('main.cc', false, 'UTF-8')] 
//----------------------------------------------------------------
// Pre-requisites
//----------------------------------------------------------------
#include <iostream>
#include <string>
#include <vector>
#include <boost/program_options.hpp>
#include "Compatibility.h"
#include "FunctionDirectory.h"
#include "Environment.h"
#include "timeCheck.h"
#include "Log.h"
#include "AthenaComponent.h"
#include "xml.h"

using namespace std;
using namespace AthenaV3;

extern "C" __IMPORT__ void setFunctionDirectory(FunctionDirectory* fdir);

//----------------------------------------------------------------
namespace generated {
	void processings_init();
	AthenaComponent* createInstances(XmlNode* config, AthenaComponent* parent = NULL);
}

//----------------------------------------------------------------
// Simulation Main
//----------------------------------------------------------------
int main(int argc, char** argv) {


	// User program options
	namespace po = boost::program_options;
	po::options_description desc("Allowed options");
	desc.add_options()
	    ("help", "produce help message")
	    ("config", po::value<string>(), "set config file")
	    ("nbsteps", po::value<unsigned int>()->default_value(10), "number of simulation steps")
	    ("command", "command mode")
	    ("logLevel", po::value<unsigned int>()->default_value(2), "log detail level")
	;

	po::variables_map vm;
	po::store(po::parse_command_line(argc, argv, desc), vm);
	po::notify(vm);

	if (vm.count("help")) {
	    cout << "> " << desc << endl;
	    return 1;
	}

	// command mode ?
	if (vm.count("command")) { string s; cout << endl << "command> " ; cin >> s; }

	if (vm.count("config")) {
	    cout << "> Config file set to: " << vm['['/]"config"[']'/].as<string>() << "." << endl;
	} else {
	    cout << "> Config file was not set." << endl;
	    cout << desc << endl;
	    return 1;
	}
	cout << "> Number of simulation steps set to: " << vm['['/]"nbsteps"[']'/].as<unsigned int>() << "." << endl;


	// Load of configuration
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Loading configuration file." << endl;
	cout << "//----------------------------------------------------------------" << endl;

	Xml conf(vm['['/]"config"[']'/].as<string>(), true);
	cout << "> config file " << vm['['/]"config"[']'/].as<string>() << " parsed." << endl;

	XmlNode* xincs = conf.get("config.includes");
	if (xincs != NULL) {
		XmlNode* root = conf.get("config.instance");
		for (unsigned int i=0; i<xincs->size(); i++) {
			string incName = xincs->get("include",i)->get();
			cout << "> include in root instance: " << incName << endl;
			Xml incl(incName, true);
			XmlParser(root, incl.toXML());
		}

	}

	// User libraries
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Loading user libraries." << endl;
	cout << "// (Matlab and ../../lib must be in your library path" << endl;
	cout << "//----------------------------------------------------------------" << endl;

	FunctionDirectory fdir;
	setFunctionDirectory(&fdir);
	XmlNode* xlibs = conf.get("config.user-libraries");
	vector<LibraryLoader*> libraries;
	if (xlibs != NULL) {
		cout << "> user library count : " << xlibs->size() << endl;
		for (unsigned int i=0; i<xlibs->size(); i++) {
			string libraryName = xlibs->get("library",i)->get();
			cout << "> user library: " << libraryName << endl;
			libraries.push_back( new LibraryLoader(libraryName.c_str()) );
		}

	}

	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Initializing processings." << endl;
	cout << "//----------------------------------------------------------------" << endl;

	generated::processings_init();

	// Log
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Logs init." << endl;
	cout << "//----------------------------------------------------------------" << endl;
	setGlobalLog(new Log());
	unsigned int logLevel = vm['['/]"logLevel"[']'/].as<unsigned int>();
	getGlobalLog().setLogLevel(logLevel);
	cout << ">> log address: " << &getGlobalLog() << endl;

	// Environment
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Creating environment." << endl;
	cout << "//----------------------------------------------------------------" << endl;
	XmlNode* envConf = conf.get("config.Environment");
	cout << "// from directory: " << envConf->get() << endl;
	try {
		createEnvironment(envConf->get());
	} catch (...) {
		cerr << "> Couldn't initialize environment from file !" << endl;
	}

	// Simulation creation
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Creating simulation instances." << endl;
	cout << "//----------------------------------------------------------------" << endl;
	XmlNode* xmlRoot = conf.get("config");
	AthenaComponent* root = generated::createInstances(xmlRoot);
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Initializing simulation instances." << endl;
	cout << "//----------------------------------------------------------------" << endl;
	root->init();
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Connecting simulation instance parameters." << endl;
	cout << "//----------------------------------------------------------------" << endl;
	root->connect();

	// Time measurements
	TimeMap TM;
	setStaticTimeMap(&TM);

	// Simulation execution
	cout << "//----------------------------------------------------------------" << endl;
	cout << "// Executing simulation." << endl;
	cout << "//----------------------------------------------------------------" << endl;

	// command mode ?
	if (vm.count("command")) { string s; cout << endl << "command> " ; cin >> s; }

	unsigned int nbsteps = vm['['/]"nbsteps"[']'/].as<unsigned int>();
	for (unsigned int i=0; i<nbsteps; i++) {
		TM.startRecordSample("main");
		root->step(i);
		TM.endRecordSample("main");
		// command mode ?
		if (vm.count("command")) { string s; cout << endl << "command> " ; cin >> s; }
	}

	// Simulation end
	cout << "//----------------------------------------------------------------" << endl;
	getGlobalLog().flushAndCloseAll();
	cout << "// unload libraries" << endl;
	while (libraries.size()>0) {
		delete *libraries.begin();
		libraries.erase(libraries.begin());
	}
	cout << "//----------------------------------------------------------------" << endl;
	TM.showRecords();

}


[/file]
	
[/template]
